


NVFORTRAN (Version    20.11)          02/16/2022  17:28:45      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: cmpl_binding.F90

(    1) SUBROUTINE CMPL_RECV(KBUF,KCOUNT,KTYPE,KSOURCE,KTAG,KCOMM,&
(    2)  &KSYNC,KBLOCK,KRCOUNT,KRFROM,KRTAG,KERROR)
(    3) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(    4) USE MPL_MODULE
(    5) IMPLICIT NONE
(    6) INTEGER KCOUNT,KTYPE,KSOURCE,KTAG,KCOMM
(    7) INTEGER KRCOUNT,KRFROM,KRTAG,KERROR,KSYNC,KBLOCK
(    8) INTEGER(KIND=JPIM) :: KBUF(*)
(    9) INTEGER,EXTERNAL :: CONVIN,CONVOUT
(   10) INTEGER ILENB,ILEN
(   11) ILENB=CONVIN(KCOUNT,KTYPE)
(   12) IF(KSOURCE > 0) THEN
(   13)   IF(KTAG /= -1) THEN
(   14)     CALL MPL_RECV(KBUF(1:ILENB),KSOURCE=KSOURCE,KTAG=KTAG,&
(   15)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   16)   ELSE
(   17)     CALL MPL_RECV(KBUF(1:ILENB),KSOURCE=KSOURCE,&
(   18)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   19)   ENDIF
(   20) ELSE
(   21)   IF(KTAG /= -1) THEN
(   22)     CALL MPL_RECV(KBUF(1:ILENB),KTAG=KTAG,&
(   23)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   24)   ELSE
(   25)     CALL MPL_RECV(KBUF(1:ILENB),&
(   26)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   27)   ENDIF
(   28) ENDIF
(   29) KRCOUNT=CONVOUT(ILEN,KTYPE)
(   30) END SUBROUTINE CMPL_RECV
(   31) 
(   32) SUBROUTINE CMPL_SEND(KBUF,KCOUNT,KTYPE,KDEST,KTAG,KCOMM,&
(   33)  &KSYNC,KBLOCK,KERROR)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:45      page 2

(   34) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   35) USE MPL_MODULE
(   36) IMPLICIT NONE
(   37) INTEGER KCOUNT,KTYPE,KTAG,KCOMM,KSYNC,KBLOCK,KDEST
(   38) INTEGER KERROR
(   39) INTEGER KBUF(*)
(   40) INTEGER,EXTERNAL :: CONVIN,CONVOUT
(   41) INTEGER ILEN
(   42) ILEN=CONVIN(KCOUNT,KTYPE)
(   43) CALL MPL_SEND(KBUF(1:ILEN),KDEST=KDEST,KTAG=KTAG,KERROR=KERROR)
(   44) END SUBROUTINE CMPL_SEND
(   45) 
(   46) SUBROUTINE CMPL_BROADCAST(KBUF,KCOUNT,KTYPE,KROOT,KTAG,KCOMM,&
(   47)  &KSYNC,KBLOCK,KERROR)
(   48) USE MPL_MODULE
(   49) IMPLICIT NONE
(   50) INTEGER KCOUNT,KTYPE,KTAG,KCOMM,KSYNC,KBLOCK,KROOT
(   51) INTEGER KERROR
(   52) INTEGER KBUF(*)
(   53) INTEGER,EXTERNAL :: CONVIN,CONVOUT
(   54) INTEGER ILEN
(   55) ILEN=CONVIN(KCOUNT,KTYPE)
(   56) CALL MPL_BROADCAST(KBUF(1:ILEN),KROOT=KROOT,KTAG=KTAG,KERROR=KERROR)
(   57) END SUBROUTINE CMPL_BROADCAST
(   58) 
(   59) SUBROUTINE CMPL_ABORT(CDMESS)
(   60) USE MPL_MODULE
(   61) IMPLICIT NONE
(   62) CHARACTER(LEN=*) CDMESS
(   63) CALL MPL_ABORT(CDMESS)
(   64) END SUBROUTINE CMPL_ABORT
(   65) 
(   66) SUBROUTINE CMPI_ABORT(KRC)
(   67) USE MPL_MPIF, ONLY : MPI_COMM_WORLD
(   68) IMPLICIT NONE
(   69) INTEGER,INTENT(IN) :: KRC
(   70) INTEGER :: IRET
(   71) CALL MPI_ABORT(MPI_COMM_WORLD,KRC,IRET)
(   72) END SUBROUTINE CMPI_ABORT
(   73) 
(   74) SUBROUTINE CMPL_INIT(LDTRMSG,KERROR)
(   75) USE MPL_MODULE
(   76) IMPLICIT NONE
(   77) LOGICAL LDTRMSG
(   78) INTEGER KERROR
(   79) CALL MPL_INIT(KERROR=KERROR,LDINFO=.FALSE.)
(   80) END SUBROUTINE CMPL_INIT
(   81) 
(   82) FUNCTION CMPL_NPROC()
(   83) USE MPL_MODULE
(   84) IMPLICIT NONE
(   85) INTEGER CMPL_NPROC
(   86) CMPL_NPROC=MPL_NPROC()
(   87) END FUNCTION CMPL_NPROC
(   88) 
(   89) FUNCTION CMPL_MYRANK()
(   90) USE MPL_MODULE
(   91) IMPLICIT NONE






NVFORTRAN (Version    20.11)          02/16/2022  17:28:45      page 3

(   92) INTEGER CMPL_MYRANK
(   93) CMPL_MYRANK=MPL_MYRANK()
(   94) END FUNCTION CMPL_MYRANK
(   95) 
(   96) SUBROUTINE CMPL_BARRIER(KERROR)
(   97) USE MPL_MODULE
(   98) IMPLICIT NONE
(   99) INTEGER KERROR
(  100) CALL MPL_BARRIER(KERROR=KERROR)
(  101) END SUBROUTINE CMPL_BARRIER
(  102) 
(  103) SUBROUTINE CMPL_END(KERROR)
(  104) USE MPL_MODULE
(  105) IMPLICIT NONE
(  106) INTEGER KERROR
(  107) CALL MPL_END(KERROR=KERROR)
(  108) END SUBROUTINE CMPL_END
(  109) 
(  110) SUBROUTINE CMPL_GETARG(KARGNO, CDARG)
(  111) USE MPL_MODULE
(  112) IMPLICIT NONE
(  113) INTEGER KARGNO
(  114) CHARACTER(LEN=*) CDARG
(  115) CALL MPL_GETARG(KARGNO, CDARG)
(  116) END SUBROUTINE CMPL_GETARG
(  117) 
(  118) FUNCTION CMPL_IARGC()
(  119) USE MPL_MODULE
(  120) IMPLICIT NONE
(  121) INTEGER CMPL_IARGC
(  122) CMPL_IARGC = MPL_IARGC()
(  123) END FUNCTION CMPL_IARGC
(  124) 
(  125) FUNCTION MPE_MYRANK()
(  126) USE MPL_MODULE
(  127) IMPLICIT NONE
(  128) INTEGER MPE_MYRANK
(  129) MPE_MYRANK=MPL_MYRANK()
(  130) END FUNCTION MPE_MYRANK
(  131) 
(  132) SUBROUTINE MPEI_ABORT(CDMESS)
(  133) USE MPL_MODULE
(  134) IMPLICIT NONE
(  135) CHARACTER(LEN=*) CDMESS
(  136) CALL MPL_ABORT()
(  137) END SUBROUTINE MPEI_ABORT


















NVFORTRAN (Version    20.11)          02/16/2022  17:28:45      page 4

(    1) # 1 "cmpl_binding.F90"
(    1) SUBROUTINE CMPL_RECV(KBUF,KCOUNT,KTYPE,KSOURCE,KTAG,KCOMM,&
(    2)  &KSYNC,KBLOCK,KRCOUNT,KRFROM,KRTAG,KERROR)
(    3) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(    4) USE MPL_MODULE
(    5) IMPLICIT NONE
(    6) INTEGER KCOUNT,KTYPE,KSOURCE,KTAG,KCOMM
(    7) INTEGER KRCOUNT,KRFROM,KRTAG,KERROR,KSYNC,KBLOCK
(    8) INTEGER(KIND=JPIM) :: KBUF(*)
(    9) INTEGER,EXTERNAL :: CONVIN,CONVOUT
(   10) INTEGER ILENB,ILEN
(   11) ILENB=CONVIN(KCOUNT,KTYPE)
(   12) IF(KSOURCE > 0) THEN
(   13)   IF(KTAG /= -1) THEN
(   14)     CALL MPL_RECV(KBUF(1:ILENB),KSOURCE=KSOURCE,KTAG=KTAG,&
(   15)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   16)   ELSE
(   17)     CALL MPL_RECV(KBUF(1:ILENB),KSOURCE=KSOURCE,&
(   18)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   19)   ENDIF
(   20) ELSE
(   21)   IF(KTAG /= -1) THEN
(   22)     CALL MPL_RECV(KBUF(1:ILENB),KTAG=KTAG,&
(   23)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   24)   ELSE
(   25)     CALL MPL_RECV(KBUF(1:ILENB),&
(   26)      KFROM=KRFROM,KRECVTAG=KRTAG,KOUNT=ILEN,KERROR=KERROR)
(   27)   ENDIF
(   28) ENDIF
(   29) KRCOUNT=CONVOUT(ILEN,KTYPE)
(   30) END SUBROUTINE CMPL_RECV
(   31) # 32 "cmpl_binding.F90"
(   32) SUBROUTINE CMPL_SEND(KBUF,KCOUNT,KTYPE,KDEST,KTAG,KCOMM,&
(   33)  &KSYNC,KBLOCK,KERROR)
(   34) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   35) USE MPL_MODULE
(   36) IMPLICIT NONE
(   37) INTEGER KCOUNT,KTYPE,KTAG,KCOMM,KSYNC,KBLOCK,KDEST
(   38) INTEGER KERROR
(   39) INTEGER KBUF(*)
(   40) INTEGER,EXTERNAL :: CONVIN,CONVOUT
(   41) INTEGER ILEN
(   42) ILEN=CONVIN(KCOUNT,KTYPE)
(   43) CALL MPL_SEND(KBUF(1:ILEN),KDEST=KDEST,KTAG=KTAG,KERROR=KERROR)
(   44) END SUBROUTINE CMPL_SEND
(   45) # 46 "cmpl_binding.F90"
(   46) SUBROUTINE CMPL_BROADCAST(KBUF,KCOUNT,KTYPE,KROOT,KTAG,KCOMM,&
(   47)  &KSYNC,KBLOCK,KERROR)
(   48) USE MPL_MODULE
(   49) IMPLICIT NONE
(   50) INTEGER KCOUNT,KTYPE,KTAG,KCOMM,KSYNC,KBLOCK,KROOT
(   51) INTEGER KERROR
(   52) INTEGER KBUF(*)
(   53) INTEGER,EXTERNAL :: CONVIN,CONVOUT
(   54) INTEGER ILEN
(   55) ILEN=CONVIN(KCOUNT,KTYPE)
(   56) CALL MPL_BROADCAST(KBUF(1:ILEN),KROOT=KROOT,KTAG=KTAG,KERROR=KERROR)
(   57) END SUBROUTINE CMPL_BROADCAST






NVFORTRAN (Version    20.11)          02/16/2022  17:28:45      page 5

(   58) # 59 "cmpl_binding.F90"
(   59) SUBROUTINE CMPL_ABORT(CDMESS)
(   60) USE MPL_MODULE
(   61) IMPLICIT NONE
(   62) CHARACTER(LEN=*) CDMESS
(   63) CALL MPL_ABORT(CDMESS)
(   64) END SUBROUTINE CMPL_ABORT
(   65) # 66 "cmpl_binding.F90"
(   66) SUBROUTINE CMPI_ABORT(KRC)
(   67) USE MPL_MPIF, ONLY : MPI_COMM_WORLD
(   68) IMPLICIT NONE
(   69) INTEGER,INTENT(IN) :: KRC
(   70) INTEGER :: IRET
(   71) CALL MPI_ABORT(MPI_COMM_WORLD,KRC,IRET)
(   72) END SUBROUTINE CMPI_ABORT
(   73) # 74 "cmpl_binding.F90"
(   74) SUBROUTINE CMPL_INIT(LDTRMSG,KERROR)
(   75) USE MPL_MODULE
(   76) IMPLICIT NONE
(   77) LOGICAL LDTRMSG
(   78) INTEGER KERROR
(   79) CALL MPL_INIT(KERROR=KERROR,LDINFO=.FALSE.)
(   80) END SUBROUTINE CMPL_INIT
(   81) # 82 "cmpl_binding.F90"
(   82) FUNCTION CMPL_NPROC()
(   83) USE MPL_MODULE
(   84) IMPLICIT NONE
(   85) INTEGER CMPL_NPROC
(   86) CMPL_NPROC=MPL_NPROC()
(   87) END FUNCTION CMPL_NPROC
(   88) # 89 "cmpl_binding.F90"
(   89) FUNCTION CMPL_MYRANK()
(   90) USE MPL_MODULE
(   91) IMPLICIT NONE
(   92) INTEGER CMPL_MYRANK
(   93) CMPL_MYRANK=MPL_MYRANK()
(   94) END FUNCTION CMPL_MYRANK
(   95) # 96 "cmpl_binding.F90"
(   96) SUBROUTINE CMPL_BARRIER(KERROR)
(   97) USE MPL_MODULE
(   98) IMPLICIT NONE
(   99) INTEGER KERROR
(  100) CALL MPL_BARRIER(KERROR=KERROR)
(  101) END SUBROUTINE CMPL_BARRIER
(  102) # 103 "cmpl_binding.F90"
(  103) SUBROUTINE CMPL_END(KERROR)
(  104) USE MPL_MODULE
(  105) IMPLICIT NONE
(  106) INTEGER KERROR
(  107) CALL MPL_END(KERROR=KERROR)
(  108) END SUBROUTINE CMPL_END
(  109) # 110 "cmpl_binding.F90"
(  110) SUBROUTINE CMPL_GETARG(KARGNO, CDARG)
(  111) USE MPL_MODULE
(  112) IMPLICIT NONE
(  113) INTEGER KARGNO
(  114) CHARACTER(LEN=*) CDARG
(  115) CALL MPL_GETARG(KARGNO, CDARG)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:45      page 6

(  116) END SUBROUTINE CMPL_GETARG
(  117) # 118 "cmpl_binding.F90"
(  118) FUNCTION CMPL_IARGC()
(  119) USE MPL_MODULE
(  120) IMPLICIT NONE
(  121) INTEGER CMPL_IARGC
(  122) CMPL_IARGC = MPL_IARGC()
(  123) END FUNCTION CMPL_IARGC
(  124) # 125 "cmpl_binding.F90"
(  125) FUNCTION MPE_MYRANK()
(  126) USE MPL_MODULE
(  127) IMPLICIT NONE
(  128) INTEGER MPE_MYRANK
(  129) MPE_MYRANK=MPL_MYRANK()
(  130) END FUNCTION MPE_MYRANK
(  131) # 132 "cmpl_binding.F90"
(  132) SUBROUTINE MPEI_ABORT(CDMESS)
(  133) USE MPL_MODULE
(  134) IMPLICIT NONE
(  135) CHARACTER(LEN=*) CDMESS
(  136) CALL MPL_ABORT()
(  137) END SUBROUTINE MPEI_ABORT
