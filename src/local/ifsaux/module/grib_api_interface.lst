


NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: grib_api_interface.F90

(    1) MODULE GRIB_API_INTERFACE
(    2) 
(    3) !define GRIB_API_TRACE
(    4) 
(    5) !**** Interface to GRIB_API
(    6) 
(    7) !     Purpose.
(    8) !     --------
(    9) !     Fortran 90 Interface to calling GRIB API
(   10) 
(   11) !     Author.
(   12) !     -------
(   13) !        M.Hamrud     ECMWF
(   14) 
(   15) !     Modifications.
(   16) !     --------------
(   17) !        Original: 2005-11-15
(   18) !      F. Vana  05-Mar-2015  Support for single precision
(   19) 
(   20) !     ------------------------------------------------------------------
(   21) 
(   22) USE PARKIND1 , ONLY : JPRD, JPIM, JPIB, JPRB, JPRM
(   23) USE YOMHOOK  , ONLY : LHOOK, DR_HOOK
(   24) USE GRIB_API
(   25) USE MPL_MODULE, ONLY : MPL_ABORT
(   26) IMPLICIT NONE
(   27) 
(   28) INTERFACE IGRIB_GET_VALUE
(   29) MODULE PROCEDURE &
(   30)  & IGRIB_GET_INT, IGRIB_GET_REAL4, IGRIB_GET_REAL8,IGRIB_GET_CHAR,&
(   31)  & IGRIB_GET_INT_ARRAY, IGRIB_GET_REAL4_ARRAY, IGRIB_GET_REAL8_ARRAY, &
(   32)  & IGRIB_GET_INT8
(   33) END INTERFACE






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 2

(   34) INTERFACE IGRIB_SET_VALUE
(   35) MODULE PROCEDURE &
(   36)  & IGRIB_SET_INT, IGRIB_SET_REAL4, IGRIB_SET_REAL8,IGRIB_SET_CHAR,&
(   37)  & IGRIB_SET_INT_ARRAY, IGRIB_SET_REAL4_ARRAY, IGRIB_SET_REAL8_ARRAY, &
(   38)  & IGRIB_SET_INT8, IGRIB_SET_INT8_ARRAY
(   39) END INTERFACE
(   40) INTERFACE IGRIB_READ_BYTES
(   41) MODULE PROCEDURE &
(   42)  & IGRIB_READ_BYTES_INT, IGRIB_READ_BYTES_REAL4, IGRIB_READ_BYTES_REAL8, IGRIB_READ_BYTES_CHAR
(   43) END INTERFACE
(   44) INTERFACE IGRIB_WRITE_BYTES
(   45) MODULE PROCEDURE &
(   46)  & IGRIB_WRITE_BYTES_INT, IGRIB_WRITE_BYTES_REAL4, IGRIB_WRITE_BYTES_REAL8, IGRIB_WRITE_BYTES_CHAR
(   47) END INTERFACE
(   48) 
(   49) PUBLIC IGRIB_GET_VALUE, IGRIB_SET_VALUE, IGRIB_OPEN_FILE, IGRIB_CLOSE_FILE,&
(   50)  & IGRIB_RELEASE, JPGRIB_SUCCESS, JPGRIB_END_OF_FILE, JPGRIB_BUFFER_TOO_SMALL, &
(   51)  & IGRIB_GET_MESSAGE_SIZE, IGRIB_NEW_FROM_MESSAGE, IGRIB_NEW_FROM_FILE, &
(   52)  & IGRIB_NEW_FROM_SAMPLES, IGRIB_CLONE ,IGRIB_GET_MESSAGE, IGRIB_READ_FROM_FILE, &
(   53)  & IGRIB_READ_BYTES, IGRIB_WRITE_BYTES, IGRIB_IS_DEFINED
(   54) 
(   55) INTEGER, PARAMETER :: JPGRIB_SUCCESS=GRIB_SUCCESS
(   56) INTEGER, PARAMETER :: JPGRIB_END_OF_FILE=GRIB_END_OF_FILE
(   57) INTEGER, PARAMETER :: JPGRIB_BUFFER_TOO_SMALL=GRIB_BUFFER_TOO_SMALL
(   58) 
(   59) PRIVATE
(   60) #ifdef GRIB_API_1
(   61) INTEGER, PARAMETER, PUBLIC :: JPKSIZE_T=JPIM
(   62) #else
(   63) INTEGER, PARAMETER, PUBLIC :: JPKSIZE_T=KINDOFSIZE_T
(   64) #endif
(   65) 
(   66) LOGICAL, PUBLIC :: LGRIB_API_TRACE = .FALSE.
(   67) 
(   68) CONTAINS
(   69) 
(   70) SUBROUTINE IGRIB_GET_INT8(KHANDLE,CDKEY,KVAL,KRET)
(   71) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(   72) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(   73) INTEGER(KIND=JPIB),INTENT(OUT) :: KVAL
(   74) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(   75) 
(   76) INTEGER(KIND=JPIM) :: IRET
(   77) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   78) 
(   79) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT8',0,ZHOOK_HANDLE)
(   80) CALL GRIB_GET_LONG(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(   81) IF(PRESENT(KRET)) THEN
(   82)   KRET = IRET
(   83) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(   84)   WRITE(0,*) 'GRIB_GET_LONG',KHANDLE,' ',CDKEY,' FAILED',IRET
(   85)   CALL ERR_MSG(IRET)
(   86)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(   87) ENDIF
(   88) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT8',1,ZHOOK_HANDLE)
(   89) 
(   90) END SUBROUTINE IGRIB_GET_INT8
(   91) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 3

(   92) SUBROUTINE IGRIB_GET_INT(KHANDLE,CDKEY,KVAL,KRET)
(   93) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(   94) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(   95) INTEGER(KIND=JPIM),INTENT(OUT) :: KVAL
(   96) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(   97) 
(   98) INTEGER(KIND=JPIM) :: IRET
(   99) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  100) 
(  101) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT',0,ZHOOK_HANDLE)
(  102) CALL GRIB_GET_INT(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  103) IF(PRESENT(KRET)) THEN
(  104)   KRET = IRET
(  105) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  106)   WRITE(0,*) 'GRIB_GET_INT',KHANDLE,' ',CDKEY,' FAILED',IRET
(  107)   CALL ERR_MSG(IRET)
(  108)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  109) ENDIF
(  110) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT',1,ZHOOK_HANDLE)
(  111) 
(  112) END SUBROUTINE IGRIB_GET_INT
(  113) 
(  114) SUBROUTINE IGRIB_GET_REAL4(KHANDLE,CDKEY,PVAL,KRET)
(  115) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  116) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  117) REAL(KIND=JPRM)   ,INTENT(OUT) :: PVAL
(  118) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  119) 
(  120) INTEGER(KIND=JPIM) :: IRET
(  121) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  122) 
(  123) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4',0,ZHOOK_HANDLE)
(  124) CALL GRIB_GET_REAL4(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  125) IF(PRESENT(KRET)) THEN
(  126)   KRET = IRET
(  127) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  128)   WRITE(0,*) 'GRIB_GET_REAL4',KHANDLE,' ',CDKEY,' FAILED',IRET
(  129)   CALL ERR_MSG(IRET)
(  130)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  131) ENDIF
(  132) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4',1,ZHOOK_HANDLE)
(  133) 
(  134) END SUBROUTINE IGRIB_GET_REAL4
(  135) 
(  136) SUBROUTINE IGRIB_GET_REAL8(KHANDLE,CDKEY,PVAL,KRET)
(  137) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  138) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  139) REAL(KIND=JPRD)   ,INTENT(OUT) :: PVAL
(  140) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  141) 
(  142) INTEGER(KIND=JPIM) :: IRET
(  143) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  144) 
(  145) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8',0,ZHOOK_HANDLE)
(  146) CALL GRIB_GET_REAL8(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  147) IF(PRESENT(KRET)) THEN
(  148)   KRET = IRET
(  149) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 4

(  150)   WRITE(0,*) 'GRIB_GET_REAL8',KHANDLE,' ',CDKEY,' FAILED',IRET
(  151)   CALL ERR_MSG(IRET)
(  152)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  153) ENDIF
(  154) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8',1,ZHOOK_HANDLE)
(  155) 
(  156) END SUBROUTINE IGRIB_GET_REAL8
(  157) 
(  158) SUBROUTINE IGRIB_GET_CHAR(KHANDLE,CDKEY,CDVAL,KRET)
(  159) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  160) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  161) CHARACTER(LEN=*)  ,INTENT(OUT) :: CDVAL
(  162) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  163) INTEGER(KIND=JPIM) :: IRET
(  164) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  165) 
(  166) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_CHAR',0,ZHOOK_HANDLE)
(  167) CALL GRIB_GET_STRING(KHANDLE,CDKEY,CDVAL,STATUS=IRET)
(  168) IF(PRESENT(KRET)) THEN
(  169)   KRET = IRET
(  170) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  171)   WRITE(0,*) 'GRIB_GET_STRING',KHANDLE,' ',CDKEY,' FAILED',IRET
(  172)   CALL ERR_MSG(IRET)
(  173)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  174) ENDIF
(  175) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_CHAR',1,ZHOOK_HANDLE)
(  176) 
(  177) END SUBROUTINE IGRIB_GET_CHAR
(  178) 
(  179) SUBROUTINE IGRIB_GET_INT_ARRAY(KHANDLE,CDKEY,KVAL,KRET)
(  180) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  181) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  182) INTEGER(KIND=JPIM),INTENT(OUT) :: KVAL(:)
(  183) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  184) 
(  185) INTEGER(KIND=JPIM) :: IRET,ISIZE
(  186) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  187) 
(  188) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT_ARRAY',0,ZHOOK_HANDLE)
(  189) 
(  190) CALL GRIB_GET_INT_ARRAY(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  191) IF(PRESENT(KRET)) THEN
(  192)   KRET = IRET
(  193) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  194)   WRITE(0,*) 'GRIB_GET_INT',KHANDLE,' ',CDKEY,' FAILED',IRET
(  195)   CALL ERR_MSG(IRET)
(  196)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  197) ENDIF
(  198) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT_ARRAY',1,ZHOOK_HANDLE)
(  199) 
(  200) END SUBROUTINE IGRIB_GET_INT_ARRAY
(  201) 
(  202) SUBROUTINE IGRIB_GET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  203) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  204) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  205) REAL(KIND=JPRM)   ,INTENT(OUT) :: PVAL(:)
(  206) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  207) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 5

(  208) INTEGER(KIND=JPIM) :: IRET
(  209) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  210) 
(  211) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  212) 
(  213) CALL GRIB_GET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  214) IF(PRESENT(KRET)) THEN
(  215)   KRET = IRET
(  216) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  217)   WRITE(0,*) 'GRIB_GET_REAL4_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  218)   CALL ERR_MSG(IRET)
(  219)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  220) ENDIF
(  221) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  222) 
(  223) END SUBROUTINE IGRIB_GET_REAL4_ARRAY
(  224) 
(  225) SUBROUTINE IGRIB_GET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  226) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  227) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  228) REAL(KIND=JPRD)   ,INTENT(OUT) :: PVAL(:)
(  229) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  230) 
(  231) INTEGER(KIND=JPIM) :: IRET
(  232) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  233) 
(  234) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  235) 
(  236) CALL GRIB_GET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  237) IF(PRESENT(KRET)) THEN
(  238)   KRET = IRET
(  239) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  240)   WRITE(0,*) 'GRIB_GET_REAL8_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  241)   CALL ERR_MSG(IRET)
(  242)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  243) ENDIF
(  244) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  245) 
(  246) END SUBROUTINE IGRIB_GET_REAL8_ARRAY
(  247) !====================================================================
(  248) SUBROUTINE IGRIB_SET_INT8(KHANDLE,CDKEY,KVAL,KRET)
(  249) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  250) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  251) INTEGER(KIND=JPIB),INTENT(IN) :: KVAL
(  252) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  253) 
(  254) INTEGER(KIND=JPIM) :: IRET
(  255) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  256) 
(  257) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8',0,ZHOOK_HANDLE)
(  258) 
(  259) #ifdef GRIB_API_TRACE
(  260) IF (LGRIB_API_TRACE) WRITE (0, *) 'CALL GRIB_SET_LONG (IGRIBH, ', '"'//TRIM (CDKEY)//'"', ', ', KVAL, ')'
(  261) #endif
(  262) 
(  263) CALL GRIB_SET_LONG(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  264) IF(PRESENT(KRET)) THEN
(  265)   KRET = IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 6

(  266) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  267)   WRITE(0,*) 'GRIB_SET_LONG',KHANDLE,' ',CDKEY,' ',KVAL,' FAILED',IRET
(  268)   CALL ERR_MSG(IRET)
(  269)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  270) ENDIF
(  271) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8',1,ZHOOK_HANDLE)
(  272) 
(  273) END SUBROUTINE IGRIB_SET_INT8
(  274) 
(  275) SUBROUTINE IGRIB_SET_INT(KHANDLE,CDKEY,KVAL,KRET)
(  276) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  277) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  278) INTEGER(KIND=JPIM),INTENT(IN) :: KVAL
(  279) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  280) 
(  281) INTEGER(KIND=JPIM) :: IRET
(  282) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  283) 
(  284) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT',0,ZHOOK_HANDLE)
(  285) 
(  286) #ifdef GRIB_API_TRACE
(  287) IF (LGRIB_API_TRACE) WRITE (0, *) 'CALL GRIB_SET_INT (IGRIBH, ', '"'//TRIM (CDKEY)//'"', ', ', KVAL, ')'
(  288) #endif
(  289) 
(  290) CALL GRIB_SET_INT(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  291) IF(PRESENT(KRET)) THEN
(  292)   KRET = IRET
(  293) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  294)   WRITE(0,*) 'GRIB_SET_INT',KHANDLE,' ',CDKEY,' ',KVAL,' FAILED',IRET
(  295)   CALL ERR_MSG(IRET)
(  296)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  297) ENDIF
(  298) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT',1,ZHOOK_HANDLE)
(  299) 
(  300) END SUBROUTINE IGRIB_SET_INT
(  301) 
(  302) SUBROUTINE IGRIB_SET_REAL4(KHANDLE,CDKEY,PVAL,KRET)
(  303) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  304) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  305) REAL(KIND=JPRM)   ,INTENT(IN) :: PVAL
(  306) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  307) 
(  308) INTEGER(KIND=JPIM) :: IRET
(  309) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  310) 
(  311) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4',0,ZHOOK_HANDLE)
(  312) CALL GRIB_SET_REAL4(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  313) IF(PRESENT(KRET)) THEN
(  314)   KRET = IRET
(  315) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  316)   WRITE(0,*) 'GRIB_SET_REAL4',KHANDLE,' ',CDKEY,' ',PVAL,' FAILED',IRET
(  317)   CALL ERR_MSG(IRET)
(  318)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  319) ENDIF
(  320) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4',1,ZHOOK_HANDLE)
(  321) 
(  322) END SUBROUTINE IGRIB_SET_REAL4
(  323) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 7

(  324) SUBROUTINE IGRIB_SET_REAL8(KHANDLE,CDKEY,PVAL,KRET)
(  325) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  326) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  327) REAL(KIND=JPRD)   ,INTENT(IN) :: PVAL
(  328) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  329) 
(  330) INTEGER(KIND=JPIM) :: IRET
(  331) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  332) 
(  333) #ifdef GRIB_API_TRACE
(  334) IF (LGRIB_API_TRACE) WRITE (0, *) 'CALL GRIB_SET_REAL8 (IGRIBH, ', '"'//TRIM (CDKEY)//'"', ', ', PVAL, ')'
(  335) #endif
(  336) 
(  337) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8',0,ZHOOK_HANDLE)
(  338) CALL GRIB_SET_REAL8(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  339) IF(PRESENT(KRET)) THEN
(  340)   KRET = IRET
(  341) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  342)   WRITE(0,*) 'GRIB_SET_REAL8',KHANDLE,' ',CDKEY,' ',PVAL,' FAILED',IRET
(  343)   CALL ERR_MSG(IRET)
(  344)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  345) ENDIF
(  346) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8',1,ZHOOK_HANDLE)
(  347) 
(  348) END SUBROUTINE IGRIB_SET_REAL8
(  349) 
(  350) SUBROUTINE IGRIB_SET_CHAR(KHANDLE,CDKEY,CDVAL,KRET)
(  351) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  352) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  353) CHARACTER(LEN=*)  ,INTENT(IN) :: CDVAL
(  354) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  355) 
(  356) INTEGER(KIND=JPIM) :: IRET
(  357) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  358) 
(  359) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_CHAR',0,ZHOOK_HANDLE)
(  360) 
(  361) #ifdef GRIB_API_TRACE
(  362) IF (LGRIB_API_TRACE) WRITE (0, *) 'CALL GRIB_SET_STRING (IGRIBH, ', '"'//TRIM (CDKEY)//'"', ', ', '"'//TRIM (CDVAL)//'"', ')
(  363) #endif
(  364) 
(  365) CALL GRIB_SET_STRING(KHANDLE,CDKEY,CDVAL,STATUS=IRET)
(  366) IF(PRESENT(KRET)) THEN
(  367)   KRET = IRET
(  368) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  369)   WRITE(0,*) 'GRIB_SET_STRING',KHANDLE,' ',CDKEY,' ',CDVAL,' FAILED',IRET
(  370)   CALL ERR_MSG(IRET)
(  371)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  372) ENDIF
(  373) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_CHAR',1,ZHOOK_HANDLE)
(  374) 
(  375) END SUBROUTINE IGRIB_SET_CHAR
(  376) 
(  377) SUBROUTINE IGRIB_SET_INT8_ARRAY(KHANDLE,CDKEY,KVAL,KRET)
(  378) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  379) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  380) INTEGER(KIND=JPIB),INTENT(IN) :: KVAL(:)
(  381) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 8

(  382) 
(  383) INTEGER(KIND=JPIM) :: IRET
(  384) INTEGER(KIND=JPIM) :: I
(  385) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  386) 
(  387) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8_ARRAY',0,ZHOOK_HANDLE)
(  388) 
(  389) #ifdef GRIB_API_TRACE
(  390) IF (LGRIB_API_TRACE) &
(  391) & WRITE (0, *) 'CALL GRIB_SET_LONG_ARRAY (IGRIBH, ', '"'//TRIM (CDKEY)//'"', &
(  392) & ', (/ ', KVAL (1), ((', ', KVAL (I)), I = 2, SIZE (KVAL)), ' /))'
(  393) #endif
(  394) 
(  395) CALL GRIB_SET_LONG_ARRAY(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  396) IF(PRESENT(KRET)) THEN
(  397)   KRET = IRET
(  398) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  399)   WRITE(0,*) 'GRIB_SET_LONG_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  400)   CALL ERR_MSG(IRET)
(  401)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  402) ENDIF
(  403) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8_ARRAY',1,ZHOOK_HANDLE)
(  404) 
(  405) END SUBROUTINE IGRIB_SET_INT8_ARRAY
(  406) 
(  407) SUBROUTINE IGRIB_SET_INT_ARRAY(KHANDLE,CDKEY,KVAL,KRET)
(  408) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  409) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  410) INTEGER(KIND=JPIM),INTENT(IN) :: KVAL(:)
(  411) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  412) 
(  413) INTEGER(KIND=JPIM) :: IRET
(  414) INTEGER(KIND=JPIM) :: I
(  415) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  416) 
(  417) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT_ARRAY',0,ZHOOK_HANDLE)
(  418) 
(  419) #ifdef GRIB_API_TRACE
(  420) IF (LGRIB_API_TRACE) &
(  421) & WRITE (0, *) 'CALL GRIB_SET_INT_ARRAY (IGRIBH, ', '"'//TRIM (CDKEY)//'"', &
(  422) & ', (/ ', KVAL (1), ((', ', KVAL (I)), I = 2, SIZE (KVAL)), ' /))'
(  423) #endif
(  424) 
(  425) CALL GRIB_SET_INT_ARRAY(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  426) IF(PRESENT(KRET)) THEN
(  427)   KRET = IRET
(  428) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  429)   WRITE(0,*) 'GRIB_SET_INT_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  430)   CALL ERR_MSG(IRET)
(  431)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  432) ENDIF
(  433) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT_ARRAY',1,ZHOOK_HANDLE)
(  434) 
(  435) END SUBROUTINE IGRIB_SET_INT_ARRAY
(  436) 
(  437) SUBROUTINE IGRIB_SET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  438) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  439) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 9

(  440) REAL(KIND=JPRM)   ,INTENT(IN) :: PVAL(:)
(  441) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  442) 
(  443) INTEGER(KIND=JPIM) :: IRET
(  444) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  445) 
(  446) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  447) CALL GRIB_SET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  448) IF(PRESENT(KRET)) THEN
(  449)   KRET = IRET
(  450) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  451)   WRITE(0,*) 'GRIB_SET_REAL4_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  452)   CALL ERR_MSG(IRET)
(  453)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  454) ENDIF
(  455) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  456) 
(  457) END SUBROUTINE IGRIB_SET_REAL4_ARRAY
(  458) 
(  459) SUBROUTINE IGRIB_SET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  460) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  461) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  462) REAL(KIND=JPRD)   ,INTENT(IN) :: PVAL(:)
(  463) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  464) 
(  465) INTEGER(KIND=JPIM) :: IRET
(  466) INTEGER(KIND=JPIM) :: I
(  467) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  468) 
(  469) #ifdef GRIB_API_TRACE
(  470) IF (LGRIB_API_TRACE) &
(  471) & WRITE (0, *) 'CALL GRIB_SET_REAL8_ARRAY (IGRIBH, ', '"'//TRIM (CDKEY)//'"', &
(  472) & ', (/ ', PVAL (1), ((', ', PVAL (I)), I = 2, SIZE (PVAL)), '/))'
(  473) #endif
(  474) 
(  475) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  476) CALL GRIB_SET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  477) IF(PRESENT(KRET)) THEN
(  478)   KRET = IRET
(  479) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  480)   WRITE(0,*) 'GRIB_SET_REAL8_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  481)   CALL ERR_MSG(IRET)
(  482)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  483) ENDIF
(  484) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  485) 
(  486) END SUBROUTINE IGRIB_SET_REAL8_ARRAY
(  487) 
(  488) SUBROUTINE IGRIB_OPEN_FILE(KFILE,CDPATH,CDMODE)
(  489) INTEGER(KIND=JPIM),INTENT(OUT)  :: KFILE
(  490) CHARACTER(LEN=*)  ,INTENT(IN)   :: CDPATH
(  491) CHARACTER(LEN=1)  ,INTENT(IN)   :: CDMODE
(  492) 
(  493) INTEGER(KIND=JPIM) :: IRET
(  494) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  495) 
(  496) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_OPEN_FILE',0,ZHOOK_HANDLE)
(  497) CALL GRIB_OPEN_FILE(KFILE,CDPATH,CDMODE,STATUS=IRET)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 10

(  498) IF(IRET /= JPGRIB_SUCCESS) THEN
(  499)   WRITE(0,*) 'GRIB_OPEN_FILE ',TRIM(CDPATH),' FAILED',IRET
(  500)   CALL ERR_MSG(IRET)
(  501)   CALL MPL_ABORT('GRIB_OPEN_FILE FAILED')
(  502) ENDIF
(  503) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_OPEN_FILE',1,ZHOOK_HANDLE)
(  504) 
(  505) END SUBROUTINE IGRIB_OPEN_FILE
(  506) 
(  507) SUBROUTINE IGRIB_CLOSE_FILE(KFILE)
(  508) INTEGER(KIND=JPIM),INTENT(IN)  :: KFILE
(  509) 
(  510) INTEGER(KIND=JPIM) :: IRET
(  511) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  512) 
(  513) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLOSE_FILE',0,ZHOOK_HANDLE)
(  514) CALL GRIB_CLOSE_FILE(KFILE,STATUS=IRET)
(  515) IF(IRET /= JPGRIB_SUCCESS) THEN
(  516)   WRITE(0,*) 'GRIB_CLOSE_FILE ',KFILE,' FAILED',IRET
(  517)   CALL ERR_MSG(IRET)
(  518)   CALL MPL_ABORT('GRIB_CLOSE_FILE FAILED')
(  519) ENDIF
(  520) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLOSE_FILE',1,ZHOOK_HANDLE)
(  521) 
(  522) END SUBROUTINE IGRIB_CLOSE_FILE
(  523) 
(  524) SUBROUTINE IGRIB_READ_FROM_FILE(KFILE,KBUF,KBYTES,KRET)
(  525) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  526) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  527) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  528) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  529) INTEGER(KIND=JPIM) :: IRET,ILEN
(  530) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  531) 
(  532) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_FROM_FILE',0,ZHOOK_HANDLE)
(  533) 
(  534) CALL GRIB_READ_FROM_FILE(KFILE,KBUF,KBYTES,IRET)
(  535) IF(PRESENT(KRET)) THEN
(  536)   KRET = IRET
(  537) ELSEIF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  538)   WRITE(0,*) 'GRIB_READ_FROM_FILE ',KFILE,' FAILED',IRET
(  539)   CALL ERR_MSG(IRET)
(  540)   CALL MPL_ABORT('GRIB_READ_FROM_FILE FAILED')
(  541) ENDIF
(  542) 
(  543) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_FROM_FILE',1,ZHOOK_HANDLE)
(  544) 
(  545) END SUBROUTINE IGRIB_READ_FROM_FILE
(  546) 
(  547) SUBROUTINE IGRIB_READ_BYTES_INT(KFILE,KBUF,KBYTES,KRET)
(  548) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  549) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  550) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  551) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  552) INTEGER(KIND=JPIM) :: IRET,ILEN
(  553) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  554) 
(  555) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_INT',0,ZHOOK_HANDLE)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 11

(  556) CALL GRIB_READ_BYTES(KFILE,KBUF,KBYTES,IRET)
(  557) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  558)   WRITE(0,*) 'GRIB_READ_BYTES_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  559)   CALL ERR_MSG(IRET)
(  560)   CALL MPL_ABORT('GRIB_READ_BYTES_INT FAILED')
(  561) ENDIF
(  562) KRET = IRET
(  563) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_INT',1,ZHOOK_HANDLE)
(  564) 
(  565) END SUBROUTINE IGRIB_READ_BYTES_INT
(  566) 
(  567) SUBROUTINE IGRIB_READ_BYTES_REAL4(KFILE,PBUF,KBYTES,KRET)
(  568) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  569) REAL(KIND=JPRM)   ,INTENT(OUT)   :: PBUF(:)
(  570) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  571) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  572) INTEGER(KIND=JPIM) :: IRET,ILEN
(  573) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  574) 
(  575) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL4',0,ZHOOK_HANDLE)
(  576) 
(  577) CALL GRIB_READ_BYTES(KFILE,PBUF,KBYTES,IRET)
(  578) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  579)   WRITE(0,*) 'GRIB_READ_BYTES_INT ',KFILE,' FAILED',IRET
(  580)   CALL ERR_MSG(IRET)
(  581)   CALL MPL_ABORT('GRIB_READ_BYTES_REAL4 FAILED')
(  582) ENDIF
(  583) KRET = IRET
(  584) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL4',1,ZHOOK_HANDLE)
(  585) END SUBROUTINE IGRIB_READ_BYTES_REAL4
(  586) 
(  587) SUBROUTINE IGRIB_READ_BYTES_REAL8(KFILE,PBUF,KBYTES,KRET)
(  588) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  589) REAL(KIND=JPRD)   ,INTENT(OUT)   :: PBUF(:)
(  590) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  591) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  592) INTEGER(KIND=JPIM) :: IRET,ILEN
(  593) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  594) 
(  595) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL8',0,ZHOOK_HANDLE)
(  596) 
(  597) CALL GRIB_READ_BYTES(KFILE,PBUF,KBYTES,IRET)
(  598) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  599)   WRITE(0,*) 'GRIB_READ_BYTES_REAL8 ',KFILE,' FAILED',IRET
(  600)   CALL ERR_MSG(IRET)
(  601)   CALL MPL_ABORT('GRIB_READ_BYTES_REAL8 FAILED')
(  602) ENDIF
(  603) KRET = IRET
(  604) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL8',1,ZHOOK_HANDLE)
(  605) END SUBROUTINE IGRIB_READ_BYTES_REAL8
(  606) 
(  607) SUBROUTINE IGRIB_READ_BYTES_CHAR(KFILE,CDBUF,KBYTES,KRET)
(  608) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  609) CHARACTER(LEN=1)  ,INTENT(OUT)   :: CDBUF(:)
(  610) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  611) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  612) INTEGER(KIND=JPIM) :: IRET,ILEN
(  613) REAL(KIND=JPRB) :: ZHOOK_HANDLE






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 12

(  614) 
(  615) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_CHAR',0,ZHOOK_HANDLE)
(  616) 
(  617) CALL GRIB_READ_BYTES(KFILE,CDBUF,KBYTES,IRET)
(  618) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  619)   WRITE(0,*) 'GRIB_READ_BYTES_CHAR ',KFILE,' FAILED',IRET
(  620)   CALL ERR_MSG(IRET)
(  621)   CALL MPL_ABORT('GRIB_READ_BYTES_CHAR FAILED')
(  622) ENDIF
(  623) KRET = IRET
(  624) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_CHAR',1,ZHOOK_HANDLE)
(  625) 
(  626) END SUBROUTINE IGRIB_READ_BYTES_CHAR
(  627) 
(  628) 
(  629) SUBROUTINE IGRIB_WRITE_BYTES_INT(KFILE,KBUF,KBYTES)
(  630) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  631) INTEGER(KIND=JPIM),INTENT(IN)    :: KBUF(:)
(  632) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  633) INTEGER(KIND=JPIM) :: IRET,ILEN
(  634) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  635) 
(  636) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_INT',0,ZHOOK_HANDLE)
(  637) 
(  638) CALL GRIB_WRITE_BYTES(KFILE,KBUF,KBYTES,IRET)
(  639) IF(IRET /= JPGRIB_SUCCESS ) THEN
(  640)   WRITE(0,*) 'GRIB_WRITE_BYTES_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  641)   CALL ERR_MSG(IRET)
(  642)   CALL MPL_ABORT('GRIB_WRITE_BYTES_INT FAILED')
(  643) ENDIF
(  644) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_INT',1,ZHOOK_HANDLE)
(  645) 
(  646) END SUBROUTINE IGRIB_WRITE_BYTES_INT
(  647) 
(  648) SUBROUTINE IGRIB_WRITE_BYTES_REAL4(KFILE,PBUF,KBYTES)
(  649) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  650) REAL(KIND=JPRM)   ,INTENT(IN)    :: PBUF(:)
(  651) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  652) INTEGER(KIND=JPIM) :: IRET,ILEN
(  653) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  654) 
(  655) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL4',0,ZHOOK_HANDLE)
(  656) 
(  657) CALL GRIB_WRITE_BYTES(KFILE,PBUF,KBYTES,IRET)
(  658) IF(IRET /= JPGRIB_SUCCESS ) THEN
(  659)   WRITE(0,*) 'GRIB_WRITE_BYTES_INT ',KFILE,' FAILED',IRET
(  660)   CALL ERR_MSG(IRET)
(  661)   CALL MPL_ABORT('GRIB_WRITE_BYTES_REAL4 FAILED')
(  662) ENDIF
(  663) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL4',1,ZHOOK_HANDLE)
(  664) 
(  665) END SUBROUTINE IGRIB_WRITE_BYTES_REAL4
(  666) 
(  667) SUBROUTINE IGRIB_WRITE_BYTES_REAL8(KFILE,PBUF,KBYTES)
(  668) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  669) REAL(KIND=JPRD)   ,INTENT(IN)    :: PBUF(:)
(  670) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  671) INTEGER(KIND=JPIM) :: IRET,ILEN






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 13

(  672) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  673) 
(  674) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL8',0,ZHOOK_HANDLE)
(  675) 
(  676) CALL GRIB_WRITE_BYTES(KFILE,PBUF,KBYTES,IRET)
(  677) IF(IRET /= JPGRIB_SUCCESS ) THEN
(  678)   WRITE(0,*) 'GRIB_WRITE_BYTES_INT ',KFILE,' FAILED',IRET
(  679)   CALL ERR_MSG(IRET)
(  680)   CALL MPL_ABORT('GRIB_WRITE_BYTES_REAL8 FAILED')
(  681) ENDIF
(  682) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL8',1,ZHOOK_HANDLE)
(  683) 
(  684) END SUBROUTINE IGRIB_WRITE_BYTES_REAL8
(  685) 
(  686) SUBROUTINE IGRIB_WRITE_BYTES_CHAR(KFILE,CDBUF,KBYTES)
(  687) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  688) CHARACTER(LEN=1)  ,INTENT(IN)    :: CDBUF(:)
(  689) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  690) INTEGER(KIND=JPIM) :: IRET
(  691) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  692) 
(  693) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_CHAR',0,ZHOOK_HANDLE)
(  694) 
(  695) CALL GRIB_WRITE_BYTES(KFILE,CDBUF,KBYTES,IRET)
(  696) IF(IRET /= JPGRIB_SUCCESS) THEN
(  697)   WRITE(0,*) 'GRIB_WRITE_BYTES_CHAR ',KFILE,' FAILED',IRET
(  698)   CALL ERR_MSG(IRET)
(  699)   CALL MPL_ABORT('GRIB_WRITE_BYTES_CHAR FAILED')
(  700) ENDIF
(  701) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_CHAR',1,ZHOOK_HANDLE)
(  702) 
(  703) END SUBROUTINE IGRIB_WRITE_BYTES_CHAR
(  704) 
(  705) SUBROUTINE IGRIB_NEW_FROM_FILE(KFILE,KHANDLE,KRET)
(  706) INTEGER(KIND=JPIM),INTENT(IN)  :: KFILE
(  707) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE
(  708) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  709) 
(  710) INTEGER(KIND=JPIM) :: IRET
(  711) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  712) 
(  713) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_FILE',0,ZHOOK_HANDLE)
(  714) 
(  715) CALL GRIB_NEW_FROM_FILE(KFILE,KHANDLE,STATUS=IRET)
(  716) 
(  717) IF(PRESENT(KRET)) THEN
(  718)   KRET = IRET
(  719) ELSEIF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  720)   WRITE(0,*) 'GRIB_NEW_FROM_FILE ',KFILE,' FAILED',IRET
(  721)   CALL ERR_MSG(IRET)
(  722)   CALL MPL_ABORT('GRIB_NEW_FROM_FILE FAILED')
(  723) ENDIF
(  724) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_FILE',1,ZHOOK_HANDLE)
(  725) 
(  726) END SUBROUTINE IGRIB_NEW_FROM_FILE
(  727) 
(  728) SUBROUTINE IGRIB_NEW_FROM_MESSAGE(KHANDLE,KBUF)
(  729) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 14

(  730) INTEGER(KIND=JPIM),INTENT(IN)  :: KBUF(:)
(  731) 
(  732) INTEGER(KIND=JPIM) :: IRET
(  733) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  734) 
(  735) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_MESSAGE',0,ZHOOK_HANDLE)
(  736) 
(  737) CALL GRIB_NEW_FROM_MESSAGE(KHANDLE,KBUF,STATUS=IRET)
(  738) 
(  739) IF(IRET /= JPGRIB_SUCCESS) THEN
(  740)   WRITE(0,*) 'CALL TO GRIB_NEW_FROM_MESSAGE FAILED',IRET
(  741)   CALL ERR_MSG(IRET)
(  742)   CALL MPL_ABORT('IGRIB_NEW_FROM_MESSAGE FAILED')
(  743) ENDIF
(  744) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_MESSAGE',1,ZHOOK_HANDLE)
(  745) 
(  746) END SUBROUTINE IGRIB_NEW_FROM_MESSAGE
(  747) 
(  748) SUBROUTINE IGRIB_RELEASE(KHANDLE)
(  749) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  750) 
(  751) INTEGER(KIND=JPIM) :: IRET
(  752) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  753) 
(  754) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_RELEASE',0,ZHOOK_HANDLE)
(  755) 
(  756) CALL GRIB_RELEASE(KHANDLE,STATUS=IRET)
(  757) IF(IRET /= JPGRIB_SUCCESS) THEN
(  758)   WRITE(0,*) 'GRIB_RELEASE ',KHANDLE,' FAILED',IRET
(  759)   CALL ERR_MSG(IRET)
(  760)   CALL MPL_ABORT('GRIB_RELEASE FAILED')
(  761) ENDIF
(  762) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_RELEASE',1,ZHOOK_HANDLE)
(  763) 
(  764) END SUBROUTINE IGRIB_RELEASE
(  765) 
(  766) SUBROUTINE IGRIB_GET_MESSAGE_SIZE(KHANDLE,KBYTES)
(  767) INTEGER(KIND=JPIM),INTENT(IN)  :: KHANDLE
(  768) INTEGER(KIND=JPKSIZE_T),INTENT(OUT) :: KBYTES
(  769) INTEGER(KIND=JPIM) :: IRET
(  770) INTEGER(KIND=KINDOFSIZE_T) :: IBYTES
(  771) REAL(KIND=JPRB)    :: ZHOOK_HANDLE
(  772) 
(  773) 
(  774) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE_SIZE',0,ZHOOK_HANDLE)
(  775) CALL GRIB_GET_MESSAGE_SIZE(KHANDLE,IBYTES,STATUS=IRET)
(  776) KBYTES = IBYTES
(  777) IF(IRET /= JPGRIB_SUCCESS) THEN
(  778)   WRITE(0,*) 'GRIB_GET_MESSAGE_SIZE ',KHANDLE,' FAILED',IRET
(  779)   CALL ERR_MSG(IRET)
(  780)   CALL MPL_ABORT(' GRIB_GET_MESSAGE_SIZE FAIL')
(  781) ENDIF
(  782) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE_SIZE',1,ZHOOK_HANDLE)
(  783) 
(  784) END SUBROUTINE IGRIB_GET_MESSAGE_SIZE
(  785) 
(  786) SUBROUTINE IGRIB_GET_MESSAGE(KHANDLE,KGRIB)
(  787) INTEGER(KIND=JPIM),INTENT(IN)  :: KHANDLE






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 15

(  788) INTEGER(KIND=JPIM),INTENT(OUT) :: KGRIB(:)
(  789) 
(  790) INTEGER(KIND=JPIM) :: IRET
(  791) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  792) CHARACTER(LEN=1),ALLOCATABLE   :: CLS(:)
(  793) INTEGER(KIND=JPIM) :: ILENINT
(  794) INTEGER(KIND=JPKSIZE_T) :: ILEN
(  795) 
(  796) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE',0,ZHOOK_HANDLE)
(  797) 
(  798) !TEMP CODING
(  799) CALL IGRIB_GET_MESSAGE_SIZE(KHANDLE,ILEN)
(  800) ILENINT=(ILEN+3)/4
(  801) ALLOCATE(CLS(ILENINT*4))
(  802) CLS(ILENINT*4-3:ILENINT*4)='    '
(  803) CALL GRIB_COPY_MESSAGE(KHANDLE,CLS,STATUS=IRET)
(  804) KGRIB(1:ILENINT)=TRANSFER(CLS,KGRIB)
(  805) DEALLOCATE(CLS)
(  806) !CALL GRIB_COPY_MESSAGE(KHANDLE,KGRIB,STATUS=IRET)
(  807) IF(IRET /= JPGRIB_SUCCESS) THEN
(  808)   WRITE(0,*) 'GRIB_COPY_MESSAGE ',KHANDLE,' FAILED',IRET
(  809)   CALL ERR_MSG(IRET)
(  810)   CALL MPL_ABORT(' GRIB_COPY_MESSAGE FAILED')
(  811) ENDIF
(  812) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE',1,ZHOOK_HANDLE)
(  813) 
(  814) END SUBROUTINE IGRIB_GET_MESSAGE
(  815) 
(  816) SUBROUTINE IGRIB_NEW_FROM_SAMPLES(KHANDLE,CDNAME,KRET)
(  817) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE
(  818) CHARACTER(LEN=*),INTENT(IN) :: CDNAME
(  819) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  820) 
(  821) INTEGER(KIND=JPIM) :: IRET
(  822) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  823) 
(  824) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_SAMPLES',0,ZHOOK_HANDLE)
(  825) CALL GRIB_NEW_FROM_SAMPLES(KHANDLE,TRIM(CDNAME),STATUS=IRET)
(  826) IF (PRESENT (KRET)) THEN
(  827)   KRET = IRET
(  828) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  829)   WRITE(0,*) 'GRIB_NEW_FROM_SAMPLES ',TRIM(CDNAME),' FAILED',IRET
(  830)   CALL ERR_MSG(IRET)
(  831)   CALL MPL_ABORT(' GRIB_NEW_FROM_SAMPLES FAILED')
(  832) ENDIF
(  833) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_SAMPLES',1,ZHOOK_HANDLE)
(  834) 
(  835) END SUBROUTINE IGRIB_NEW_FROM_SAMPLES
(  836) 
(  837) SUBROUTINE IGRIB_CLONE(KHANDLE1,KHANDLE2)
(  838) INTEGER(KIND=JPIM),INTENT(IN)  :: KHANDLE1
(  839) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE2
(  840) 
(  841) INTEGER(KIND=JPIM) :: IRET
(  842) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  843) 
(  844) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLONE',0,ZHOOK_HANDLE)
(  845) CALL GRIB_CLONE(KHANDLE1,KHANDLE2,STATUS=IRET)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 16

(  846) 
(  847) IF(IRET /= JPGRIB_SUCCESS) THEN
(  848)   WRITE(0,*) 'GRIB_CLONE FAILED',IRET
(  849)   CALL ERR_MSG(IRET)
(  850)   CALL MPL_ABORT(' GRIB_CLONE FAILED')
(  851) ENDIF
(  852) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLONE',1,ZHOOK_HANDLE)
(  853) 
(  854) END SUBROUTINE IGRIB_CLONE
(  855) 
(  856) SUBROUTINE ERR_MSG(KRET)
(  857) INTEGER(KIND=JPIM),INTENT(IN) :: KRET
(  858) INTEGER(KIND=JPIM) :: IRET
(  859) CHARACTER(LEN=256) :: CLERRMSG
(  860) 
(  861) CLERRMSG = ''
(  862) CALL GRIB_GET_ERROR_STRING(KRET,CLERRMSG,STATUS=IRET)
(  863) WRITE(0,*) 'GRIB_API ERROR MSG: ',TRIM(CLERRMSG)
(  864) END SUBROUTINE ERR_MSG
(  865) 
(  866) 
(  867) SUBROUTINE IGRIB_IS_DEFINED(KHANDLE, CDKEY, LDDEFINED, KRET)
(  868) INTEGER(KIND=JPIM),           INTENT(IN)  :: KHANDLE
(  869) CHARACTER(LEN=*),             INTENT(IN)  :: CDKEY
(  870) LOGICAL,                      INTENT(OUT) :: LDDEFINED
(  871) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: KRET
(  872) 
(  873) INTEGER(KIND=JPIM) :: IS_DEFINED, IRET
(  874) 
(  875) IS_DEFINED = 0
(  876) #define FAGRIB2
(  877) #ifdef FAGRIB2
(  878) CALL GRIB_IS_DEFINED (KHANDLE, CDKEY, IS_DEFINED, IRET)
(  879) #else
(  880) CALL MPL_ABORT('GRIB_IS_DEFINED FAILED')
(  881) #endif
(  882) 
(  883) IF (PRESENT (KRET)) THEN
(  884)   KRET = IRET
(  885) ELSEIF (IRET /= JPGRIB_SUCCESS) THEN
(  886)   WRITE(0,*) 'GRIB_IS_DEFINED',KHANDLE,' ',CDKEY,' FAILED',IRET
(  887)   CALL ERR_MSG(IRET)
(  888)   CALL MPL_ABORT('GRIB_IS_DEFINED FAILED')
(  889) ENDIF
(  890) 
(  891) LDDEFINED = IS_DEFINED /= 0
(  892) 
(  893) END SUBROUTINE IGRIB_IS_DEFINED
(  894) 
(  895) 
(  896) END MODULE GRIB_API_INTERFACE
(  897) 












NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 17

(    1) # 1 "grib_api_interface.F90"
(    1) MODULE GRIB_API_INTERFACE
(    2) # 3 "grib_api_interface.F90"
(    3) !define GRIB_API_TRACE
(    4) # 5 "grib_api_interface.F90"
(    5) !**** Interface to GRIB_API
(    6) # 7 "grib_api_interface.F90"
(    7) !     Purpose.
(    8) !     --------
(    9) !     Fortran 90 Interface to calling GRIB API
(   10) # 11 "grib_api_interface.F90"
(   11) !     Author.
(   12) !     -------
(   13) !        M.Hamrud     ECMWF
(   14) # 15 "grib_api_interface.F90"
(   15) !     Modifications.
(   16) !     --------------
(   17) !        Original: 2005-11-15
(   18) !      F. Vana  05-Mar-2015  Support for single precision
(   19) # 20 "grib_api_interface.F90"
(   20) !     ------------------------------------------------------------------
(   21) # 22 "grib_api_interface.F90"
(   22) USE PARKIND1 , ONLY : JPRD, JPIM, JPIB, JPRB, JPRM
(   23) USE YOMHOOK  , ONLY : LHOOK, DR_HOOK
(   24) USE GRIB_API
(   25) USE MPL_MODULE, ONLY : MPL_ABORT
(   26) IMPLICIT NONE
(   27) # 28 "grib_api_interface.F90"
(   28) INTERFACE IGRIB_GET_VALUE
(   29) MODULE PROCEDURE &
(   30)  & IGRIB_GET_INT, IGRIB_GET_REAL4, IGRIB_GET_REAL8,IGRIB_GET_CHAR,&
(   31)  & IGRIB_GET_INT_ARRAY, IGRIB_GET_REAL4_ARRAY, IGRIB_GET_REAL8_ARRAY, &
(   32)  & IGRIB_GET_INT8
(   33) END INTERFACE
(   34) INTERFACE IGRIB_SET_VALUE
(   35) MODULE PROCEDURE &
(   36)  & IGRIB_SET_INT, IGRIB_SET_REAL4, IGRIB_SET_REAL8,IGRIB_SET_CHAR,&
(   37)  & IGRIB_SET_INT_ARRAY, IGRIB_SET_REAL4_ARRAY, IGRIB_SET_REAL8_ARRAY, &
(   38)  & IGRIB_SET_INT8, IGRIB_SET_INT8_ARRAY
(   39) END INTERFACE
(   40) INTERFACE IGRIB_READ_BYTES
(   41) MODULE PROCEDURE &
(   42)  & IGRIB_READ_BYTES_INT, IGRIB_READ_BYTES_REAL4, IGRIB_READ_BYTES_REAL8, IGRIB_READ_BYTES_CHAR
(   43) END INTERFACE
(   44) INTERFACE IGRIB_WRITE_BYTES
(   45) MODULE PROCEDURE &
(   46)  & IGRIB_WRITE_BYTES_INT, IGRIB_WRITE_BYTES_REAL4, IGRIB_WRITE_BYTES_REAL8, IGRIB_WRITE_BYTES_CHAR
(   47) END INTERFACE
(   48) # 49 "grib_api_interface.F90"
(   49) PUBLIC IGRIB_GET_VALUE, IGRIB_SET_VALUE, IGRIB_OPEN_FILE, IGRIB_CLOSE_FILE,&
(   50)  & IGRIB_RELEASE, JPGRIB_SUCCESS, JPGRIB_END_OF_FILE, JPGRIB_BUFFER_TOO_SMALL, &
(   51)  & IGRIB_GET_MESSAGE_SIZE, IGRIB_NEW_FROM_MESSAGE, IGRIB_NEW_FROM_FILE, &
(   52)  & IGRIB_NEW_FROM_SAMPLES, IGRIB_CLONE ,IGRIB_GET_MESSAGE, IGRIB_READ_FROM_FILE, &
(   53)  & IGRIB_READ_BYTES, IGRIB_WRITE_BYTES, IGRIB_IS_DEFINED
(   54) # 55 "grib_api_interface.F90"
(   55) INTEGER, PARAMETER :: JPGRIB_SUCCESS=GRIB_SUCCESS
(   56) INTEGER, PARAMETER :: JPGRIB_END_OF_FILE=GRIB_END_OF_FILE
(   57) INTEGER, PARAMETER :: JPGRIB_BUFFER_TOO_SMALL=GRIB_BUFFER_TOO_SMALL






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 18

(   58) # 59 "grib_api_interface.F90"
(   59) PRIVATE
(   60) # 61 "grib_api_interface.F90"
(   61) INTEGER, PARAMETER, PUBLIC :: JPKSIZE_T=JPIM
(   62) # 66 "grib_api_interface.F90"
(   66) LOGICAL, PUBLIC :: LGRIB_API_TRACE = .FALSE.
(   67) # 68 "grib_api_interface.F90"
(   68) CONTAINS
(   69) # 70 "grib_api_interface.F90"
(   70) SUBROUTINE IGRIB_GET_INT8(KHANDLE,CDKEY,KVAL,KRET)
(   71) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(   72) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(   73) INTEGER(KIND=JPIB),INTENT(OUT) :: KVAL
(   74) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(   75) # 76 "grib_api_interface.F90"
(   76) INTEGER(KIND=JPIM) :: IRET
(   77) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   78) # 79 "grib_api_interface.F90"
(   79) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT8',0,ZHOOK_HANDLE)
(   80) CALL GRIB_GET_LONG(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(   81) IF(PRESENT(KRET)) THEN
(   82)   KRET = IRET
(   83) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(   84)   WRITE(0,*) 'GRIB_GET_LONG',KHANDLE,' ',CDKEY,' FAILED',IRET
(   85)   CALL ERR_MSG(IRET)
(   86)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(   87) ENDIF
(   88) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT8',1,ZHOOK_HANDLE)
(   89) # 90 "grib_api_interface.F90"
(   90) END SUBROUTINE IGRIB_GET_INT8
(   91) # 92 "grib_api_interface.F90"
(   92) SUBROUTINE IGRIB_GET_INT(KHANDLE,CDKEY,KVAL,KRET)
(   93) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(   94) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(   95) INTEGER(KIND=JPIM),INTENT(OUT) :: KVAL
(   96) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(   97) # 98 "grib_api_interface.F90"
(   98) INTEGER(KIND=JPIM) :: IRET
(   99) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  100) # 101 "grib_api_interface.F90"
(  101) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT',0,ZHOOK_HANDLE)
(  102) CALL GRIB_GET_INT(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  103) IF(PRESENT(KRET)) THEN
(  104)   KRET = IRET
(  105) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  106)   WRITE(0,*) 'GRIB_GET_INT',KHANDLE,' ',CDKEY,' FAILED',IRET
(  107)   CALL ERR_MSG(IRET)
(  108)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  109) ENDIF
(  110) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT',1,ZHOOK_HANDLE)
(  111) # 112 "grib_api_interface.F90"
(  112) END SUBROUTINE IGRIB_GET_INT
(  113) # 114 "grib_api_interface.F90"
(  114) SUBROUTINE IGRIB_GET_REAL4(KHANDLE,CDKEY,PVAL,KRET)
(  115) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  116) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  117) REAL(KIND=JPRM)   ,INTENT(OUT) :: PVAL
(  118) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 19

(  119) # 120 "grib_api_interface.F90"
(  120) INTEGER(KIND=JPIM) :: IRET
(  121) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  122) # 123 "grib_api_interface.F90"
(  123) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4',0,ZHOOK_HANDLE)
(  124) CALL GRIB_GET_REAL4(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  125) IF(PRESENT(KRET)) THEN
(  126)   KRET = IRET
(  127) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  128)   WRITE(0,*) 'GRIB_GET_REAL4',KHANDLE,' ',CDKEY,' FAILED',IRET
(  129)   CALL ERR_MSG(IRET)
(  130)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  131) ENDIF
(  132) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4',1,ZHOOK_HANDLE)
(  133) # 134 "grib_api_interface.F90"
(  134) END SUBROUTINE IGRIB_GET_REAL4
(  135) # 136 "grib_api_interface.F90"
(  136) SUBROUTINE IGRIB_GET_REAL8(KHANDLE,CDKEY,PVAL,KRET)
(  137) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  138) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  139) REAL(KIND=JPRD)   ,INTENT(OUT) :: PVAL
(  140) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  141) # 142 "grib_api_interface.F90"
(  142) INTEGER(KIND=JPIM) :: IRET
(  143) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  144) # 145 "grib_api_interface.F90"
(  145) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8',0,ZHOOK_HANDLE)
(  146) CALL GRIB_GET_REAL8(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  147) IF(PRESENT(KRET)) THEN
(  148)   KRET = IRET
(  149) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  150)   WRITE(0,*) 'GRIB_GET_REAL8',KHANDLE,' ',CDKEY,' FAILED',IRET
(  151)   CALL ERR_MSG(IRET)
(  152)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  153) ENDIF
(  154) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8',1,ZHOOK_HANDLE)
(  155) # 156 "grib_api_interface.F90"
(  156) END SUBROUTINE IGRIB_GET_REAL8
(  157) # 158 "grib_api_interface.F90"
(  158) SUBROUTINE IGRIB_GET_CHAR(KHANDLE,CDKEY,CDVAL,KRET)
(  159) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  160) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  161) CHARACTER(LEN=*)  ,INTENT(OUT) :: CDVAL
(  162) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  163) INTEGER(KIND=JPIM) :: IRET
(  164) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  165) # 166 "grib_api_interface.F90"
(  166) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_CHAR',0,ZHOOK_HANDLE)
(  167) CALL GRIB_GET_STRING(KHANDLE,CDKEY,CDVAL,STATUS=IRET)
(  168) IF(PRESENT(KRET)) THEN
(  169)   KRET = IRET
(  170) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  171)   WRITE(0,*) 'GRIB_GET_STRING',KHANDLE,' ',CDKEY,' FAILED',IRET
(  172)   CALL ERR_MSG(IRET)
(  173)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  174) ENDIF
(  175) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_CHAR',1,ZHOOK_HANDLE)
(  176) # 177 "grib_api_interface.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 20

(  177) END SUBROUTINE IGRIB_GET_CHAR
(  178) # 179 "grib_api_interface.F90"
(  179) SUBROUTINE IGRIB_GET_INT_ARRAY(KHANDLE,CDKEY,KVAL,KRET)
(  180) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  181) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  182) INTEGER(KIND=JPIM),INTENT(OUT) :: KVAL(:)
(  183) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  184) # 185 "grib_api_interface.F90"
(  185) INTEGER(KIND=JPIM) :: IRET,ISIZE
(  186) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  187) # 188 "grib_api_interface.F90"
(  188) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT_ARRAY',0,ZHOOK_HANDLE)
(  189) # 190 "grib_api_interface.F90"
(  190) CALL GRIB_GET_INT_ARRAY(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  191) IF(PRESENT(KRET)) THEN
(  192)   KRET = IRET
(  193) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  194)   WRITE(0,*) 'GRIB_GET_INT',KHANDLE,' ',CDKEY,' FAILED',IRET
(  195)   CALL ERR_MSG(IRET)
(  196)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  197) ENDIF
(  198) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_INT_ARRAY',1,ZHOOK_HANDLE)
(  199) # 200 "grib_api_interface.F90"
(  200) END SUBROUTINE IGRIB_GET_INT_ARRAY
(  201) # 202 "grib_api_interface.F90"
(  202) SUBROUTINE IGRIB_GET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  203) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  204) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  205) REAL(KIND=JPRM)   ,INTENT(OUT) :: PVAL(:)
(  206) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  207) # 208 "grib_api_interface.F90"
(  208) INTEGER(KIND=JPIM) :: IRET
(  209) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  210) # 211 "grib_api_interface.F90"
(  211) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  212) # 213 "grib_api_interface.F90"
(  213) CALL GRIB_GET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  214) IF(PRESENT(KRET)) THEN
(  215)   KRET = IRET
(  216) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  217)   WRITE(0,*) 'GRIB_GET_REAL4_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  218)   CALL ERR_MSG(IRET)
(  219)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  220) ENDIF
(  221) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  222) # 223 "grib_api_interface.F90"
(  223) END SUBROUTINE IGRIB_GET_REAL4_ARRAY
(  224) # 225 "grib_api_interface.F90"
(  225) SUBROUTINE IGRIB_GET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  226) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  227) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  228) REAL(KIND=JPRD)   ,INTENT(OUT) :: PVAL(:)
(  229) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  230) # 231 "grib_api_interface.F90"
(  231) INTEGER(KIND=JPIM) :: IRET
(  232) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  233) # 234 "grib_api_interface.F90"
(  234) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8_ARRAY',0,ZHOOK_HANDLE)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 21

(  235) # 236 "grib_api_interface.F90"
(  236) CALL GRIB_GET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  237) IF(PRESENT(KRET)) THEN
(  238)   KRET = IRET
(  239) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  240)   WRITE(0,*) 'GRIB_GET_REAL8_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  241)   CALL ERR_MSG(IRET)
(  242)   CALL MPL_ABORT('GRIB_GET_VALUE FAILED')
(  243) ENDIF
(  244) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  245) # 246 "grib_api_interface.F90"
(  246) END SUBROUTINE IGRIB_GET_REAL8_ARRAY
(  247) !====================================================================
(  248) SUBROUTINE IGRIB_SET_INT8(KHANDLE,CDKEY,KVAL,KRET)
(  249) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  250) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  251) INTEGER(KIND=JPIB),INTENT(IN) :: KVAL
(  252) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  253) # 254 "grib_api_interface.F90"
(  254) INTEGER(KIND=JPIM) :: IRET
(  255) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  256) # 257 "grib_api_interface.F90"
(  257) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8',0,ZHOOK_HANDLE)
(  258) # 263 "grib_api_interface.F90"
(  263) CALL GRIB_SET_LONG(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  264) IF(PRESENT(KRET)) THEN
(  265)   KRET = IRET
(  266) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  267)   WRITE(0,*) 'GRIB_SET_LONG',KHANDLE,' ',CDKEY,' ',KVAL,' FAILED',IRET
(  268)   CALL ERR_MSG(IRET)
(  269)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  270) ENDIF
(  271) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8',1,ZHOOK_HANDLE)
(  272) # 273 "grib_api_interface.F90"
(  273) END SUBROUTINE IGRIB_SET_INT8
(  274) # 275 "grib_api_interface.F90"
(  275) SUBROUTINE IGRIB_SET_INT(KHANDLE,CDKEY,KVAL,KRET)
(  276) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  277) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  278) INTEGER(KIND=JPIM),INTENT(IN) :: KVAL
(  279) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  280) # 281 "grib_api_interface.F90"
(  281) INTEGER(KIND=JPIM) :: IRET
(  282) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  283) # 284 "grib_api_interface.F90"
(  284) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT',0,ZHOOK_HANDLE)
(  285) # 290 "grib_api_interface.F90"
(  290) CALL GRIB_SET_INT(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  291) IF(PRESENT(KRET)) THEN
(  292)   KRET = IRET
(  293) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  294)   WRITE(0,*) 'GRIB_SET_INT',KHANDLE,' ',CDKEY,' ',KVAL,' FAILED',IRET
(  295)   CALL ERR_MSG(IRET)
(  296)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  297) ENDIF
(  298) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT',1,ZHOOK_HANDLE)
(  299) # 300 "grib_api_interface.F90"
(  300) END SUBROUTINE IGRIB_SET_INT






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 22

(  301) # 302 "grib_api_interface.F90"
(  302) SUBROUTINE IGRIB_SET_REAL4(KHANDLE,CDKEY,PVAL,KRET)
(  303) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  304) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  305) REAL(KIND=JPRM)   ,INTENT(IN) :: PVAL
(  306) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  307) # 308 "grib_api_interface.F90"
(  308) INTEGER(KIND=JPIM) :: IRET
(  309) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  310) # 311 "grib_api_interface.F90"
(  311) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4',0,ZHOOK_HANDLE)
(  312) CALL GRIB_SET_REAL4(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  313) IF(PRESENT(KRET)) THEN
(  314)   KRET = IRET
(  315) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  316)   WRITE(0,*) 'GRIB_SET_REAL4',KHANDLE,' ',CDKEY,' ',PVAL,' FAILED',IRET
(  317)   CALL ERR_MSG(IRET)
(  318)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  319) ENDIF
(  320) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4',1,ZHOOK_HANDLE)
(  321) # 322 "grib_api_interface.F90"
(  322) END SUBROUTINE IGRIB_SET_REAL4
(  323) # 324 "grib_api_interface.F90"
(  324) SUBROUTINE IGRIB_SET_REAL8(KHANDLE,CDKEY,PVAL,KRET)
(  325) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  326) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  327) REAL(KIND=JPRD)   ,INTENT(IN) :: PVAL
(  328) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  329) # 330 "grib_api_interface.F90"
(  330) INTEGER(KIND=JPIM) :: IRET
(  331) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  332) # 337 "grib_api_interface.F90"
(  337) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8',0,ZHOOK_HANDLE)
(  338) CALL GRIB_SET_REAL8(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  339) IF(PRESENT(KRET)) THEN
(  340)   KRET = IRET
(  341) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  342)   WRITE(0,*) 'GRIB_SET_REAL8',KHANDLE,' ',CDKEY,' ',PVAL,' FAILED',IRET
(  343)   CALL ERR_MSG(IRET)
(  344)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  345) ENDIF
(  346) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8',1,ZHOOK_HANDLE)
(  347) # 348 "grib_api_interface.F90"
(  348) END SUBROUTINE IGRIB_SET_REAL8
(  349) # 350 "grib_api_interface.F90"
(  350) SUBROUTINE IGRIB_SET_CHAR(KHANDLE,CDKEY,CDVAL,KRET)
(  351) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  352) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  353) CHARACTER(LEN=*)  ,INTENT(IN) :: CDVAL
(  354) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  355) # 356 "grib_api_interface.F90"
(  356) INTEGER(KIND=JPIM) :: IRET
(  357) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  358) # 359 "grib_api_interface.F90"
(  359) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_CHAR',0,ZHOOK_HANDLE)
(  360) # 365 "grib_api_interface.F90"
(  365) CALL GRIB_SET_STRING(KHANDLE,CDKEY,CDVAL,STATUS=IRET)
(  366) IF(PRESENT(KRET)) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 23

(  367)   KRET = IRET
(  368) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  369)   WRITE(0,*) 'GRIB_SET_STRING',KHANDLE,' ',CDKEY,' ',CDVAL,' FAILED',IRET
(  370)   CALL ERR_MSG(IRET)
(  371)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  372) ENDIF
(  373) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_CHAR',1,ZHOOK_HANDLE)
(  374) # 375 "grib_api_interface.F90"
(  375) END SUBROUTINE IGRIB_SET_CHAR
(  376) # 377 "grib_api_interface.F90"
(  377) SUBROUTINE IGRIB_SET_INT8_ARRAY(KHANDLE,CDKEY,KVAL,KRET)
(  378) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  379) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  380) INTEGER(KIND=JPIB),INTENT(IN) :: KVAL(:)
(  381) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  382) # 383 "grib_api_interface.F90"
(  383) INTEGER(KIND=JPIM) :: IRET
(  384) INTEGER(KIND=JPIM) :: I
(  385) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  386) # 387 "grib_api_interface.F90"
(  387) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8_ARRAY',0,ZHOOK_HANDLE)
(  388) # 395 "grib_api_interface.F90"
(  395) CALL GRIB_SET_LONG_ARRAY(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  396) IF(PRESENT(KRET)) THEN
(  397)   KRET = IRET
(  398) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  399)   WRITE(0,*) 'GRIB_SET_LONG_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  400)   CALL ERR_MSG(IRET)
(  401)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  402) ENDIF
(  403) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT8_ARRAY',1,ZHOOK_HANDLE)
(  404) # 405 "grib_api_interface.F90"
(  405) END SUBROUTINE IGRIB_SET_INT8_ARRAY
(  406) # 407 "grib_api_interface.F90"
(  407) SUBROUTINE IGRIB_SET_INT_ARRAY(KHANDLE,CDKEY,KVAL,KRET)
(  408) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  409) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  410) INTEGER(KIND=JPIM),INTENT(IN) :: KVAL(:)
(  411) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  412) # 413 "grib_api_interface.F90"
(  413) INTEGER(KIND=JPIM) :: IRET
(  414) INTEGER(KIND=JPIM) :: I
(  415) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  416) # 417 "grib_api_interface.F90"
(  417) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT_ARRAY',0,ZHOOK_HANDLE)
(  418) # 425 "grib_api_interface.F90"
(  425) CALL GRIB_SET_INT_ARRAY(KHANDLE,CDKEY,KVAL,STATUS=IRET)
(  426) IF(PRESENT(KRET)) THEN
(  427)   KRET = IRET
(  428) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  429)   WRITE(0,*) 'GRIB_SET_INT_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  430)   CALL ERR_MSG(IRET)
(  431)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  432) ENDIF
(  433) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_INT_ARRAY',1,ZHOOK_HANDLE)
(  434) # 435 "grib_api_interface.F90"
(  435) END SUBROUTINE IGRIB_SET_INT_ARRAY
(  436) # 437 "grib_api_interface.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 24

(  437) SUBROUTINE IGRIB_SET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  438) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  439) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  440) REAL(KIND=JPRM)   ,INTENT(IN) :: PVAL(:)
(  441) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  442) # 443 "grib_api_interface.F90"
(  443) INTEGER(KIND=JPIM) :: IRET
(  444) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  445) # 446 "grib_api_interface.F90"
(  446) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  447) CALL GRIB_SET_REAL4_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  448) IF(PRESENT(KRET)) THEN
(  449)   KRET = IRET
(  450) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  451)   WRITE(0,*) 'GRIB_SET_REAL4_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  452)   CALL ERR_MSG(IRET)
(  453)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  454) ENDIF
(  455) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  456) # 457 "grib_api_interface.F90"
(  457) END SUBROUTINE IGRIB_SET_REAL4_ARRAY
(  458) # 459 "grib_api_interface.F90"
(  459) SUBROUTINE IGRIB_SET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,KRET)
(  460) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  461) CHARACTER(LEN=*)  ,INTENT(IN) :: CDKEY
(  462) REAL(KIND=JPRD)   ,INTENT(IN) :: PVAL(:)
(  463) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  464) # 465 "grib_api_interface.F90"
(  465) INTEGER(KIND=JPIM) :: IRET
(  466) INTEGER(KIND=JPIM) :: I
(  467) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  468) # 475 "grib_api_interface.F90"
(  475) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  476) CALL GRIB_SET_REAL8_ARRAY(KHANDLE,CDKEY,PVAL,STATUS=IRET)
(  477) IF(PRESENT(KRET)) THEN
(  478)   KRET = IRET
(  479) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  480)   WRITE(0,*) 'GRIB_SET_REAL8_ARRAY',KHANDLE,' ',CDKEY,' FAILED',IRET
(  481)   CALL ERR_MSG(IRET)
(  482)   CALL MPL_ABORT('GRIB_SET_VALUE FAILED')
(  483) ENDIF
(  484) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_SET_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  485) # 486 "grib_api_interface.F90"
(  486) END SUBROUTINE IGRIB_SET_REAL8_ARRAY
(  487) # 488 "grib_api_interface.F90"
(  488) SUBROUTINE IGRIB_OPEN_FILE(KFILE,CDPATH,CDMODE)
(  489) INTEGER(KIND=JPIM),INTENT(OUT)  :: KFILE
(  490) CHARACTER(LEN=*)  ,INTENT(IN)   :: CDPATH
(  491) CHARACTER(LEN=1)  ,INTENT(IN)   :: CDMODE
(  492) # 493 "grib_api_interface.F90"
(  493) INTEGER(KIND=JPIM) :: IRET
(  494) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  495) # 496 "grib_api_interface.F90"
(  496) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_OPEN_FILE',0,ZHOOK_HANDLE)
(  497) CALL GRIB_OPEN_FILE(KFILE,CDPATH,CDMODE,STATUS=IRET)
(  498) IF(IRET /= JPGRIB_SUCCESS) THEN
(  499)   WRITE(0,*) 'GRIB_OPEN_FILE ',TRIM(CDPATH),' FAILED',IRET
(  500)   CALL ERR_MSG(IRET)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 25

(  501)   CALL MPL_ABORT('GRIB_OPEN_FILE FAILED')
(  502) ENDIF
(  503) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_OPEN_FILE',1,ZHOOK_HANDLE)
(  504) # 505 "grib_api_interface.F90"
(  505) END SUBROUTINE IGRIB_OPEN_FILE
(  506) # 507 "grib_api_interface.F90"
(  507) SUBROUTINE IGRIB_CLOSE_FILE(KFILE)
(  508) INTEGER(KIND=JPIM),INTENT(IN)  :: KFILE
(  509) # 510 "grib_api_interface.F90"
(  510) INTEGER(KIND=JPIM) :: IRET
(  511) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  512) # 513 "grib_api_interface.F90"
(  513) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLOSE_FILE',0,ZHOOK_HANDLE)
(  514) CALL GRIB_CLOSE_FILE(KFILE,STATUS=IRET)
(  515) IF(IRET /= JPGRIB_SUCCESS) THEN
(  516)   WRITE(0,*) 'GRIB_CLOSE_FILE ',KFILE,' FAILED',IRET
(  517)   CALL ERR_MSG(IRET)
(  518)   CALL MPL_ABORT('GRIB_CLOSE_FILE FAILED')
(  519) ENDIF
(  520) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLOSE_FILE',1,ZHOOK_HANDLE)
(  521) # 522 "grib_api_interface.F90"
(  522) END SUBROUTINE IGRIB_CLOSE_FILE
(  523) # 524 "grib_api_interface.F90"
(  524) SUBROUTINE IGRIB_READ_FROM_FILE(KFILE,KBUF,KBYTES,KRET)
(  525) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  526) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  527) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  528) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  529) INTEGER(KIND=JPIM) :: IRET,ILEN
(  530) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  531) # 532 "grib_api_interface.F90"
(  532) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_FROM_FILE',0,ZHOOK_HANDLE)
(  533) # 534 "grib_api_interface.F90"
(  534) CALL GRIB_READ_FROM_FILE(KFILE,KBUF,KBYTES,IRET)
(  535) IF(PRESENT(KRET)) THEN
(  536)   KRET = IRET
(  537) ELSEIF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  538)   WRITE(0,*) 'GRIB_READ_FROM_FILE ',KFILE,' FAILED',IRET
(  539)   CALL ERR_MSG(IRET)
(  540)   CALL MPL_ABORT('GRIB_READ_FROM_FILE FAILED')
(  541) ENDIF
(  542) # 543 "grib_api_interface.F90"
(  543) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_FROM_FILE',1,ZHOOK_HANDLE)
(  544) # 545 "grib_api_interface.F90"
(  545) END SUBROUTINE IGRIB_READ_FROM_FILE
(  546) # 547 "grib_api_interface.F90"
(  547) SUBROUTINE IGRIB_READ_BYTES_INT(KFILE,KBUF,KBYTES,KRET)
(  548) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  549) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  550) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  551) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  552) INTEGER(KIND=JPIM) :: IRET,ILEN
(  553) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  554) # 555 "grib_api_interface.F90"
(  555) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_INT',0,ZHOOK_HANDLE)
(  556) CALL GRIB_READ_BYTES(KFILE,KBUF,KBYTES,IRET)
(  557) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  558)   WRITE(0,*) 'GRIB_READ_BYTES_INT ',KFILE,' ',KBYTES,' FAILED',IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 26

(  559)   CALL ERR_MSG(IRET)
(  560)   CALL MPL_ABORT('GRIB_READ_BYTES_INT FAILED')
(  561) ENDIF
(  562) KRET = IRET
(  563) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_INT',1,ZHOOK_HANDLE)
(  564) # 565 "grib_api_interface.F90"
(  565) END SUBROUTINE IGRIB_READ_BYTES_INT
(  566) # 567 "grib_api_interface.F90"
(  567) SUBROUTINE IGRIB_READ_BYTES_REAL4(KFILE,PBUF,KBYTES,KRET)
(  568) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  569) REAL(KIND=JPRM)   ,INTENT(OUT)   :: PBUF(:)
(  570) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  571) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  572) INTEGER(KIND=JPIM) :: IRET,ILEN
(  573) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  574) # 575 "grib_api_interface.F90"
(  575) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL4',0,ZHOOK_HANDLE)
(  576) # 577 "grib_api_interface.F90"
(  577) CALL GRIB_READ_BYTES(KFILE,PBUF,KBYTES,IRET)
(  578) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  579)   WRITE(0,*) 'GRIB_READ_BYTES_INT ',KFILE,' FAILED',IRET
(  580)   CALL ERR_MSG(IRET)
(  581)   CALL MPL_ABORT('GRIB_READ_BYTES_REAL4 FAILED')
(  582) ENDIF
(  583) KRET = IRET
(  584) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL4',1,ZHOOK_HANDLE)
(  585) END SUBROUTINE IGRIB_READ_BYTES_REAL4
(  586) # 587 "grib_api_interface.F90"
(  587) SUBROUTINE IGRIB_READ_BYTES_REAL8(KFILE,PBUF,KBYTES,KRET)
(  588) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  589) REAL(KIND=JPRD)   ,INTENT(OUT)   :: PBUF(:)
(  590) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  591) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  592) INTEGER(KIND=JPIM) :: IRET,ILEN
(  593) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  594) # 595 "grib_api_interface.F90"
(  595) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL8',0,ZHOOK_HANDLE)
(  596) # 597 "grib_api_interface.F90"
(  597) CALL GRIB_READ_BYTES(KFILE,PBUF,KBYTES,IRET)
(  598) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  599)   WRITE(0,*) 'GRIB_READ_BYTES_REAL8 ',KFILE,' FAILED',IRET
(  600)   CALL ERR_MSG(IRET)
(  601)   CALL MPL_ABORT('GRIB_READ_BYTES_REAL8 FAILED')
(  602) ENDIF
(  603) KRET = IRET
(  604) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_REAL8',1,ZHOOK_HANDLE)
(  605) END SUBROUTINE IGRIB_READ_BYTES_REAL8
(  606) # 607 "grib_api_interface.F90"
(  607) SUBROUTINE IGRIB_READ_BYTES_CHAR(KFILE,CDBUF,KBYTES,KRET)
(  608) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  609) CHARACTER(LEN=1)  ,INTENT(OUT)   :: CDBUF(:)
(  610) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  611) INTEGER(KIND=JPIM),INTENT(OUT)   :: KRET
(  612) INTEGER(KIND=JPIM) :: IRET,ILEN
(  613) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  614) # 615 "grib_api_interface.F90"
(  615) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_CHAR',0,ZHOOK_HANDLE)
(  616) # 617 "grib_api_interface.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 27

(  617) CALL GRIB_READ_BYTES(KFILE,CDBUF,KBYTES,IRET)
(  618) IF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  619)   WRITE(0,*) 'GRIB_READ_BYTES_CHAR ',KFILE,' FAILED',IRET
(  620)   CALL ERR_MSG(IRET)
(  621)   CALL MPL_ABORT('GRIB_READ_BYTES_CHAR FAILED')
(  622) ENDIF
(  623) KRET = IRET
(  624) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_READ_BYTES_CHAR',1,ZHOOK_HANDLE)
(  625) # 626 "grib_api_interface.F90"
(  626) END SUBROUTINE IGRIB_READ_BYTES_CHAR
(  627) # 629 "grib_api_interface.F90"
(  629) SUBROUTINE IGRIB_WRITE_BYTES_INT(KFILE,KBUF,KBYTES)
(  630) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  631) INTEGER(KIND=JPIM),INTENT(IN)    :: KBUF(:)
(  632) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  633) INTEGER(KIND=JPIM) :: IRET,ILEN
(  634) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  635) # 636 "grib_api_interface.F90"
(  636) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_INT',0,ZHOOK_HANDLE)
(  637) # 638 "grib_api_interface.F90"
(  638) CALL GRIB_WRITE_BYTES(KFILE,KBUF,KBYTES,IRET)
(  639) IF(IRET /= JPGRIB_SUCCESS ) THEN
(  640)   WRITE(0,*) 'GRIB_WRITE_BYTES_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  641)   CALL ERR_MSG(IRET)
(  642)   CALL MPL_ABORT('GRIB_WRITE_BYTES_INT FAILED')
(  643) ENDIF
(  644) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_INT',1,ZHOOK_HANDLE)
(  645) # 646 "grib_api_interface.F90"
(  646) END SUBROUTINE IGRIB_WRITE_BYTES_INT
(  647) # 648 "grib_api_interface.F90"
(  648) SUBROUTINE IGRIB_WRITE_BYTES_REAL4(KFILE,PBUF,KBYTES)
(  649) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  650) REAL(KIND=JPRM)   ,INTENT(IN)    :: PBUF(:)
(  651) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  652) INTEGER(KIND=JPIM) :: IRET,ILEN
(  653) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  654) # 655 "grib_api_interface.F90"
(  655) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL4',0,ZHOOK_HANDLE)
(  656) # 657 "grib_api_interface.F90"
(  657) CALL GRIB_WRITE_BYTES(KFILE,PBUF,KBYTES,IRET)
(  658) IF(IRET /= JPGRIB_SUCCESS ) THEN
(  659)   WRITE(0,*) 'GRIB_WRITE_BYTES_INT ',KFILE,' FAILED',IRET
(  660)   CALL ERR_MSG(IRET)
(  661)   CALL MPL_ABORT('GRIB_WRITE_BYTES_REAL4 FAILED')
(  662) ENDIF
(  663) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL4',1,ZHOOK_HANDLE)
(  664) # 665 "grib_api_interface.F90"
(  665) END SUBROUTINE IGRIB_WRITE_BYTES_REAL4
(  666) # 667 "grib_api_interface.F90"
(  667) SUBROUTINE IGRIB_WRITE_BYTES_REAL8(KFILE,PBUF,KBYTES)
(  668) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  669) REAL(KIND=JPRD)   ,INTENT(IN)    :: PBUF(:)
(  670) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  671) INTEGER(KIND=JPIM) :: IRET,ILEN
(  672) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  673) # 674 "grib_api_interface.F90"
(  674) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL8',0,ZHOOK_HANDLE)
(  675) # 676 "grib_api_interface.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 28

(  676) CALL GRIB_WRITE_BYTES(KFILE,PBUF,KBYTES,IRET)
(  677) IF(IRET /= JPGRIB_SUCCESS ) THEN
(  678)   WRITE(0,*) 'GRIB_WRITE_BYTES_INT ',KFILE,' FAILED',IRET
(  679)   CALL ERR_MSG(IRET)
(  680)   CALL MPL_ABORT('GRIB_WRITE_BYTES_REAL8 FAILED')
(  681) ENDIF
(  682) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_REAL8',1,ZHOOK_HANDLE)
(  683) # 684 "grib_api_interface.F90"
(  684) END SUBROUTINE IGRIB_WRITE_BYTES_REAL8
(  685) # 686 "grib_api_interface.F90"
(  686) SUBROUTINE IGRIB_WRITE_BYTES_CHAR(KFILE,CDBUF,KBYTES)
(  687) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  688) CHARACTER(LEN=1)  ,INTENT(IN)    :: CDBUF(:)
(  689) INTEGER(KIND=JPKSIZE_T),INTENT(INOUT) :: KBYTES
(  690) INTEGER(KIND=JPIM) :: IRET
(  691) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  692) # 693 "grib_api_interface.F90"
(  693) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_CHAR',0,ZHOOK_HANDLE)
(  694) # 695 "grib_api_interface.F90"
(  695) CALL GRIB_WRITE_BYTES(KFILE,CDBUF,KBYTES,IRET)
(  696) IF(IRET /= JPGRIB_SUCCESS) THEN
(  697)   WRITE(0,*) 'GRIB_WRITE_BYTES_CHAR ',KFILE,' FAILED',IRET
(  698)   CALL ERR_MSG(IRET)
(  699)   CALL MPL_ABORT('GRIB_WRITE_BYTES_CHAR FAILED')
(  700) ENDIF
(  701) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_WRITE_BYTES_CHAR',1,ZHOOK_HANDLE)
(  702) # 703 "grib_api_interface.F90"
(  703) END SUBROUTINE IGRIB_WRITE_BYTES_CHAR
(  704) # 705 "grib_api_interface.F90"
(  705) SUBROUTINE IGRIB_NEW_FROM_FILE(KFILE,KHANDLE,KRET)
(  706) INTEGER(KIND=JPIM),INTENT(IN)  :: KFILE
(  707) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE
(  708) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  709) # 710 "grib_api_interface.F90"
(  710) INTEGER(KIND=JPIM) :: IRET
(  711) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  712) # 713 "grib_api_interface.F90"
(  713) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_FILE',0,ZHOOK_HANDLE)
(  714) # 715 "grib_api_interface.F90"
(  715) CALL GRIB_NEW_FROM_FILE(KFILE,KHANDLE,STATUS=IRET)
(  716) # 717 "grib_api_interface.F90"
(  717) IF(PRESENT(KRET)) THEN
(  718)   KRET = IRET
(  719) ELSEIF(IRET /= JPGRIB_SUCCESS .AND. IRET /= JPGRIB_END_OF_FILE ) THEN
(  720)   WRITE(0,*) 'GRIB_NEW_FROM_FILE ',KFILE,' FAILED',IRET
(  721)   CALL ERR_MSG(IRET)
(  722)   CALL MPL_ABORT('GRIB_NEW_FROM_FILE FAILED')
(  723) ENDIF
(  724) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_FILE',1,ZHOOK_HANDLE)
(  725) # 726 "grib_api_interface.F90"
(  726) END SUBROUTINE IGRIB_NEW_FROM_FILE
(  727) # 728 "grib_api_interface.F90"
(  728) SUBROUTINE IGRIB_NEW_FROM_MESSAGE(KHANDLE,KBUF)
(  729) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE
(  730) INTEGER(KIND=JPIM),INTENT(IN)  :: KBUF(:)
(  731) # 732 "grib_api_interface.F90"
(  732) INTEGER(KIND=JPIM) :: IRET
(  733) REAL(KIND=JPRB) :: ZHOOK_HANDLE






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 29

(  734) # 735 "grib_api_interface.F90"
(  735) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_MESSAGE',0,ZHOOK_HANDLE)
(  736) # 737 "grib_api_interface.F90"
(  737) CALL GRIB_NEW_FROM_MESSAGE(KHANDLE,KBUF,STATUS=IRET)
(  738) # 739 "grib_api_interface.F90"
(  739) IF(IRET /= JPGRIB_SUCCESS) THEN
(  740)   WRITE(0,*) 'CALL TO GRIB_NEW_FROM_MESSAGE FAILED',IRET
(  741)   CALL ERR_MSG(IRET)
(  742)   CALL MPL_ABORT('IGRIB_NEW_FROM_MESSAGE FAILED')
(  743) ENDIF
(  744) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_MESSAGE',1,ZHOOK_HANDLE)
(  745) # 746 "grib_api_interface.F90"
(  746) END SUBROUTINE IGRIB_NEW_FROM_MESSAGE
(  747) # 748 "grib_api_interface.F90"
(  748) SUBROUTINE IGRIB_RELEASE(KHANDLE)
(  749) INTEGER(KIND=JPIM),INTENT(IN) :: KHANDLE
(  750) # 751 "grib_api_interface.F90"
(  751) INTEGER(KIND=JPIM) :: IRET
(  752) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  753) # 754 "grib_api_interface.F90"
(  754) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_RELEASE',0,ZHOOK_HANDLE)
(  755) # 756 "grib_api_interface.F90"
(  756) CALL GRIB_RELEASE(KHANDLE,STATUS=IRET)
(  757) IF(IRET /= JPGRIB_SUCCESS) THEN
(  758)   WRITE(0,*) 'GRIB_RELEASE ',KHANDLE,' FAILED',IRET
(  759)   CALL ERR_MSG(IRET)
(  760)   CALL MPL_ABORT('GRIB_RELEASE FAILED')
(  761) ENDIF
(  762) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_RELEASE',1,ZHOOK_HANDLE)
(  763) # 764 "grib_api_interface.F90"
(  764) END SUBROUTINE IGRIB_RELEASE
(  765) # 766 "grib_api_interface.F90"
(  766) SUBROUTINE IGRIB_GET_MESSAGE_SIZE(KHANDLE,KBYTES)
(  767) INTEGER(KIND=JPIM),INTENT(IN)  :: KHANDLE
(  768) INTEGER(KIND=JPKSIZE_T),INTENT(OUT) :: KBYTES
(  769) INTEGER(KIND=JPIM) :: IRET
(  770) INTEGER(KIND=KINDOFSIZE_T) :: IBYTES
(  771) REAL(KIND=JPRB)    :: ZHOOK_HANDLE
(  772) # 774 "grib_api_interface.F90"
(  774) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE_SIZE',0,ZHOOK_HANDLE)
(  775) CALL GRIB_GET_MESSAGE_SIZE(KHANDLE,IBYTES,STATUS=IRET)
(  776) KBYTES = IBYTES
(  777) IF(IRET /= JPGRIB_SUCCESS) THEN
(  778)   WRITE(0,*) 'GRIB_GET_MESSAGE_SIZE ',KHANDLE,' FAILED',IRET
(  779)   CALL ERR_MSG(IRET)
(  780)   CALL MPL_ABORT(' GRIB_GET_MESSAGE_SIZE FAIL')
(  781) ENDIF
(  782) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE_SIZE',1,ZHOOK_HANDLE)
(  783) # 784 "grib_api_interface.F90"
(  784) END SUBROUTINE IGRIB_GET_MESSAGE_SIZE
(  785) # 786 "grib_api_interface.F90"
(  786) SUBROUTINE IGRIB_GET_MESSAGE(KHANDLE,KGRIB)
(  787) INTEGER(KIND=JPIM),INTENT(IN)  :: KHANDLE
(  788) INTEGER(KIND=JPIM),INTENT(OUT) :: KGRIB(:)
(  789) # 790 "grib_api_interface.F90"
(  790) INTEGER(KIND=JPIM) :: IRET
(  791) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  792) CHARACTER(LEN=1),ALLOCATABLE   :: CLS(:)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 30

(  793) INTEGER(KIND=JPIM) :: ILENINT
(  794) INTEGER(KIND=JPKSIZE_T) :: ILEN
(  795) # 796 "grib_api_interface.F90"
(  796) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE',0,ZHOOK_HANDLE)
(  797) # 798 "grib_api_interface.F90"
(  798) !TEMP CODING
(  799) CALL IGRIB_GET_MESSAGE_SIZE(KHANDLE,ILEN)
(  800) ILENINT=(ILEN+3)/4
(  801) ALLOCATE(CLS(ILENINT*4))
(  802) CLS(ILENINT*4-3:ILENINT*4)='    '
(  803) CALL GRIB_COPY_MESSAGE(KHANDLE,CLS,STATUS=IRET)
(  804) KGRIB(1:ILENINT)=TRANSFER(CLS,KGRIB)
(  805) DEALLOCATE(CLS)
(  806) !CALL GRIB_COPY_MESSAGE(KHANDLE,KGRIB,STATUS=IRET)
(  807) IF(IRET /= JPGRIB_SUCCESS) THEN
(  808)   WRITE(0,*) 'GRIB_COPY_MESSAGE ',KHANDLE,' FAILED',IRET
(  809)   CALL ERR_MSG(IRET)
(  810)   CALL MPL_ABORT(' GRIB_COPY_MESSAGE FAILED')
(  811) ENDIF
(  812) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_GET_MESSAGE',1,ZHOOK_HANDLE)
(  813) # 814 "grib_api_interface.F90"
(  814) END SUBROUTINE IGRIB_GET_MESSAGE
(  815) # 816 "grib_api_interface.F90"
(  816) SUBROUTINE IGRIB_NEW_FROM_SAMPLES(KHANDLE,CDNAME,KRET)
(  817) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE
(  818) CHARACTER(LEN=*),INTENT(IN) :: CDNAME
(  819) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  820) # 821 "grib_api_interface.F90"
(  821) INTEGER(KIND=JPIM) :: IRET
(  822) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  823) # 824 "grib_api_interface.F90"
(  824) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_SAMPLES',0,ZHOOK_HANDLE)
(  825) CALL GRIB_NEW_FROM_SAMPLES(KHANDLE,TRIM(CDNAME),STATUS=IRET)
(  826) IF (PRESENT (KRET)) THEN
(  827)   KRET = IRET
(  828) ELSEIF(IRET /= JPGRIB_SUCCESS) THEN
(  829)   WRITE(0,*) 'GRIB_NEW_FROM_SAMPLES ',TRIM(CDNAME),' FAILED',IRET
(  830)   CALL ERR_MSG(IRET)
(  831)   CALL MPL_ABORT(' GRIB_NEW_FROM_SAMPLES FAILED')
(  832) ENDIF
(  833) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_NEW_FROM_SAMPLES',1,ZHOOK_HANDLE)
(  834) # 835 "grib_api_interface.F90"
(  835) END SUBROUTINE IGRIB_NEW_FROM_SAMPLES
(  836) # 837 "grib_api_interface.F90"
(  837) SUBROUTINE IGRIB_CLONE(KHANDLE1,KHANDLE2)
(  838) INTEGER(KIND=JPIM),INTENT(IN)  :: KHANDLE1
(  839) INTEGER(KIND=JPIM),INTENT(OUT) :: KHANDLE2
(  840) # 841 "grib_api_interface.F90"
(  841) INTEGER(KIND=JPIM) :: IRET
(  842) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  843) # 844 "grib_api_interface.F90"
(  844) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLONE',0,ZHOOK_HANDLE)
(  845) CALL GRIB_CLONE(KHANDLE1,KHANDLE2,STATUS=IRET)
(  846) # 847 "grib_api_interface.F90"
(  847) IF(IRET /= JPGRIB_SUCCESS) THEN
(  848)   WRITE(0,*) 'GRIB_CLONE FAILED',IRET
(  849)   CALL ERR_MSG(IRET)
(  850)   CALL MPL_ABORT(' GRIB_CLONE FAILED')






NVFORTRAN (Version    20.11)          02/16/2022  17:28:49      page 31

(  851) ENDIF
(  852) IF (LHOOK) CALL DR_HOOK('GRIB_API:IGRIB_CLONE',1,ZHOOK_HANDLE)
(  853) # 854 "grib_api_interface.F90"
(  854) END SUBROUTINE IGRIB_CLONE
(  855) # 856 "grib_api_interface.F90"
(  856) SUBROUTINE ERR_MSG(KRET)
(  857) INTEGER(KIND=JPIM),INTENT(IN) :: KRET
(  858) INTEGER(KIND=JPIM) :: IRET
(  859) CHARACTER(LEN=256) :: CLERRMSG
(  860) # 861 "grib_api_interface.F90"
(  861) CLERRMSG = ''
(  862) CALL GRIB_GET_ERROR_STRING(KRET,CLERRMSG,STATUS=IRET)
(  863) WRITE(0,*) 'GRIB_API ERROR MSG: ',TRIM(CLERRMSG)
(  864) END SUBROUTINE ERR_MSG
(  865) # 867 "grib_api_interface.F90"
(  867) SUBROUTINE IGRIB_IS_DEFINED(KHANDLE, CDKEY, LDDEFINED, KRET)
(  868) INTEGER(KIND=JPIM),           INTENT(IN)  :: KHANDLE
(  869) CHARACTER(LEN=*),             INTENT(IN)  :: CDKEY
(  870) LOGICAL,                      INTENT(OUT) :: LDDEFINED
(  871) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: KRET
(  872) # 873 "grib_api_interface.F90"
(  873) INTEGER(KIND=JPIM) :: IS_DEFINED, IRET
(  874) # 875 "grib_api_interface.F90"
(  875) IS_DEFINED = 0
(  876) # 878 "grib_api_interface.F90"
(  878) CALL GRIB_IS_DEFINED (KHANDLE, CDKEY, IS_DEFINED, IRET)
(  879) # 883 "grib_api_interface.F90"
(  883) IF (PRESENT (KRET)) THEN
(  884)   KRET = IRET
(  885) ELSEIF (IRET /= JPGRIB_SUCCESS) THEN
(  886)   WRITE(0,*) 'GRIB_IS_DEFINED',KHANDLE,' ',CDKEY,' FAILED',IRET
(  887)   CALL ERR_MSG(IRET)
(  888)   CALL MPL_ABORT('GRIB_IS_DEFINED FAILED')
(  889) ENDIF
(  890) # 891 "grib_api_interface.F90"
(  891) LDDEFINED = IS_DEFINED /= 0
(  892) # 893 "grib_api_interface.F90"
(  893) END SUBROUTINE IGRIB_IS_DEFINED
(  894) # 896 "grib_api_interface.F90"
(  896) END MODULE GRIB_API_INTERFACE
