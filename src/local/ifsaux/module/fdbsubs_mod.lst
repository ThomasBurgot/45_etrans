


NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fdbsubs_mod.F90

(    1) MODULE FDBSUBS_MOD
(    2) !
(    3) !== fdbsubs_mod.F90 ==
(    4) !
(    5) ! A module to encapsulate FDB-calls in order to call Dr.Hook
(    6) !
(    7) ! Author: Sami Saarinen, 22-Mar-2004
(    8) !
(    9) 
(   10) USE PARKIND1,   ONLY : JPIM, JPRB
(   11) USE YOMHOOK,    ONLY : LHOOK, DR_HOOK
(   12) USE MPL_MODULE, ONLY : MPL_ABORT
(   13) 
(   14) IMPLICIT NONE
(   15) 
(   16) PUBLIC
(   17) SAVE
(   18) 
(   19) INTEGER(KIND=JPIM), EXTERNAL :: ICLOSEFDB
(   20) INTEGER(KIND=JPIM), EXTERNAL :: IFLUSHFDB
(   21) INTEGER(KIND=JPIM), EXTERNAL :: IINITFDB
(   22) INTEGER(KIND=JPIM), EXTERNAL :: IOPENFDB
(   23) INTEGER(KIND=JPIM), EXTERNAL :: IREADFDB
(   24) INTEGER(KIND=JPIM), EXTERNAL :: ISETCOMMFDB
(   25) INTEGER(KIND=JPIM), EXTERNAL :: ISETFIELDCOUNTFDB
(   26) INTEGER(KIND=JPIM), EXTERNAL :: ISETRANKFDB
(   27) INTEGER(KIND=JPIM), EXTERNAL :: ISETVALFDB
(   28) INTEGER(KIND=JPIM), EXTERNAL :: ISET_FDB_ROOT
(   29) INTEGER(KIND=JPIM), EXTERNAL :: IWRITEFDB
(   30) 
(   31) CONTAINS
(   32) 
(   33) SUBROUTINE ICLOSEFDBSUBS(KFDB,KRET)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 2

(   34) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(   35) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(   36) 
(   37) INTEGER(KIND=JPIM) :: IRET
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) 
(   40) IF (LHOOK) CALL DR_HOOK('ICLOSEFDB',0,ZHOOK_HANDLE)
(   41) 
(   42) IRET = ICLOSEFDB(KFDB)
(   43) IF(PRESENT(KRET)) THEN
(   44)   KRET = IRET
(   45) ELSEIF(IRET /= 0) THEN
(   46)   WRITE(0,*) 'ICLOSEFDB ',KFDB,' FAILED ',IRET
(   47)   CALL MPL_ABORT('ICLOSEFDB FAILED')
(   48) ENDIF
(   49) 
(   50) IF (LHOOK) CALL DR_HOOK('ICLOSEFDB',1,ZHOOK_HANDLE)
(   51) END SUBROUTINE ICLOSEFDBSUBS
(   52) 
(   53) SUBROUTINE IFLUSHFDBSUBS(KFDB,KRET)
(   54) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(   55) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(   56) 
(   57) INTEGER(KIND=JPIM) :: IRET
(   58) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   59) 
(   60) IF (LHOOK) CALL DR_HOOK('IFLUSHFDB',0,ZHOOK_HANDLE)
(   61) 
(   62) IRET = IFLUSHFDB(KFDB)
(   63) IF(PRESENT(KRET)) THEN
(   64)   KRET = IRET
(   65) ELSEIF(IRET /= 0) THEN
(   66)   WRITE(0,*) 'IFLUSHFDB ',KFDB,' FAILED ',IRET
(   67)   CALL MPL_ABORT('IFLUSHFDB FAILED')
(   68) ENDIF
(   69) 
(   70) IF (LHOOK) CALL DR_HOOK('IFLUSHFDB',1,ZHOOK_HANDLE)
(   71) END SUBROUTINE IFLUSHFDBSUBS
(   72) 
(   73) SUBROUTINE IINITFDBSUBS(KRET)
(   74) INTEGER(KIND=JPIM),INTENT(OUT),OPTIONAL :: KRET
(   75) 
(   76) INTEGER(KIND=JPIM) :: IRET
(   77) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   78) 
(   79) IF (LHOOK) CALL DR_HOOK('IINITFDB',0,ZHOOK_HANDLE)
(   80) 
(   81) IRET = IINITFDB()
(   82) IF(PRESENT(KRET)) THEN
(   83)   KRET = IRET
(   84) ELSEIF(IRET /= 0) THEN
(   85)   WRITE(0,*) 'IINITFDB FAILED ',IRET
(   86)   CALL MPL_ABORT('IINITDFB FAILED')
(   87) ENDIF
(   88) 
(   89) IF (LHOOK) CALL DR_HOOK('IINITFDB',1,ZHOOK_HANDLE)
(   90) END SUBROUTINE IINITFDBSUBS
(   91) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 3

(   92) SUBROUTINE IOPENFDBSUBS(CDFDB,KFDB,CDMODE,KRET)
(   93) CHARACTER(LEN=*),             INTENT(IN)    :: CDFDB, CDMODE
(   94) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(   95) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(   96) 
(   97) INTEGER(KIND=JPIM) :: IRET
(   98) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   99) 
(  100) IF (LHOOK) CALL DR_HOOK('IOPENFDB',0,ZHOOK_HANDLE)
(  101) 
(  102) IRET = IOPENFDB(CDFDB,KFDB,CDMODE)
(  103) IF(PRESENT(KRET)) THEN
(  104)   KRET = IRET
(  105) ELSEIF(IRET /= 0) THEN
(  106)   WRITE(0,*) 'IOPENFDB ',KFDB, ' CDFDB ',CDFDB,' CDMODE ',CDMODE,' FAILED ',IRET
(  107)   CALL MPL_ABORT('IOPENFDB FAILED')
(  108) ENDIF
(  109) IF (LHOOK) CALL DR_HOOK('IOPENFDB',1,ZHOOK_HANDLE)
(  110) 
(  111) END SUBROUTINE IOPENFDBSUBS
(  112) 
(  113) SUBROUTINE IREADFDBSUBS(KFDB,KGRIB,KLEN,KRET)
(  114) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB, KLEN, KGRIB(:)
(  115) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  116) 
(  117) INTEGER(KIND=JPIM) :: IRET
(  118) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  119) 
(  120) IF (LHOOK) CALL DR_HOOK('IREADFDB',0,ZHOOK_HANDLE)
(  121) 
(  122) IF (SIZE(KGRIB) > 0) THEN
(  123)   IRET = IREADFDB(KFDB,KGRIB(1),KLEN)
(  124) ELSE
(  125)   IRET = IREADFDB(KFDB,KGRIB,KLEN)
(  126) ENDIF
(  127) IF(PRESENT(KRET)) THEN
(  128)   KRET = IRET
(  129) ELSEIF(IRET /= 0) THEN
(  130)   WRITE(0,*) 'IREADFDB ',KFDB,' KLEN ',KLEN,' FAILED ',IRET
(  131)   CALL MPL_ABORT('IREADFDB FAILED')
(  132) ENDIF
(  133) 
(  134) IF (LHOOK) CALL DR_HOOK('IREADFDB',1,ZHOOK_HANDLE)
(  135) END SUBROUTINE IREADFDBSUBS
(  136) 
(  137) SUBROUTINE ISETCOMMFDBSUBS(KCOMM,KRET)
(  138) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KCOMM
(  139) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  140) 
(  141) INTEGER(KIND=JPIM) :: IRET
(  142) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  143) 
(  144) IF (LHOOK) CALL DR_HOOK('ISETCOMMFDB',0,ZHOOK_HANDLE)
(  145) 
(  146) IRET = ISETCOMMFDB(KCOMM)
(  147) IF(PRESENT(KRET)) THEN
(  148)   KRET = IRET
(  149) ELSEIF(IRET /= 0) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 4

(  150)   WRITE(0,*) 'ISETCOMMFDB ',KCOMM,' FAILED ',IRET
(  151)   CALL MPL_ABORT('ISETCOMMFDB FAILED')
(  152) ENDIF
(  153) 
(  154) IF (LHOOK) CALL DR_HOOK('ISETCOMMFDB',1,ZHOOK_HANDLE)
(  155) END SUBROUTINE ISETCOMMFDBSUBS
(  156) 
(  157) SUBROUTINE ISETFIELDCOUNTFDBSUBS(KFDB,KGLOBAL,KLOCAL,KRET)
(  158) INTEGER(KIND=JPIM),INTENT(INOUT)          :: KFDB
(  159) INTEGER(KIND=JPIM),INTENT(IN)             :: KGLOBAL,KLOCAL
(  160) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: KRET
(  161) 
(  162) INTEGER(KIND=JPIM) :: IRET
(  163) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  164) 
(  165) IF (LHOOK) CALL DR_HOOK('ISETFIELDCOUNTFDB',0,ZHOOK_HANDLE)
(  166) 
(  167) IRET = ISETFIELDCOUNTFDB(KFDB,KGLOBAL,KLOCAL)
(  168) IF(PRESENT(KRET)) THEN
(  169)   KRET = IRET
(  170) ELSEIF(IRET /= 0) THEN
(  171)   WRITE(0,*) 'ISETFIELDCOUNTFDB ',KFDB,' KGLOBAL ',KGLOBAL,' KLOCAL ',KLOCAL,' FAILED ',IRET
(  172)   CALL MPL_ABORT('ISETFIELDCOUNTFDB FAILED')
(  173) ENDIF
(  174) 
(  175) IF (LHOOK) CALL DR_HOOK('ISETFIELDCOUNTFDB',1,ZHOOK_HANDLE)
(  176) END SUBROUTINE ISETFIELDCOUNTFDBSUBS
(  177) 
(  178) SUBROUTINE ISETRANKFDBSUBS(KFDB,KLEV,KRET)
(  179) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB, KLEV
(  180) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  181) 
(  182) INTEGER(KIND=JPIM) :: IRET
(  183) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  184) 
(  185) IF (LHOOK) CALL DR_HOOK('ISETRANKFDB',0,ZHOOK_HANDLE)
(  186) 
(  187) IRET = ISETRANKFDB(KFDB,KLEV)
(  188) IF(PRESENT(KRET)) THEN
(  189)   KRET = IRET
(  190) ELSEIF(IRET /= 0) THEN
(  191)   WRITE(0,*) 'ISETRANKFDB ',KFDB,' KLEV ',KLEV,' FAILED ',IRET
(  192)   CALL MPL_ABORT('ISETRANKFDB FAILED')
(  193) ENDIF
(  194) 
(  195) IF (LHOOK) CALL DR_HOOK('ISETRANKFDB',1,ZHOOK_HANDLE)
(  196) END SUBROUTINE ISETRANKFDBSUBS
(  197) 
(  198) SUBROUTINE ISETVALFDBSUBS(KFDB,CDNAME,CDKIND,KRET)
(  199) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(  200) CHARACTER(LEN=*),             INTENT(IN)    :: CDNAME, CDKIND
(  201) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  202) 
(  203) INTEGER(KIND=JPIM) :: IRET
(  204) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  205) 
(  206) IF (LHOOK) CALL DR_HOOK('ISETVALFDB',0,ZHOOK_HANDLE)
(  207) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 5

(  208) IRET = ISETVALFDB(KFDB,CDNAME,TRIM(CDKIND))
(  209) IF(PRESENT(KRET)) THEN
(  210)   KRET = IRET
(  211) ELSEIF(IRET /= 0) THEN
(  212)   WRITE(0,*) 'ISETVALFDB ',KFDB,' CDNAME ',CDNAME,' CDKIND ',TRIM(CDKIND),' FAILED ',IRET
(  213)   CALL MPL_ABORT('ISETVALFDB FAILED')
(  214) ENDIF
(  215) 
(  216) IF (LHOOK) CALL DR_HOOK('ISETVALFDB',1,ZHOOK_HANDLE)
(  217) END SUBROUTINE ISETVALFDBSUBS
(  218) 
(  219) SUBROUTINE ISET_FDBSUBS_ROOT(KFDB,CDNAME,KRET)
(  220) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(  221) CHARACTER(LEN=*),             INTENT(INOUT) :: CDNAME
(  222) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  223) 
(  224) INTEGER(KIND=JPIM) :: IRET
(  225) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  226) 
(  227) IF (LHOOK) CALL DR_HOOK('ISET_FDB_ROOT',0,ZHOOK_HANDLE)
(  228) 
(  229) IRET = ISET_FDB_ROOT(KFDB,CDNAME)
(  230) IF(PRESENT(KRET)) THEN
(  231)   KRET = IRET
(  232) ELSEIF(IRET /= 0) THEN
(  233)   WRITE(0,*) 'ISET_FDB_ROOT ',KFDB,' CDNAME ',CDNAME,' FAILED ',IRET
(  234)   CALL MPL_ABORT('ISET_FDB_ROOT FAILED')
(  235) ENDIF
(  236) 
(  237) IF (LHOOK) CALL DR_HOOK('ISET_FDB_ROOT',1,ZHOOK_HANDLE)
(  238) END SUBROUTINE ISET_FDBSUBS_ROOT
(  239) 
(  240) SUBROUTINE IWRITEFDBSUBS(KFDB,KGRIB,KLEN,KRET)
(  241) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB, KLEN, KGRIB(:)
(  242) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  243) 
(  244) INTEGER(KIND=JPIM) :: IRET
(  245) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  246) 
(  247) IF (LHOOK) CALL DR_HOOK('IWRITEFDB',0,ZHOOK_HANDLE)
(  248) 
(  249) IF (SIZE(KGRIB) > 0) THEN
(  250)   IRET = IWRITEFDB(KFDB, KGRIB(1), KLEN)
(  251) ELSE
(  252)   IRET = IWRITEFDB(KFDB, KGRIB, KLEN)
(  253) ENDIF
(  254) IF(PRESENT(KRET)) THEN
(  255)   KRET = IRET
(  256) ELSEIF(IRET /= 0) THEN
(  257)   WRITE(0,*) 'IWRITEFDB ',KFDB,' KLEN ', KLEN,' FAILED ',IRET
(  258)   CALL MPL_ABORT('IWRITEFDB FAILED')
(  259) ENDIF
(  260) 
(  261) IF (LHOOK) CALL DR_HOOK('IWRITEFDB',1,ZHOOK_HANDLE)
(  262) END SUBROUTINE IWRITEFDBSUBS
(  263) 
(  264) END MODULE FDBSUBS_MOD







NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 6

(    1) # 1 "fdbsubs_mod.F90"
(    1) MODULE FDBSUBS_MOD
(    2) !
(    3) !== fdbsubs_mod.F90 ==
(    4) !
(    5) ! A module to encapsulate FDB-calls in order to call Dr.Hook
(    6) !
(    7) ! Author: Sami Saarinen, 22-Mar-2004
(    8) !
(    9) # 10 "fdbsubs_mod.F90"
(   10) USE PARKIND1,   ONLY : JPIM, JPRB
(   11) USE YOMHOOK,    ONLY : LHOOK, DR_HOOK
(   12) USE MPL_MODULE, ONLY : MPL_ABORT
(   13) # 14 "fdbsubs_mod.F90"
(   14) IMPLICIT NONE
(   15) # 16 "fdbsubs_mod.F90"
(   16) PUBLIC
(   17) SAVE
(   18) # 19 "fdbsubs_mod.F90"
(   19) INTEGER(KIND=JPIM), EXTERNAL :: ICLOSEFDB
(   20) INTEGER(KIND=JPIM), EXTERNAL :: IFLUSHFDB
(   21) INTEGER(KIND=JPIM), EXTERNAL :: IINITFDB
(   22) INTEGER(KIND=JPIM), EXTERNAL :: IOPENFDB
(   23) INTEGER(KIND=JPIM), EXTERNAL :: IREADFDB
(   24) INTEGER(KIND=JPIM), EXTERNAL :: ISETCOMMFDB
(   25) INTEGER(KIND=JPIM), EXTERNAL :: ISETFIELDCOUNTFDB
(   26) INTEGER(KIND=JPIM), EXTERNAL :: ISETRANKFDB
(   27) INTEGER(KIND=JPIM), EXTERNAL :: ISETVALFDB
(   28) INTEGER(KIND=JPIM), EXTERNAL :: ISET_FDB_ROOT
(   29) INTEGER(KIND=JPIM), EXTERNAL :: IWRITEFDB
(   30) # 31 "fdbsubs_mod.F90"
(   31) CONTAINS
(   32) # 33 "fdbsubs_mod.F90"
(   33) SUBROUTINE ICLOSEFDBSUBS(KFDB,KRET)
(   34) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(   35) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(   36) # 37 "fdbsubs_mod.F90"
(   37) INTEGER(KIND=JPIM) :: IRET
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) # 40 "fdbsubs_mod.F90"
(   40) IF (LHOOK) CALL DR_HOOK('ICLOSEFDB',0,ZHOOK_HANDLE)
(   41) # 42 "fdbsubs_mod.F90"
(   42) IRET = ICLOSEFDB(KFDB)
(   43) IF(PRESENT(KRET)) THEN
(   44)   KRET = IRET
(   45) ELSEIF(IRET /= 0) THEN
(   46)   WRITE(0,*) 'ICLOSEFDB ',KFDB,' FAILED ',IRET
(   47)   CALL MPL_ABORT('ICLOSEFDB FAILED')
(   48) ENDIF
(   49) # 50 "fdbsubs_mod.F90"
(   50) IF (LHOOK) CALL DR_HOOK('ICLOSEFDB',1,ZHOOK_HANDLE)
(   51) END SUBROUTINE ICLOSEFDBSUBS
(   52) # 53 "fdbsubs_mod.F90"
(   53) SUBROUTINE IFLUSHFDBSUBS(KFDB,KRET)
(   54) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(   55) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(   56) # 57 "fdbsubs_mod.F90"
(   57) INTEGER(KIND=JPIM) :: IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 7

(   58) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   59) # 60 "fdbsubs_mod.F90"
(   60) IF (LHOOK) CALL DR_HOOK('IFLUSHFDB',0,ZHOOK_HANDLE)
(   61) # 62 "fdbsubs_mod.F90"
(   62) IRET = IFLUSHFDB(KFDB)
(   63) IF(PRESENT(KRET)) THEN
(   64)   KRET = IRET
(   65) ELSEIF(IRET /= 0) THEN
(   66)   WRITE(0,*) 'IFLUSHFDB ',KFDB,' FAILED ',IRET
(   67)   CALL MPL_ABORT('IFLUSHFDB FAILED')
(   68) ENDIF
(   69) # 70 "fdbsubs_mod.F90"
(   70) IF (LHOOK) CALL DR_HOOK('IFLUSHFDB',1,ZHOOK_HANDLE)
(   71) END SUBROUTINE IFLUSHFDBSUBS
(   72) # 73 "fdbsubs_mod.F90"
(   73) SUBROUTINE IINITFDBSUBS(KRET)
(   74) INTEGER(KIND=JPIM),INTENT(OUT),OPTIONAL :: KRET
(   75) # 76 "fdbsubs_mod.F90"
(   76) INTEGER(KIND=JPIM) :: IRET
(   77) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   78) # 79 "fdbsubs_mod.F90"
(   79) IF (LHOOK) CALL DR_HOOK('IINITFDB',0,ZHOOK_HANDLE)
(   80) # 81 "fdbsubs_mod.F90"
(   81) IRET = IINITFDB()
(   82) IF(PRESENT(KRET)) THEN
(   83)   KRET = IRET
(   84) ELSEIF(IRET /= 0) THEN
(   85)   WRITE(0,*) 'IINITFDB FAILED ',IRET
(   86)   CALL MPL_ABORT('IINITDFB FAILED')
(   87) ENDIF
(   88) # 89 "fdbsubs_mod.F90"
(   89) IF (LHOOK) CALL DR_HOOK('IINITFDB',1,ZHOOK_HANDLE)
(   90) END SUBROUTINE IINITFDBSUBS
(   91) # 92 "fdbsubs_mod.F90"
(   92) SUBROUTINE IOPENFDBSUBS(CDFDB,KFDB,CDMODE,KRET)
(   93) CHARACTER(LEN=*),             INTENT(IN)    :: CDFDB, CDMODE
(   94) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(   95) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(   96) # 97 "fdbsubs_mod.F90"
(   97) INTEGER(KIND=JPIM) :: IRET
(   98) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   99) # 100 "fdbsubs_mod.F90"
(  100) IF (LHOOK) CALL DR_HOOK('IOPENFDB',0,ZHOOK_HANDLE)
(  101) # 102 "fdbsubs_mod.F90"
(  102) IRET = IOPENFDB(CDFDB,KFDB,CDMODE)
(  103) IF(PRESENT(KRET)) THEN
(  104)   KRET = IRET
(  105) ELSEIF(IRET /= 0) THEN
(  106)   WRITE(0,*) 'IOPENFDB ',KFDB, ' CDFDB ',CDFDB,' CDMODE ',CDMODE,' FAILED ',IRET
(  107)   CALL MPL_ABORT('IOPENFDB FAILED')
(  108) ENDIF
(  109) IF (LHOOK) CALL DR_HOOK('IOPENFDB',1,ZHOOK_HANDLE)
(  110) # 111 "fdbsubs_mod.F90"
(  111) END SUBROUTINE IOPENFDBSUBS
(  112) # 113 "fdbsubs_mod.F90"
(  113) SUBROUTINE IREADFDBSUBS(KFDB,KGRIB,KLEN,KRET)
(  114) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB, KLEN, KGRIB(:)
(  115) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 8

(  116) # 117 "fdbsubs_mod.F90"
(  117) INTEGER(KIND=JPIM) :: IRET
(  118) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  119) # 120 "fdbsubs_mod.F90"
(  120) IF (LHOOK) CALL DR_HOOK('IREADFDB',0,ZHOOK_HANDLE)
(  121) # 122 "fdbsubs_mod.F90"
(  122) IF (SIZE(KGRIB) > 0) THEN
(  123)   IRET = IREADFDB(KFDB,KGRIB(1),KLEN)
(  124) ELSE
(  125)   IRET = IREADFDB(KFDB,KGRIB,KLEN)
(  126) ENDIF
(  127) IF(PRESENT(KRET)) THEN
(  128)   KRET = IRET
(  129) ELSEIF(IRET /= 0) THEN
(  130)   WRITE(0,*) 'IREADFDB ',KFDB,' KLEN ',KLEN,' FAILED ',IRET
(  131)   CALL MPL_ABORT('IREADFDB FAILED')
(  132) ENDIF
(  133) # 134 "fdbsubs_mod.F90"
(  134) IF (LHOOK) CALL DR_HOOK('IREADFDB',1,ZHOOK_HANDLE)
(  135) END SUBROUTINE IREADFDBSUBS
(  136) # 137 "fdbsubs_mod.F90"
(  137) SUBROUTINE ISETCOMMFDBSUBS(KCOMM,KRET)
(  138) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KCOMM
(  139) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  140) # 141 "fdbsubs_mod.F90"
(  141) INTEGER(KIND=JPIM) :: IRET
(  142) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  143) # 144 "fdbsubs_mod.F90"
(  144) IF (LHOOK) CALL DR_HOOK('ISETCOMMFDB',0,ZHOOK_HANDLE)
(  145) # 146 "fdbsubs_mod.F90"
(  146) IRET = ISETCOMMFDB(KCOMM)
(  147) IF(PRESENT(KRET)) THEN
(  148)   KRET = IRET
(  149) ELSEIF(IRET /= 0) THEN
(  150)   WRITE(0,*) 'ISETCOMMFDB ',KCOMM,' FAILED ',IRET
(  151)   CALL MPL_ABORT('ISETCOMMFDB FAILED')
(  152) ENDIF
(  153) # 154 "fdbsubs_mod.F90"
(  154) IF (LHOOK) CALL DR_HOOK('ISETCOMMFDB',1,ZHOOK_HANDLE)
(  155) END SUBROUTINE ISETCOMMFDBSUBS
(  156) # 157 "fdbsubs_mod.F90"
(  157) SUBROUTINE ISETFIELDCOUNTFDBSUBS(KFDB,KGLOBAL,KLOCAL,KRET)
(  158) INTEGER(KIND=JPIM),INTENT(INOUT)          :: KFDB
(  159) INTEGER(KIND=JPIM),INTENT(IN)             :: KGLOBAL,KLOCAL
(  160) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: KRET
(  161) # 162 "fdbsubs_mod.F90"
(  162) INTEGER(KIND=JPIM) :: IRET
(  163) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  164) # 165 "fdbsubs_mod.F90"
(  165) IF (LHOOK) CALL DR_HOOK('ISETFIELDCOUNTFDB',0,ZHOOK_HANDLE)
(  166) # 167 "fdbsubs_mod.F90"
(  167) IRET = ISETFIELDCOUNTFDB(KFDB,KGLOBAL,KLOCAL)
(  168) IF(PRESENT(KRET)) THEN
(  169)   KRET = IRET
(  170) ELSEIF(IRET /= 0) THEN
(  171)   WRITE(0,*) 'ISETFIELDCOUNTFDB ',KFDB,' KGLOBAL ',KGLOBAL,' KLOCAL ',KLOCAL,' FAILED ',IRET
(  172)   CALL MPL_ABORT('ISETFIELDCOUNTFDB FAILED')
(  173) ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 9

(  174) # 175 "fdbsubs_mod.F90"
(  175) IF (LHOOK) CALL DR_HOOK('ISETFIELDCOUNTFDB',1,ZHOOK_HANDLE)
(  176) END SUBROUTINE ISETFIELDCOUNTFDBSUBS
(  177) # 178 "fdbsubs_mod.F90"
(  178) SUBROUTINE ISETRANKFDBSUBS(KFDB,KLEV,KRET)
(  179) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB, KLEV
(  180) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  181) # 182 "fdbsubs_mod.F90"
(  182) INTEGER(KIND=JPIM) :: IRET
(  183) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  184) # 185 "fdbsubs_mod.F90"
(  185) IF (LHOOK) CALL DR_HOOK('ISETRANKFDB',0,ZHOOK_HANDLE)
(  186) # 187 "fdbsubs_mod.F90"
(  187) IRET = ISETRANKFDB(KFDB,KLEV)
(  188) IF(PRESENT(KRET)) THEN
(  189)   KRET = IRET
(  190) ELSEIF(IRET /= 0) THEN
(  191)   WRITE(0,*) 'ISETRANKFDB ',KFDB,' KLEV ',KLEV,' FAILED ',IRET
(  192)   CALL MPL_ABORT('ISETRANKFDB FAILED')
(  193) ENDIF
(  194) # 195 "fdbsubs_mod.F90"
(  195) IF (LHOOK) CALL DR_HOOK('ISETRANKFDB',1,ZHOOK_HANDLE)
(  196) END SUBROUTINE ISETRANKFDBSUBS
(  197) # 198 "fdbsubs_mod.F90"
(  198) SUBROUTINE ISETVALFDBSUBS(KFDB,CDNAME,CDKIND,KRET)
(  199) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(  200) CHARACTER(LEN=*),             INTENT(IN)    :: CDNAME, CDKIND
(  201) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  202) # 203 "fdbsubs_mod.F90"
(  203) INTEGER(KIND=JPIM) :: IRET
(  204) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  205) # 206 "fdbsubs_mod.F90"
(  206) IF (LHOOK) CALL DR_HOOK('ISETVALFDB',0,ZHOOK_HANDLE)
(  207) # 208 "fdbsubs_mod.F90"
(  208) IRET = ISETVALFDB(KFDB,CDNAME,TRIM(CDKIND))
(  209) IF(PRESENT(KRET)) THEN
(  210)   KRET = IRET
(  211) ELSEIF(IRET /= 0) THEN
(  212)   WRITE(0,*) 'ISETVALFDB ',KFDB,' CDNAME ',CDNAME,' CDKIND ',TRIM(CDKIND),' FAILED ',IRET
(  213)   CALL MPL_ABORT('ISETVALFDB FAILED')
(  214) ENDIF
(  215) # 216 "fdbsubs_mod.F90"
(  216) IF (LHOOK) CALL DR_HOOK('ISETVALFDB',1,ZHOOK_HANDLE)
(  217) END SUBROUTINE ISETVALFDBSUBS
(  218) # 219 "fdbsubs_mod.F90"
(  219) SUBROUTINE ISET_FDBSUBS_ROOT(KFDB,CDNAME,KRET)
(  220) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB
(  221) CHARACTER(LEN=*),             INTENT(INOUT) :: CDNAME
(  222) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  223) # 224 "fdbsubs_mod.F90"
(  224) INTEGER(KIND=JPIM) :: IRET
(  225) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  226) # 227 "fdbsubs_mod.F90"
(  227) IF (LHOOK) CALL DR_HOOK('ISET_FDB_ROOT',0,ZHOOK_HANDLE)
(  228) # 229 "fdbsubs_mod.F90"
(  229) IRET = ISET_FDB_ROOT(KFDB,CDNAME)
(  230) IF(PRESENT(KRET)) THEN
(  231)   KRET = IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:44      page 10

(  232) ELSEIF(IRET /= 0) THEN
(  233)   WRITE(0,*) 'ISET_FDB_ROOT ',KFDB,' CDNAME ',CDNAME,' FAILED ',IRET
(  234)   CALL MPL_ABORT('ISET_FDB_ROOT FAILED')
(  235) ENDIF
(  236) # 237 "fdbsubs_mod.F90"
(  237) IF (LHOOK) CALL DR_HOOK('ISET_FDB_ROOT',1,ZHOOK_HANDLE)
(  238) END SUBROUTINE ISET_FDBSUBS_ROOT
(  239) # 240 "fdbsubs_mod.F90"
(  240) SUBROUTINE IWRITEFDBSUBS(KFDB,KGRIB,KLEN,KRET)
(  241) INTEGER(KIND=JPIM),           INTENT(INOUT) :: KFDB, KLEN, KGRIB(:)
(  242) INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT)   :: KRET
(  243) # 244 "fdbsubs_mod.F90"
(  244) INTEGER(KIND=JPIM) :: IRET
(  245) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  246) # 247 "fdbsubs_mod.F90"
(  247) IF (LHOOK) CALL DR_HOOK('IWRITEFDB',0,ZHOOK_HANDLE)
(  248) # 249 "fdbsubs_mod.F90"
(  249) IF (SIZE(KGRIB) > 0) THEN
(  250)   IRET = IWRITEFDB(KFDB, KGRIB(1), KLEN)
(  251) ELSE
(  252)   IRET = IWRITEFDB(KFDB, KGRIB, KLEN)
(  253) ENDIF
(  254) IF(PRESENT(KRET)) THEN
(  255)   KRET = IRET
(  256) ELSEIF(IRET /= 0) THEN
(  257)   WRITE(0,*) 'IWRITEFDB ',KFDB,' KLEN ', KLEN,' FAILED ',IRET
(  258)   CALL MPL_ABORT('IWRITEFDB FAILED')
(  259) ENDIF
(  260) # 261 "fdbsubs_mod.F90"
(  261) IF (LHOOK) CALL DR_HOOK('IWRITEFDB',1,ZHOOK_HANDLE)
(  262) END SUBROUTINE IWRITEFDBSUBS
(  263) # 264 "fdbsubs_mod.F90"
(  264) END MODULE FDBSUBS_MOD
