


NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: bytes_io_mod.F90

(    1) MODULE BYTES_IO_MOD !**** Interface to BYTES_IO
(    2) 
(    3) !     Purpose.
(    4) !     --------
(    5) !     Fortran 90 Interface to calling byte IO 
(    6) 
(    7) !     Author.
(    8) !     -------
(    9) !        W.Deconinck and M.Hamrud     ECMWF
(   10) 
(   11) !     Modifications.
(   12) !     --------------
(   13) !        Original: 2016-01-28
(   14) 
(   15) !     ------------------------------------------------------------------
(   16) 
(   17) USE PARKIND1 , ONLY : JPRD, JPIM, JPIB, JPRB, JPRM
(   18) USE YOMHOOK  , ONLY : LHOOK, DR_HOOK
(   19) USE MPL_MODULE, ONLY : MPL_ABORT
(   20) 
(   21) IMPLICIT NONE
(   22) 
(   23) PRIVATE :: JPRD, JPIM, JPIB, JPRB, JPRM
(   24) PRIVATE :: LHOOK, DR_HOOK
(   25) PRIVATE :: MPL_ABORT
(   26) 
(   27) PRIVATE
(   28) 
(   29) INTERFACE BYTES_IO_READ
(   30) MODULE PROCEDURE BYTES_IO_READ_JPIM_INT
(   31) MODULE PROCEDURE BYTES_IO_READ_JPIM_INT_ARRAY
(   32) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL4
(   33) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL4_ARRAY






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 2

(   34) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL8
(   35) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL8_ARRAY
(   36) MODULE PROCEDURE BYTES_IO_READ_JPIM_CHAR_ARRAY
(   37) 
(   38) MODULE PROCEDURE BYTES_IO_READ_JPIB_INT
(   39) MODULE PROCEDURE BYTES_IO_READ_JPIB_INT_ARRAY
(   40) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL4
(   41) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL4_ARRAY
(   42) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL8
(   43) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL8_ARRAY
(   44) MODULE PROCEDURE BYTES_IO_READ_JPIB_CHAR_ARRAY
(   45) END INTERFACE
(   46) 
(   47) INTERFACE BYTES_IO_WRITE
(   48) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_INT
(   49) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_INT_ARRAY
(   50) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL4
(   51) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL4_ARRAY
(   52) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL8
(   53) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL8_ARRAY
(   54) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_CHAR_ARRAY
(   55) 
(   56) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_INT
(   57) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_INT_ARRAY
(   58) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL4
(   59) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL4_ARRAY
(   60) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL8
(   61) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL8_ARRAY
(   62) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_CHAR_ARRAY
(   63) END INTERFACE
(   64) 
(   65) PUBLIC :: BYTES_IO_OPEN
(   66) PUBLIC :: BYTES_IO_CLOSE
(   67) PUBLIC :: BYTES_IO_WRITE
(   68) PUBLIC :: BYTES_IO_READ
(   69) PUBLIC :: BYTES_IO_SEEK
(   70) PUBLIC :: BYTES_IO_TELL
(   71) 
(   72) INTEGER, PARAMETER, PUBLIC :: JPBYTES_IO_SUCCESS=0
(   73) INTEGER, PARAMETER :: JPBYTES_IO_COULD_NOT_OPEN_FILE=-1
(   74) INTEGER, PARAMETER :: JPBYTES_IO_COULD_NOT_CLOSE_FILE=-1
(   75) INTEGER, PARAMETER :: JPBYTES_IO_INVALID_FILE_NAME=-2
(   76) INTEGER, PARAMETER :: JPBYTES_IO_INVALID_OPEN_MODE=-3
(   77) INTEGER, PARAMETER :: JPBYTES_IO_END_OF_FILE=-1
(   78) INTEGER, PARAMETER :: JPBYTES_IO_SEEK_ERROR=-2
(   79) INTEGER, PARAMETER :: JPBYTES_IO_READ_JPIM_ERROR=-2
(   80) INTEGER, PARAMETER :: JPBYTES_IO_WRITE_JPIM_ERROR=-1
(   81) 
(   82) CONTAINS
(   83) 
(   84) 
(   85) SUBROUTINE BYTES_IO_OPEN(KFILE,CDPATH,CDMODE,KRET)
(   86) INTEGER(KIND=JPIM),INTENT(OUT)  :: KFILE
(   87) CHARACTER(LEN=*)  ,INTENT(IN)   :: CDPATH
(   88) CHARACTER(LEN=1)  ,INTENT(IN)   :: CDMODE
(   89) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(   90) INTEGER(KIND=JPIM) :: IRET
(   91) REAL(KIND=JPRB) :: ZHOOK_HANDLE






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 3

(   92) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_OPEN',0,ZHOOK_HANDLE)
(   93) CALL C_BYTES_IO_OPEN(KFILE,CDPATH,CDMODE,IRET)
(   94) IF(PRESENT(KRET)) THEN
(   95)   KRET = IRET
(   96) ELSEIF (IRET < JPBYTES_IO_SUCCESS) THEN
(   97)   WRITE(0,*) 'BYTES_IO ',TRIM(CDPATH),' FAILED',IRET
(   98)   CALL MPL_ABORT('BYTES_IO_OPEN FAILED')
(   99) ENDIF
(  100) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_OPEN',1,ZHOOK_HANDLE)
(  101) END SUBROUTINE BYTES_IO_OPEN
(  102) 
(  103) SUBROUTINE BYTES_IO_CLOSE(KFILE,KRET)
(  104) INTEGER(KIND=JPIM),INTENT(IN)  :: KFILE
(  105) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  106) INTEGER(KIND=JPIM) :: IRET
(  107) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  108) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_CLOSE',0,ZHOOK_HANDLE)
(  109) CALL C_BYTES_IO_CLOSE(KFILE,IRET)
(  110) IF(PRESENT(KRET)) THEN
(  111)   KRET = IRET
(  112) ELSEIF (IRET < JPBYTES_IO_SUCCESS) THEN
(  113)   WRITE(0,*) 'BYTES_IO_CLOSE ',KFILE,' FAILED',IRET
(  114)   CALL MPL_ABORT('BYTES_IO_CLOSE FAILED')
(  115) ENDIF
(  116) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_CLOSE',1,ZHOOK_HANDLE)
(  117) END SUBROUTINE BYTES_IO_CLOSE
(  118) 
(  119) 
(  120) SUBROUTINE BYTES_IO_SEEK(KFILE,KOFFSET,KWHENCE,KRET)
(  121) INTEGER(KIND=JPIM),INTENT(IN) :: KFILE
(  122) INTEGER(KIND=JPIM),INTENT(IN) :: KOFFSET 
(  123) INTEGER(KIND=JPIM),INTENT(IN) :: KWHENCE
(  124) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  125) INTEGER(KIND=JPIM) :: IRET
(  126) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  127) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_SEEK',0,ZHOOK_HANDLE)
(  128) CALL C_BYTES_IO_SEEK(KFILE,KOFFSET,KWHENCE,IRET)
(  129) IF(PRESENT(KRET)) THEN
(  130)   KRET=IRET
(  131) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  132)   WRITE(0,*) 'BYTES_IO_SEEK ',KFILE,' FAILED',IRET
(  133)   CALL MPL_ABORT('BYTES_IO_SEEK FAILED')
(  134) ENDIF
(  135) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_SEEK',1,ZHOOK_HANDLE)
(  136) END SUBROUTINE BYTES_IO_SEEK
(  137) 
(  138) 
(  139) SUBROUTINE BYTES_IO_TELL(KFILE,KRET)
(  140) INTEGER(KIND=JPIM),INTENT(IN) :: KFILE
(  141) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  142) INTEGER(KIND=JPIM) :: IRET
(  143) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  144) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_SEEK',0,ZHOOK_HANDLE)
(  145) CALL C_BYTES_IO_TELL(KFILE,IRET)
(  146) IF(PRESENT(KRET)) THEN
(  147)   KRET=IRET
(  148) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  149)   WRITE(0,*) 'BYTES_IO_TELL ',KFILE,' FAILED',IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 4

(  150)   CALL MPL_ABORT('BYTES_IO_TELL FAILED')
(  151) ENDIF
(  152) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_TELL',1,ZHOOK_HANDLE)
(  153) END SUBROUTINE BYTES_IO_TELL
(  154) 
(  155) ! ============================================
(  156) ! BYTES_IO_READ_JPIM
(  157) 
(  158) SUBROUTINE BYTES_IO_READ_JPIM_INT(KFILE,KBUF,KBYTES,KRET)
(  159) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  160) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF
(  161) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  162) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  163) INTEGER(KIND=JPIM) :: IRET,ILEN
(  164) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  165) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT',0,ZHOOK_HANDLE)
(  166) CALL C_BYTES_IO_READ(KFILE,KBUF,KBYTES,IRET)
(  167) IF(PRESENT(KRET)) THEN
(  168)   KRET=IRET
(  169) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  170)   WRITE(0,*) 'BYTES_IO_READ_JPIM_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  171)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_INT FAILED')
(  172) ENDIF
(  173) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT',1,ZHOOK_HANDLE)
(  174) END SUBROUTINE BYTES_IO_READ_JPIM_INT
(  175) 
(  176) SUBROUTINE BYTES_IO_READ_JPIM_INT_ARRAY(KFILE,KBUF,KBYTES,KRET)
(  177) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  178) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  179) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  180) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  181) INTEGER(KIND=JPIM) :: IRET,ILEN
(  182) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  183) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT_ARRAY',0,ZHOOK_HANDLE)
(  184) CALL C_BYTES_IO_READ(KFILE,KBUF,KBYTES,IRET)
(  185) IF(PRESENT(KRET)) THEN
(  186)   KRET=IRET
(  187) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  188)   WRITE(0,*) 'BYTES_IO_READ_JPIM_INT_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  189)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_INT_ARRAY FAILED')
(  190) ENDIF
(  191) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT_ARRAY',1,ZHOOK_HANDLE)
(  192) END SUBROUTINE BYTES_IO_READ_JPIM_INT_ARRAY
(  193) 
(  194) SUBROUTINE BYTES_IO_READ_JPIM_REAL4(KFILE,PBUF,KBYTES,KRET)
(  195) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  196) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF
(  197) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  198) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  199) INTEGER(KIND=JPIM) :: IRET,ILEN
(  200) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  201) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4',0,ZHOOK_HANDLE)
(  202) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  203) IF(PRESENT(KRET)) THEN
(  204)   KRET=IRET
(  205) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  206)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  207)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL4 FAILED')






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 5

(  208) ENDIF
(  209) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4',1,ZHOOK_HANDLE)
(  210) END SUBROUTINE BYTES_IO_READ_JPIM_REAL4
(  211) 
(  212) SUBROUTINE BYTES_IO_READ_JPIM_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  213) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  214) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF(:)
(  215) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  216) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  217) INTEGER(KIND=JPIM) :: IRET,ILEN
(  218) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  219) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  220) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  221) IF(PRESENT(KRET)) THEN
(  222)   KRET=IRET
(  223) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  224)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  225)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL4_ARRAY FAILED')
(  226) ENDIF
(  227) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  228) END SUBROUTINE BYTES_IO_READ_JPIM_REAL4_ARRAY
(  229) 
(  230) SUBROUTINE BYTES_IO_READ_JPIM_REAL8(KFILE,PBUF,KBYTES,KRET)
(  231) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  232) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF
(  233) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  234) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  235) INTEGER(KIND=JPIM) :: IRET,ILEN
(  236) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  237) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8',0,ZHOOK_HANDLE)
(  238) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  239) IF(PRESENT(KRET)) THEN
(  240)   KRET=IRET
(  241) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  242)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  243)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL8 FAILED')
(  244) ENDIF
(  245) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8',1,ZHOOK_HANDLE)
(  246) END SUBROUTINE BYTES_IO_READ_JPIM_REAL8
(  247) 
(  248) SUBROUTINE BYTES_IO_READ_JPIM_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  249) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  250) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF(:)
(  251) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  252) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  253) INTEGER(KIND=JPIM) :: IRET,ILEN
(  254) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  255) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  256) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  257) IF(PRESENT(KRET)) THEN
(  258)   KRET=IRET
(  259) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  260)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  261)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL8_ARRAY FAILED')
(  262) ENDIF
(  263) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  264) END SUBROUTINE BYTES_IO_READ_JPIM_REAL8_ARRAY
(  265) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 6

(  266) SUBROUTINE BYTES_IO_READ_JPIM_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  267) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  268) CHARACTER(LEN=1)  ,INTENT(OUT)   :: CDBUF(:)
(  269) INTEGER(KIND=JPIM),INTENT(INOUT) :: KBYTES
(  270) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  271) INTEGER(KIND=JPIM) :: IRET,ILEN
(  272) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  273) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  274) CALL C_BYTES_IO_READ(KFILE,CDBUF,KBYTES,IRET)
(  275) IF(PRESENT(KRET)) THEN
(  276)   KRET=IRET
(  277) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  278)   WRITE(0,*) 'BYTES_IO_READ_JPIM_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  279)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_CHAR_ARRAY FAILED')
(  280) ENDIF
(  281) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  282) END SUBROUTINE BYTES_IO_READ_JPIM_CHAR_ARRAY
(  283) 
(  284) 
(  285) ! ============================================
(  286) ! BYTES_IO_WRITE_JPIM
(  287) 
(  288) SUBROUTINE BYTES_IO_WRITE_JPIM_INT(KFILE,PBUF,KBYTES,KRET)
(  289) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  290) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF
(  291) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  292) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  293) INTEGER(KIND=JPIM) :: IRET
(  294) INTEGER(KIND=JPIM) :: ILEN
(  295) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  296) 
(  297) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',0,ZHOOK_HANDLE)
(  298) 
(  299) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  300) IF(PRESENT(KRET)) THEN
(  301)   KRET=IRET
(  302) ENDIF
(  303) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  304)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  305)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_INT FAILED')
(  306) ENDIF
(  307) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',1,ZHOOK_HANDLE)
(  308) END SUBROUTINE BYTES_IO_WRITE_JPIM_INT
(  309) 
(  310) SUBROUTINE BYTES_IO_WRITE_JPIM_INT_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  311) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  312) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF(:)
(  313) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  314) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  315) INTEGER(KIND=JPIM) :: IRET
(  316) INTEGER(KIND=JPIM) :: ILEN
(  317) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  318) 
(  319) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',0,ZHOOK_HANDLE)
(  320) 
(  321) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  322) IF(PRESENT(KRET)) THEN
(  323)   KRET=IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 7

(  324) ENDIF
(  325) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  326)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  327)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_INT FAILED')
(  328) ENDIF
(  329) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',1,ZHOOK_HANDLE)
(  330) END SUBROUTINE BYTES_IO_WRITE_JPIM_INT_ARRAY
(  331) 
(  332) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4(KFILE,PBUF,KBYTES,KRET)
(  333) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  334) REAL(KIND=JPRM),INTENT(IN)    :: PBUF
(  335) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  336) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  337) INTEGER(KIND=JPIM) :: IRET
(  338) INTEGER(KIND=JPIM) :: ILEN
(  339) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  340) 
(  341) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4',0,ZHOOK_HANDLE)
(  342) 
(  343) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  344) IF(PRESENT(KRET)) THEN
(  345)   KRET=IRET
(  346) ENDIF
(  347) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  348)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  349)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL4 FAILED')
(  350) ENDIF
(  351) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4',1,ZHOOK_HANDLE)
(  352) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4
(  353) 
(  354) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  355) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  356) REAL(KIND=JPRM),INTENT(IN)       :: PBUF(:)
(  357) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  358) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  359) INTEGER(KIND=JPIM) :: IRET
(  360) INTEGER(KIND=JPIM) :: ILEN
(  361) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  362) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  363) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  364) IF(PRESENT(KRET)) THEN
(  365)   KRET=IRET
(  366) ENDIF
(  367) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  368)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  369)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL4_ARRAY FAILED')
(  370) ENDIF
(  371) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  372) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4_ARRAY
(  373) 
(  374) 
(  375) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8(KFILE,PBUF,KBYTES,KRET)
(  376) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  377) REAL(KIND=JPRD),INTENT(IN)    :: PBUF
(  378) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  379) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  380) INTEGER(KIND=JPIM) :: IRET
(  381) INTEGER(KIND=JPIM) :: ILEN






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 8

(  382) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  383) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8',0,ZHOOK_HANDLE)
(  384) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  385) IF(PRESENT(KRET)) THEN
(  386)   KRET=IRET
(  387) ENDIF
(  388) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  389)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  390)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL8 FAILED')
(  391) ENDIF
(  392) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8',1,ZHOOK_HANDLE)
(  393) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8
(  394) 
(  395) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  396) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  397) REAL(KIND=JPRD),INTENT(IN)       :: PBUF(:)
(  398) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  399) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  400) INTEGER(KIND=JPIM) :: IRET
(  401) INTEGER(KIND=JPIM) :: ILEN
(  402) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  403) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  404) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  405) IF(PRESENT(KRET)) THEN
(  406)   KRET=IRET
(  407) ENDIF
(  408) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  409)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  410)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL8_ARRAY FAILED')
(  411) ENDIF
(  412) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  413) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8_ARRAY
(  414) 
(  415) SUBROUTINE BYTES_IO_WRITE_JPIM_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  416) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  417) CHARACTER(LEN=1)  ,INTENT(IN)    :: CDBUF(:)
(  418) INTEGER(KIND=JPIM),INTENT(INOUT) :: KBYTES
(  419) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  420) INTEGER(KIND=JPIM) :: IRET
(  421) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  422) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  423) CALL C_BYTES_IO_WRITE(KFILE,CDBUF,KBYTES,IRET)
(  424) IF(PRESENT(KRET)) THEN
(  425)   KRET=IRET
(  426) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  427)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  428)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_CHAR_ARRAY FAILED')
(  429) ENDIF
(  430) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  431) END SUBROUTINE BYTES_IO_WRITE_JPIM_CHAR_ARRAY
(  432) 
(  433) ! ============================================
(  434) ! BYTES_IO_READ_JPIB
(  435) 
(  436) SUBROUTINE BYTES_IO_READ_JPIB_INT(KFILE,KBUF,KBYTES,KRET)
(  437) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  438) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF
(  439) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 9

(  440) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  441) INTEGER(KIND=JPIM) :: IRET,ILEN
(  442) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  443) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT',0,ZHOOK_HANDLE)
(  444) CALL C_BYTES_IO_READ(KFILE,KBUF,INT(KBYTES,JPIM),IRET)
(  445) IF(PRESENT(KRET)) THEN
(  446)   KRET=IRET
(  447) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  448)   WRITE(0,*) 'BYTES_IO_READ_JPIB_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  449)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_INT FAILED')
(  450) ENDIF
(  451) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT',1,ZHOOK_HANDLE)
(  452) END SUBROUTINE BYTES_IO_READ_JPIB_INT
(  453) 
(  454) SUBROUTINE BYTES_IO_READ_JPIB_INT_ARRAY(KFILE,KBUF,KBYTES,KRET)
(  455) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  456) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  457) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  458) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  459) INTEGER(KIND=JPIM) :: IRET,ILEN
(  460) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  461) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT_ARRAY',0,ZHOOK_HANDLE)
(  462) CALL C_BYTES_IO_READ(KFILE,KBUF,INT(KBYTES,JPIM),IRET)
(  463) IF(PRESENT(KRET)) THEN
(  464)   KRET=IRET
(  465) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  466)   WRITE(0,*) 'BYTES_IO_READ_JPIB_INT_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  467)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_INT_ARRAY FAILED')
(  468) ENDIF
(  469) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT_ARRAY',1,ZHOOK_HANDLE)
(  470) END SUBROUTINE BYTES_IO_READ_JPIB_INT_ARRAY
(  471) 
(  472) SUBROUTINE BYTES_IO_READ_JPIB_REAL4(KFILE,PBUF,KBYTES,KRET)
(  473) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  474) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF
(  475) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  476) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  477) INTEGER(KIND=JPIM) :: IRET,ILEN
(  478) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  479) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4',0,ZHOOK_HANDLE)
(  480) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  481) IF(PRESENT(KRET)) THEN
(  482)   KRET=IRET
(  483) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  484)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  485)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL4 FAILED')
(  486) ENDIF
(  487) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4',1,ZHOOK_HANDLE)
(  488) END SUBROUTINE BYTES_IO_READ_JPIB_REAL4
(  489) 
(  490) SUBROUTINE BYTES_IO_READ_JPIB_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  491) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  492) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF(:)
(  493) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  494) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  495) INTEGER(KIND=JPIM) :: IRET,ILEN
(  496) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  497) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4_ARRAY',0,ZHOOK_HANDLE)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 10

(  498) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  499) IF(PRESENT(KRET)) THEN
(  500)   KRET=IRET
(  501) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  502)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  503)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL4_ARRAY FAILED')
(  504) ENDIF
(  505) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  506) END SUBROUTINE BYTES_IO_READ_JPIB_REAL4_ARRAY
(  507) 
(  508) SUBROUTINE BYTES_IO_READ_JPIB_REAL8(KFILE,PBUF,KBYTES,KRET)
(  509) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  510) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF
(  511) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  512) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  513) INTEGER(KIND=JPIM) :: IRET,ILEN
(  514) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  515) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8',0,ZHOOK_HANDLE)
(  516) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  517) IF(PRESENT(KRET)) THEN
(  518)   KRET=IRET
(  519) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  520)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  521)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL8 FAILED')
(  522) ENDIF
(  523) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8',1,ZHOOK_HANDLE)
(  524) END SUBROUTINE BYTES_IO_READ_JPIB_REAL8
(  525) 
(  526) SUBROUTINE BYTES_IO_READ_JPIB_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  527) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  528) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF(:)
(  529) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  530) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  531) INTEGER(KIND=JPIM) :: IRET,ILEN
(  532) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  533) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  534) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  535) IF(PRESENT(KRET)) THEN
(  536)   KRET=IRET
(  537) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  538)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  539)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL8_ARRAY FAILED')
(  540) ENDIF
(  541) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  542) END SUBROUTINE BYTES_IO_READ_JPIB_REAL8_ARRAY
(  543) 
(  544) SUBROUTINE BYTES_IO_READ_JPIB_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  545) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  546) CHARACTER(LEN=1)  ,INTENT(OUT)   :: CDBUF(:)
(  547) INTEGER(KIND=JPIB),INTENT(IN) :: KBYTES
(  548) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  549) INTEGER(KIND=JPIM) :: IRET,ILEN
(  550) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  551) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  552) CALL C_BYTES_IO_READ(KFILE,CDBUF,INT(KBYTES,JPIM),IRET)
(  553) IF(PRESENT(KRET)) THEN
(  554)   KRET=IRET
(  555) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 11

(  556)   WRITE(0,*) 'BYTES_IO_READ_JPIB_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  557)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_CHAR_ARRAY FAILED')
(  558) ENDIF
(  559) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  560) END SUBROUTINE BYTES_IO_READ_JPIB_CHAR_ARRAY
(  561) 
(  562) 
(  563) ! ============================================
(  564) ! BYTES_IO_WRITE_JPIB
(  565) 
(  566) SUBROUTINE BYTES_IO_WRITE_JPIB_INT(KFILE,PBUF,KBYTES,KRET)
(  567) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  568) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF
(  569) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  570) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  571) INTEGER(KIND=JPIM) :: IRET
(  572) INTEGER(KIND=JPIM) :: ILEN
(  573) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  574) 
(  575) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',0,ZHOOK_HANDLE)
(  576) 
(  577) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  578) IF(PRESENT(KRET)) THEN
(  579)   KRET=IRET
(  580) ENDIF
(  581) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  582)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  583)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_INT FAILED')
(  584) ENDIF
(  585) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',1,ZHOOK_HANDLE)
(  586) END SUBROUTINE BYTES_IO_WRITE_JPIB_INT
(  587) 
(  588) SUBROUTINE BYTES_IO_WRITE_JPIB_INT_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  589) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  590) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF(:)
(  591) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  592) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  593) INTEGER(KIND=JPIM) :: IRET
(  594) INTEGER(KIND=JPIM) :: ILEN
(  595) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  596) 
(  597) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',0,ZHOOK_HANDLE)
(  598) 
(  599) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  600) IF(PRESENT(KRET)) THEN
(  601)   KRET=IRET
(  602) ENDIF
(  603) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  604)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  605)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_INT FAILED')
(  606) ENDIF
(  607) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',1,ZHOOK_HANDLE)
(  608) END SUBROUTINE BYTES_IO_WRITE_JPIB_INT_ARRAY
(  609) 
(  610) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4(KFILE,PBUF,KBYTES,KRET)
(  611) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  612) REAL(KIND=JPRM),INTENT(IN)    :: PBUF
(  613) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 12

(  614) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  615) INTEGER(KIND=JPIM) :: IRET
(  616) INTEGER(KIND=JPIM) :: ILEN
(  617) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  618) 
(  619) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4',0,ZHOOK_HANDLE)
(  620) 
(  621) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  622) IF(PRESENT(KRET)) THEN
(  623)   KRET=IRET
(  624) ENDIF
(  625) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  626)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  627)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL4 FAILED')
(  628) ENDIF
(  629) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4',1,ZHOOK_HANDLE)
(  630) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4
(  631) 
(  632) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  633) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  634) REAL(KIND=JPRM),INTENT(IN)       :: PBUF(:)
(  635) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  636) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  637) INTEGER(KIND=JPIM) :: IRET
(  638) INTEGER(KIND=JPIM) :: ILEN
(  639) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  640) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  641) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  642) IF(PRESENT(KRET)) THEN
(  643)   KRET=IRET
(  644) ENDIF
(  645) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  646)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  647)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL4_ARRAY FAILED')
(  648) ENDIF
(  649) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  650) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4_ARRAY
(  651) 
(  652) 
(  653) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8(KFILE,PBUF,KBYTES,KRET)
(  654) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  655) REAL(KIND=JPRD),INTENT(IN)    :: PBUF
(  656) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  657) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  658) INTEGER(KIND=JPIM) :: IRET
(  659) INTEGER(KIND=JPIM) :: ILEN
(  660) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  661) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8',0,ZHOOK_HANDLE)
(  662) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  663) IF(PRESENT(KRET)) THEN
(  664)   KRET=IRET
(  665) ENDIF
(  666) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  667)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  668)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL8 FAILED')
(  669) ENDIF
(  670) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8',1,ZHOOK_HANDLE)
(  671) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 13

(  672) 
(  673) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  674) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  675) REAL(KIND=JPRD),INTENT(IN)       :: PBUF(:)
(  676) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  677) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  678) INTEGER(KIND=JPIM) :: IRET
(  679) INTEGER(KIND=JPIM) :: ILEN
(  680) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  681) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  682) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  683) IF(PRESENT(KRET)) THEN
(  684)   KRET=IRET
(  685) ENDIF
(  686) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  687)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  688)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL8_ARRAY FAILED')
(  689) ENDIF
(  690) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  691) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8_ARRAY
(  692) 
(  693) SUBROUTINE BYTES_IO_WRITE_JPIB_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  694) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  695) CHARACTER(LEN=1)  ,INTENT(IN)    :: CDBUF(:)
(  696) INTEGER(KIND=JPIB),INTENT(IN) :: KBYTES
(  697) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  698) INTEGER(KIND=JPIM) :: IRET
(  699) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  700) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  701) CALL C_BYTES_IO_WRITE(KFILE,CDBUF,INT(KBYTES,JPIM),IRET)
(  702) IF(PRESENT(KRET)) THEN
(  703)   KRET=IRET
(  704) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  705)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  706)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_CHAR_ARRAY FAILED')
(  707) ENDIF
(  708) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  709) END SUBROUTINE BYTES_IO_WRITE_JPIB_CHAR_ARRAY
(  710) 
(  711) END MODULE BYTES_IO_MOD
























NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 14

(    1) # 1 "bytes_io_mod.F90"
(    1) MODULE BYTES_IO_MOD !**** Interface to BYTES_IO
(    2) # 3 "bytes_io_mod.F90"
(    3) !     Purpose.
(    4) !     --------
(    5) !     Fortran 90 Interface to calling byte IO 
(    6) # 7 "bytes_io_mod.F90"
(    7) !     Author.
(    8) !     -------
(    9) !        W.Deconinck and M.Hamrud     ECMWF
(   10) # 11 "bytes_io_mod.F90"
(   11) !     Modifications.
(   12) !     --------------
(   13) !        Original: 2016-01-28
(   14) # 15 "bytes_io_mod.F90"
(   15) !     ------------------------------------------------------------------
(   16) # 17 "bytes_io_mod.F90"
(   17) USE PARKIND1 , ONLY : JPRD, JPIM, JPIB, JPRB, JPRM
(   18) USE YOMHOOK  , ONLY : LHOOK, DR_HOOK
(   19) USE MPL_MODULE, ONLY : MPL_ABORT
(   20) # 21 "bytes_io_mod.F90"
(   21) IMPLICIT NONE
(   22) # 23 "bytes_io_mod.F90"
(   23) PRIVATE :: JPRD, JPIM, JPIB, JPRB, JPRM
(   24) PRIVATE :: LHOOK, DR_HOOK
(   25) PRIVATE :: MPL_ABORT
(   26) # 27 "bytes_io_mod.F90"
(   27) PRIVATE
(   28) # 29 "bytes_io_mod.F90"
(   29) INTERFACE BYTES_IO_READ
(   30) MODULE PROCEDURE BYTES_IO_READ_JPIM_INT
(   31) MODULE PROCEDURE BYTES_IO_READ_JPIM_INT_ARRAY
(   32) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL4
(   33) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL4_ARRAY
(   34) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL8
(   35) MODULE PROCEDURE BYTES_IO_READ_JPIM_REAL8_ARRAY
(   36) MODULE PROCEDURE BYTES_IO_READ_JPIM_CHAR_ARRAY
(   37) # 38 "bytes_io_mod.F90"
(   38) MODULE PROCEDURE BYTES_IO_READ_JPIB_INT
(   39) MODULE PROCEDURE BYTES_IO_READ_JPIB_INT_ARRAY
(   40) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL4
(   41) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL4_ARRAY
(   42) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL8
(   43) MODULE PROCEDURE BYTES_IO_READ_JPIB_REAL8_ARRAY
(   44) MODULE PROCEDURE BYTES_IO_READ_JPIB_CHAR_ARRAY
(   45) END INTERFACE
(   46) # 47 "bytes_io_mod.F90"
(   47) INTERFACE BYTES_IO_WRITE
(   48) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_INT
(   49) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_INT_ARRAY
(   50) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL4
(   51) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL4_ARRAY
(   52) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL8
(   53) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_REAL8_ARRAY
(   54) MODULE PROCEDURE BYTES_IO_WRITE_JPIM_CHAR_ARRAY
(   55) # 56 "bytes_io_mod.F90"
(   56) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_INT
(   57) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_INT_ARRAY






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 15

(   58) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL4
(   59) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL4_ARRAY
(   60) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL8
(   61) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_REAL8_ARRAY
(   62) MODULE PROCEDURE BYTES_IO_WRITE_JPIB_CHAR_ARRAY
(   63) END INTERFACE
(   64) # 65 "bytes_io_mod.F90"
(   65) PUBLIC :: BYTES_IO_OPEN
(   66) PUBLIC :: BYTES_IO_CLOSE
(   67) PUBLIC :: BYTES_IO_WRITE
(   68) PUBLIC :: BYTES_IO_READ
(   69) PUBLIC :: BYTES_IO_SEEK
(   70) PUBLIC :: BYTES_IO_TELL
(   71) # 72 "bytes_io_mod.F90"
(   72) INTEGER, PARAMETER, PUBLIC :: JPBYTES_IO_SUCCESS=0
(   73) INTEGER, PARAMETER :: JPBYTES_IO_COULD_NOT_OPEN_FILE=-1
(   74) INTEGER, PARAMETER :: JPBYTES_IO_COULD_NOT_CLOSE_FILE=-1
(   75) INTEGER, PARAMETER :: JPBYTES_IO_INVALID_FILE_NAME=-2
(   76) INTEGER, PARAMETER :: JPBYTES_IO_INVALID_OPEN_MODE=-3
(   77) INTEGER, PARAMETER :: JPBYTES_IO_END_OF_FILE=-1
(   78) INTEGER, PARAMETER :: JPBYTES_IO_SEEK_ERROR=-2
(   79) INTEGER, PARAMETER :: JPBYTES_IO_READ_JPIM_ERROR=-2
(   80) INTEGER, PARAMETER :: JPBYTES_IO_WRITE_JPIM_ERROR=-1
(   81) # 82 "bytes_io_mod.F90"
(   82) CONTAINS
(   83) # 85 "bytes_io_mod.F90"
(   85) SUBROUTINE BYTES_IO_OPEN(KFILE,CDPATH,CDMODE,KRET)
(   86) INTEGER(KIND=JPIM),INTENT(OUT)  :: KFILE
(   87) CHARACTER(LEN=*)  ,INTENT(IN)   :: CDPATH
(   88) CHARACTER(LEN=1)  ,INTENT(IN)   :: CDMODE
(   89) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(   90) INTEGER(KIND=JPIM) :: IRET
(   91) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   92) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_OPEN',0,ZHOOK_HANDLE)
(   93) CALL C_BYTES_IO_OPEN(KFILE,CDPATH,CDMODE,IRET)
(   94) IF(PRESENT(KRET)) THEN
(   95)   KRET = IRET
(   96) ELSEIF (IRET < JPBYTES_IO_SUCCESS) THEN
(   97)   WRITE(0,*) 'BYTES_IO ',TRIM(CDPATH),' FAILED',IRET
(   98)   CALL MPL_ABORT('BYTES_IO_OPEN FAILED')
(   99) ENDIF
(  100) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_OPEN',1,ZHOOK_HANDLE)
(  101) END SUBROUTINE BYTES_IO_OPEN
(  102) # 103 "bytes_io_mod.F90"
(  103) SUBROUTINE BYTES_IO_CLOSE(KFILE,KRET)
(  104) INTEGER(KIND=JPIM),INTENT(IN)  :: KFILE
(  105) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  106) INTEGER(KIND=JPIM) :: IRET
(  107) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  108) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_CLOSE',0,ZHOOK_HANDLE)
(  109) CALL C_BYTES_IO_CLOSE(KFILE,IRET)
(  110) IF(PRESENT(KRET)) THEN
(  111)   KRET = IRET
(  112) ELSEIF (IRET < JPBYTES_IO_SUCCESS) THEN
(  113)   WRITE(0,*) 'BYTES_IO_CLOSE ',KFILE,' FAILED',IRET
(  114)   CALL MPL_ABORT('BYTES_IO_CLOSE FAILED')
(  115) ENDIF
(  116) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_CLOSE',1,ZHOOK_HANDLE)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 16

(  117) END SUBROUTINE BYTES_IO_CLOSE
(  118) # 120 "bytes_io_mod.F90"
(  120) SUBROUTINE BYTES_IO_SEEK(KFILE,KOFFSET,KWHENCE,KRET)
(  121) INTEGER(KIND=JPIM),INTENT(IN) :: KFILE
(  122) INTEGER(KIND=JPIM),INTENT(IN) :: KOFFSET 
(  123) INTEGER(KIND=JPIM),INTENT(IN) :: KWHENCE
(  124) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  125) INTEGER(KIND=JPIM) :: IRET
(  126) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  127) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_SEEK',0,ZHOOK_HANDLE)
(  128) CALL C_BYTES_IO_SEEK(KFILE,KOFFSET,KWHENCE,IRET)
(  129) IF(PRESENT(KRET)) THEN
(  130)   KRET=IRET
(  131) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  132)   WRITE(0,*) 'BYTES_IO_SEEK ',KFILE,' FAILED',IRET
(  133)   CALL MPL_ABORT('BYTES_IO_SEEK FAILED')
(  134) ENDIF
(  135) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_SEEK',1,ZHOOK_HANDLE)
(  136) END SUBROUTINE BYTES_IO_SEEK
(  137) # 139 "bytes_io_mod.F90"
(  139) SUBROUTINE BYTES_IO_TELL(KFILE,KRET)
(  140) INTEGER(KIND=JPIM),INTENT(IN) :: KFILE
(  141) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  142) INTEGER(KIND=JPIM) :: IRET
(  143) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  144) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_SEEK',0,ZHOOK_HANDLE)
(  145) CALL C_BYTES_IO_TELL(KFILE,IRET)
(  146) IF(PRESENT(KRET)) THEN
(  147)   KRET=IRET
(  148) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  149)   WRITE(0,*) 'BYTES_IO_TELL ',KFILE,' FAILED',IRET
(  150)   CALL MPL_ABORT('BYTES_IO_TELL FAILED')
(  151) ENDIF
(  152) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_TELL',1,ZHOOK_HANDLE)
(  153) END SUBROUTINE BYTES_IO_TELL
(  154) # 155 "bytes_io_mod.F90"
(  155) ! ============================================
(  156) ! BYTES_IO_READ_JPIM
(  157) # 158 "bytes_io_mod.F90"
(  158) SUBROUTINE BYTES_IO_READ_JPIM_INT(KFILE,KBUF,KBYTES,KRET)
(  159) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  160) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF
(  161) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  162) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  163) INTEGER(KIND=JPIM) :: IRET,ILEN
(  164) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  165) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT',0,ZHOOK_HANDLE)
(  166) CALL C_BYTES_IO_READ(KFILE,KBUF,KBYTES,IRET)
(  167) IF(PRESENT(KRET)) THEN
(  168)   KRET=IRET
(  169) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  170)   WRITE(0,*) 'BYTES_IO_READ_JPIM_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  171)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_INT FAILED')
(  172) ENDIF
(  173) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT',1,ZHOOK_HANDLE)
(  174) END SUBROUTINE BYTES_IO_READ_JPIM_INT
(  175) # 176 "bytes_io_mod.F90"
(  176) SUBROUTINE BYTES_IO_READ_JPIM_INT_ARRAY(KFILE,KBUF,KBYTES,KRET)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 17

(  177) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  178) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  179) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  180) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  181) INTEGER(KIND=JPIM) :: IRET,ILEN
(  182) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  183) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT_ARRAY',0,ZHOOK_HANDLE)
(  184) CALL C_BYTES_IO_READ(KFILE,KBUF,KBYTES,IRET)
(  185) IF(PRESENT(KRET)) THEN
(  186)   KRET=IRET
(  187) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  188)   WRITE(0,*) 'BYTES_IO_READ_JPIM_INT_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  189)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_INT_ARRAY FAILED')
(  190) ENDIF
(  191) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_INT_ARRAY',1,ZHOOK_HANDLE)
(  192) END SUBROUTINE BYTES_IO_READ_JPIM_INT_ARRAY
(  193) # 194 "bytes_io_mod.F90"
(  194) SUBROUTINE BYTES_IO_READ_JPIM_REAL4(KFILE,PBUF,KBYTES,KRET)
(  195) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  196) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF
(  197) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  198) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  199) INTEGER(KIND=JPIM) :: IRET,ILEN
(  200) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  201) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4',0,ZHOOK_HANDLE)
(  202) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  203) IF(PRESENT(KRET)) THEN
(  204)   KRET=IRET
(  205) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  206)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  207)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL4 FAILED')
(  208) ENDIF
(  209) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4',1,ZHOOK_HANDLE)
(  210) END SUBROUTINE BYTES_IO_READ_JPIM_REAL4
(  211) # 212 "bytes_io_mod.F90"
(  212) SUBROUTINE BYTES_IO_READ_JPIM_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  213) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  214) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF(:)
(  215) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  216) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  217) INTEGER(KIND=JPIM) :: IRET,ILEN
(  218) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  219) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  220) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  221) IF(PRESENT(KRET)) THEN
(  222)   KRET=IRET
(  223) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  224)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  225)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL4_ARRAY FAILED')
(  226) ENDIF
(  227) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  228) END SUBROUTINE BYTES_IO_READ_JPIM_REAL4_ARRAY
(  229) # 230 "bytes_io_mod.F90"
(  230) SUBROUTINE BYTES_IO_READ_JPIM_REAL8(KFILE,PBUF,KBYTES,KRET)
(  231) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  232) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF
(  233) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  234) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 18

(  235) INTEGER(KIND=JPIM) :: IRET,ILEN
(  236) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  237) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8',0,ZHOOK_HANDLE)
(  238) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  239) IF(PRESENT(KRET)) THEN
(  240)   KRET=IRET
(  241) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  242)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  243)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL8 FAILED')
(  244) ENDIF
(  245) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8',1,ZHOOK_HANDLE)
(  246) END SUBROUTINE BYTES_IO_READ_JPIM_REAL8
(  247) # 248 "bytes_io_mod.F90"
(  248) SUBROUTINE BYTES_IO_READ_JPIM_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  249) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  250) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF(:)
(  251) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  252) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  253) INTEGER(KIND=JPIM) :: IRET,ILEN
(  254) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  255) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  256) CALL C_BYTES_IO_READ(KFILE,PBUF,KBYTES,IRET)
(  257) IF(PRESENT(KRET)) THEN
(  258)   KRET=IRET
(  259) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  260)   WRITE(0,*) 'BYTES_IO_READ_JPIM_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  261)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_REAL8_ARRAY FAILED')
(  262) ENDIF
(  263) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  264) END SUBROUTINE BYTES_IO_READ_JPIM_REAL8_ARRAY
(  265) # 266 "bytes_io_mod.F90"
(  266) SUBROUTINE BYTES_IO_READ_JPIM_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  267) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  268) CHARACTER(LEN=1)  ,INTENT(OUT)   :: CDBUF(:)
(  269) INTEGER(KIND=JPIM),INTENT(INOUT) :: KBYTES
(  270) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  271) INTEGER(KIND=JPIM) :: IRET,ILEN
(  272) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  273) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  274) CALL C_BYTES_IO_READ(KFILE,CDBUF,KBYTES,IRET)
(  275) IF(PRESENT(KRET)) THEN
(  276)   KRET=IRET
(  277) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  278)   WRITE(0,*) 'BYTES_IO_READ_JPIM_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  279)   CALL MPL_ABORT('BYTES_IO_READ_JPIM_CHAR_ARRAY FAILED')
(  280) ENDIF
(  281) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIM_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  282) END SUBROUTINE BYTES_IO_READ_JPIM_CHAR_ARRAY
(  283) # 285 "bytes_io_mod.F90"
(  285) ! ============================================
(  286) ! BYTES_IO_WRITE_JPIM
(  287) # 288 "bytes_io_mod.F90"
(  288) SUBROUTINE BYTES_IO_WRITE_JPIM_INT(KFILE,PBUF,KBYTES,KRET)
(  289) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  290) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF
(  291) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  292) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  293) INTEGER(KIND=JPIM) :: IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 19

(  294) INTEGER(KIND=JPIM) :: ILEN
(  295) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  296) # 297 "bytes_io_mod.F90"
(  297) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',0,ZHOOK_HANDLE)
(  298) # 299 "bytes_io_mod.F90"
(  299) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  300) IF(PRESENT(KRET)) THEN
(  301)   KRET=IRET
(  302) ENDIF
(  303) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  304)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  305)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_INT FAILED')
(  306) ENDIF
(  307) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',1,ZHOOK_HANDLE)
(  308) END SUBROUTINE BYTES_IO_WRITE_JPIM_INT
(  309) # 310 "bytes_io_mod.F90"
(  310) SUBROUTINE BYTES_IO_WRITE_JPIM_INT_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  311) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  312) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF(:)
(  313) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  314) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  315) INTEGER(KIND=JPIM) :: IRET
(  316) INTEGER(KIND=JPIM) :: ILEN
(  317) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  318) # 319 "bytes_io_mod.F90"
(  319) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',0,ZHOOK_HANDLE)
(  320) # 321 "bytes_io_mod.F90"
(  321) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  322) IF(PRESENT(KRET)) THEN
(  323)   KRET=IRET
(  324) ENDIF
(  325) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  326)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  327)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_INT FAILED')
(  328) ENDIF
(  329) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_INT',1,ZHOOK_HANDLE)
(  330) END SUBROUTINE BYTES_IO_WRITE_JPIM_INT_ARRAY
(  331) # 332 "bytes_io_mod.F90"
(  332) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4(KFILE,PBUF,KBYTES,KRET)
(  333) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  334) REAL(KIND=JPRM),INTENT(IN)    :: PBUF
(  335) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  336) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  337) INTEGER(KIND=JPIM) :: IRET
(  338) INTEGER(KIND=JPIM) :: ILEN
(  339) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  340) # 341 "bytes_io_mod.F90"
(  341) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4',0,ZHOOK_HANDLE)
(  342) # 343 "bytes_io_mod.F90"
(  343) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  344) IF(PRESENT(KRET)) THEN
(  345)   KRET=IRET
(  346) ENDIF
(  347) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  348)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  349)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL4 FAILED')
(  350) ENDIF
(  351) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4',1,ZHOOK_HANDLE)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 20

(  352) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4
(  353) # 354 "bytes_io_mod.F90"
(  354) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  355) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  356) REAL(KIND=JPRM),INTENT(IN)       :: PBUF(:)
(  357) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  358) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  359) INTEGER(KIND=JPIM) :: IRET
(  360) INTEGER(KIND=JPIM) :: ILEN
(  361) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  362) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  363) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  364) IF(PRESENT(KRET)) THEN
(  365)   KRET=IRET
(  366) ENDIF
(  367) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  368)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  369)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL4_ARRAY FAILED')
(  370) ENDIF
(  371) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  372) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL4_ARRAY
(  373) # 375 "bytes_io_mod.F90"
(  375) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8(KFILE,PBUF,KBYTES,KRET)
(  376) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  377) REAL(KIND=JPRD),INTENT(IN)    :: PBUF
(  378) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  379) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  380) INTEGER(KIND=JPIM) :: IRET
(  381) INTEGER(KIND=JPIM) :: ILEN
(  382) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  383) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8',0,ZHOOK_HANDLE)
(  384) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  385) IF(PRESENT(KRET)) THEN
(  386)   KRET=IRET
(  387) ENDIF
(  388) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  389)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  390)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL8 FAILED')
(  391) ENDIF
(  392) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8',1,ZHOOK_HANDLE)
(  393) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8
(  394) # 395 "bytes_io_mod.F90"
(  395) SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  396) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  397) REAL(KIND=JPRD),INTENT(IN)       :: PBUF(:)
(  398) INTEGER(KIND=JPIM),INTENT(IN)    :: KBYTES
(  399) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  400) INTEGER(KIND=JPIM) :: IRET
(  401) INTEGER(KIND=JPIM) :: ILEN
(  402) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  403) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  404) CALL C_BYTES_IO_WRITE(KFILE,PBUF,KBYTES,IRET)
(  405) IF(PRESENT(KRET)) THEN
(  406)   KRET=IRET
(  407) ENDIF
(  408) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  409)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  410)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_REAL8_ARRAY FAILED')






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 21

(  411) ENDIF
(  412) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  413) END SUBROUTINE BYTES_IO_WRITE_JPIM_REAL8_ARRAY
(  414) # 415 "bytes_io_mod.F90"
(  415) SUBROUTINE BYTES_IO_WRITE_JPIM_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  416) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  417) CHARACTER(LEN=1)  ,INTENT(IN)    :: CDBUF(:)
(  418) INTEGER(KIND=JPIM),INTENT(INOUT) :: KBYTES
(  419) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  420) INTEGER(KIND=JPIM) :: IRET
(  421) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  422) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  423) CALL C_BYTES_IO_WRITE(KFILE,CDBUF,KBYTES,IRET)
(  424) IF(PRESENT(KRET)) THEN
(  425)   KRET=IRET
(  426) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  427)   WRITE(0,*) 'BYTES_IO_WRITE_JPIM_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  428)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIM_CHAR_ARRAY FAILED')
(  429) ENDIF
(  430) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIM_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  431) END SUBROUTINE BYTES_IO_WRITE_JPIM_CHAR_ARRAY
(  432) # 433 "bytes_io_mod.F90"
(  433) ! ============================================
(  434) ! BYTES_IO_READ_JPIB
(  435) # 436 "bytes_io_mod.F90"
(  436) SUBROUTINE BYTES_IO_READ_JPIB_INT(KFILE,KBUF,KBYTES,KRET)
(  437) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  438) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF
(  439) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  440) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  441) INTEGER(KIND=JPIM) :: IRET,ILEN
(  442) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  443) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT',0,ZHOOK_HANDLE)
(  444) CALL C_BYTES_IO_READ(KFILE,KBUF,INT(KBYTES,JPIM),IRET)
(  445) IF(PRESENT(KRET)) THEN
(  446)   KRET=IRET
(  447) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  448)   WRITE(0,*) 'BYTES_IO_READ_JPIB_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  449)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_INT FAILED')
(  450) ENDIF
(  451) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT',1,ZHOOK_HANDLE)
(  452) END SUBROUTINE BYTES_IO_READ_JPIB_INT
(  453) # 454 "bytes_io_mod.F90"
(  454) SUBROUTINE BYTES_IO_READ_JPIB_INT_ARRAY(KFILE,KBUF,KBYTES,KRET)
(  455) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  456) INTEGER(KIND=JPIM),INTENT(OUT)   :: KBUF(:)
(  457) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  458) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  459) INTEGER(KIND=JPIM) :: IRET,ILEN
(  460) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  461) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT_ARRAY',0,ZHOOK_HANDLE)
(  462) CALL C_BYTES_IO_READ(KFILE,KBUF,INT(KBYTES,JPIM),IRET)
(  463) IF(PRESENT(KRET)) THEN
(  464)   KRET=IRET
(  465) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  466)   WRITE(0,*) 'BYTES_IO_READ_JPIB_INT_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  467)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_INT_ARRAY FAILED')
(  468) ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 22

(  469) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_INT_ARRAY',1,ZHOOK_HANDLE)
(  470) END SUBROUTINE BYTES_IO_READ_JPIB_INT_ARRAY
(  471) # 472 "bytes_io_mod.F90"
(  472) SUBROUTINE BYTES_IO_READ_JPIB_REAL4(KFILE,PBUF,KBYTES,KRET)
(  473) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  474) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF
(  475) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  476) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  477) INTEGER(KIND=JPIM) :: IRET,ILEN
(  478) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  479) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4',0,ZHOOK_HANDLE)
(  480) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  481) IF(PRESENT(KRET)) THEN
(  482)   KRET=IRET
(  483) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  484)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  485)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL4 FAILED')
(  486) ENDIF
(  487) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4',1,ZHOOK_HANDLE)
(  488) END SUBROUTINE BYTES_IO_READ_JPIB_REAL4
(  489) # 490 "bytes_io_mod.F90"
(  490) SUBROUTINE BYTES_IO_READ_JPIB_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  491) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  492) REAL(KIND=JPRM),INTENT(OUT)      :: PBUF(:)
(  493) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  494) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  495) INTEGER(KIND=JPIM) :: IRET,ILEN
(  496) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  497) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  498) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  499) IF(PRESENT(KRET)) THEN
(  500)   KRET=IRET
(  501) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  502)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  503)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL4_ARRAY FAILED')
(  504) ENDIF
(  505) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  506) END SUBROUTINE BYTES_IO_READ_JPIB_REAL4_ARRAY
(  507) # 508 "bytes_io_mod.F90"
(  508) SUBROUTINE BYTES_IO_READ_JPIB_REAL8(KFILE,PBUF,KBYTES,KRET)
(  509) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  510) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF
(  511) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  512) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  513) INTEGER(KIND=JPIM) :: IRET,ILEN
(  514) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  515) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8',0,ZHOOK_HANDLE)
(  516) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  517) IF(PRESENT(KRET)) THEN
(  518)   KRET=IRET
(  519) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  520)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  521)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL8 FAILED')
(  522) ENDIF
(  523) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8',1,ZHOOK_HANDLE)
(  524) END SUBROUTINE BYTES_IO_READ_JPIB_REAL8
(  525) # 526 "bytes_io_mod.F90"
(  526) SUBROUTINE BYTES_IO_READ_JPIB_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 23

(  527) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  528) REAL(KIND=JPRD),INTENT(OUT)      :: PBUF(:)
(  529) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  530) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  531) INTEGER(KIND=JPIM) :: IRET,ILEN
(  532) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  533) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  534) CALL C_BYTES_IO_READ(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  535) IF(PRESENT(KRET)) THEN
(  536)   KRET=IRET
(  537) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  538)   WRITE(0,*) 'BYTES_IO_READ_JPIB_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  539)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_REAL8_ARRAY FAILED')
(  540) ENDIF
(  541) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  542) END SUBROUTINE BYTES_IO_READ_JPIB_REAL8_ARRAY
(  543) # 544 "bytes_io_mod.F90"
(  544) SUBROUTINE BYTES_IO_READ_JPIB_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  545) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  546) CHARACTER(LEN=1)  ,INTENT(OUT)   :: CDBUF(:)
(  547) INTEGER(KIND=JPIB),INTENT(IN) :: KBYTES
(  548) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL   :: KRET
(  549) INTEGER(KIND=JPIM) :: IRET,ILEN
(  550) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  551) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  552) CALL C_BYTES_IO_READ(KFILE,CDBUF,INT(KBYTES,JPIM),IRET)
(  553) IF(PRESENT(KRET)) THEN
(  554)   KRET=IRET
(  555) ELSEIF(IRET < JPBYTES_IO_SUCCESS .AND. IRET < JPBYTES_IO_END_OF_FILE ) THEN
(  556)   WRITE(0,*) 'BYTES_IO_READ_JPIB_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  557)   CALL MPL_ABORT('BYTES_IO_READ_JPIB_CHAR_ARRAY FAILED')
(  558) ENDIF
(  559) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_READ_JPIB_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  560) END SUBROUTINE BYTES_IO_READ_JPIB_CHAR_ARRAY
(  561) # 563 "bytes_io_mod.F90"
(  563) ! ============================================
(  564) ! BYTES_IO_WRITE_JPIB
(  565) # 566 "bytes_io_mod.F90"
(  566) SUBROUTINE BYTES_IO_WRITE_JPIB_INT(KFILE,PBUF,KBYTES,KRET)
(  567) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  568) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF
(  569) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  570) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  571) INTEGER(KIND=JPIM) :: IRET
(  572) INTEGER(KIND=JPIM) :: ILEN
(  573) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  574) # 575 "bytes_io_mod.F90"
(  575) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',0,ZHOOK_HANDLE)
(  576) # 577 "bytes_io_mod.F90"
(  577) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  578) IF(PRESENT(KRET)) THEN
(  579)   KRET=IRET
(  580) ENDIF
(  581) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  582)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  583)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_INT FAILED')
(  584) ENDIF
(  585) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',1,ZHOOK_HANDLE)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 24

(  586) END SUBROUTINE BYTES_IO_WRITE_JPIB_INT
(  587) # 588 "bytes_io_mod.F90"
(  588) SUBROUTINE BYTES_IO_WRITE_JPIB_INT_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  589) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  590) INTEGER(KIND=JPIM),INTENT(IN)    :: PBUF(:)
(  591) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  592) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  593) INTEGER(KIND=JPIM) :: IRET
(  594) INTEGER(KIND=JPIM) :: ILEN
(  595) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  596) # 597 "bytes_io_mod.F90"
(  597) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',0,ZHOOK_HANDLE)
(  598) # 599 "bytes_io_mod.F90"
(  599) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  600) IF(PRESENT(KRET)) THEN
(  601)   KRET=IRET
(  602) ENDIF
(  603) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  604)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_INT ',KFILE,' ',KBYTES,' FAILED',IRET
(  605)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_INT FAILED')
(  606) ENDIF
(  607) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_INT',1,ZHOOK_HANDLE)
(  608) END SUBROUTINE BYTES_IO_WRITE_JPIB_INT_ARRAY
(  609) # 610 "bytes_io_mod.F90"
(  610) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4(KFILE,PBUF,KBYTES,KRET)
(  611) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  612) REAL(KIND=JPRM),INTENT(IN)    :: PBUF
(  613) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  614) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  615) INTEGER(KIND=JPIM) :: IRET
(  616) INTEGER(KIND=JPIM) :: ILEN
(  617) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  618) # 619 "bytes_io_mod.F90"
(  619) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4',0,ZHOOK_HANDLE)
(  620) # 621 "bytes_io_mod.F90"
(  621) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  622) IF(PRESENT(KRET)) THEN
(  623)   KRET=IRET
(  624) ENDIF
(  625) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  626)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL4 ',KFILE,' ',KBYTES,' FAILED',IRET
(  627)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL4 FAILED')
(  628) ENDIF
(  629) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4',1,ZHOOK_HANDLE)
(  630) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4
(  631) # 632 "bytes_io_mod.F90"
(  632) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  633) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  634) REAL(KIND=JPRM),INTENT(IN)       :: PBUF(:)
(  635) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  636) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  637) INTEGER(KIND=JPIM) :: IRET
(  638) INTEGER(KIND=JPIM) :: ILEN
(  639) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  640) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4_ARRAY',0,ZHOOK_HANDLE)
(  641) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  642) IF(PRESENT(KRET)) THEN
(  643)   KRET=IRET






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 25

(  644) ENDIF
(  645) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  646)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL4_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  647)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL4_ARRAY FAILED')
(  648) ENDIF
(  649) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL4_ARRAY',1,ZHOOK_HANDLE)
(  650) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL4_ARRAY
(  651) # 653 "bytes_io_mod.F90"
(  653) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8(KFILE,PBUF,KBYTES,KRET)
(  654) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  655) REAL(KIND=JPRD),INTENT(IN)    :: PBUF
(  656) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  657) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  658) INTEGER(KIND=JPIM) :: IRET
(  659) INTEGER(KIND=JPIM) :: ILEN
(  660) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  661) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8',0,ZHOOK_HANDLE)
(  662) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  663) IF(PRESENT(KRET)) THEN
(  664)   KRET=IRET
(  665) ENDIF
(  666) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  667)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL8 ',KFILE,' ',KBYTES,' FAILED',IRET
(  668)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL8 FAILED')
(  669) ENDIF
(  670) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8',1,ZHOOK_HANDLE)
(  671) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8
(  672) # 673 "bytes_io_mod.F90"
(  673) SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8_ARRAY(KFILE,PBUF,KBYTES,KRET)
(  674) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  675) REAL(KIND=JPRD),INTENT(IN)       :: PBUF(:)
(  676) INTEGER(KIND=JPIB),INTENT(IN)    :: KBYTES
(  677) INTEGER(KIND=JPIM),OPTIONAL,INTENT(OUT) :: KRET
(  678) INTEGER(KIND=JPIM) :: IRET
(  679) INTEGER(KIND=JPIM) :: ILEN
(  680) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  681) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8_ARRAY',0,ZHOOK_HANDLE)
(  682) CALL C_BYTES_IO_WRITE(KFILE,PBUF,INT(KBYTES,JPIM),IRET)
(  683) IF(PRESENT(KRET)) THEN
(  684)   KRET=IRET
(  685) ENDIF
(  686) IF(IRET < JPBYTES_IO_SUCCESS ) THEN
(  687)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_REAL8_ARRAY ',KFILE,' ',KBYTES,' FAILED',IRET
(  688)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_REAL8_ARRAY FAILED')
(  689) ENDIF
(  690) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_REAL8_ARRAY',1,ZHOOK_HANDLE)
(  691) END SUBROUTINE BYTES_IO_WRITE_JPIB_REAL8_ARRAY
(  692) # 693 "bytes_io_mod.F90"
(  693) SUBROUTINE BYTES_IO_WRITE_JPIB_CHAR_ARRAY(KFILE,CDBUF,KBYTES,KRET)
(  694) INTEGER(KIND=JPIM),INTENT(IN)    :: KFILE
(  695) CHARACTER(LEN=1)  ,INTENT(IN)    :: CDBUF(:)
(  696) INTEGER(KIND=JPIB),INTENT(IN) :: KBYTES
(  697) INTEGER(KIND=JPIM),INTENT(OUT), OPTIONAL :: KRET
(  698) INTEGER(KIND=JPIM) :: IRET
(  699) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  700) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_CHAR_ARRAY',0,ZHOOK_HANDLE)
(  701) CALL C_BYTES_IO_WRITE(KFILE,CDBUF,INT(KBYTES,JPIM),IRET)
(  702) IF(PRESENT(KRET)) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:28:50      page 26

(  703)   KRET=IRET
(  704) ELSEIF(IRET < JPBYTES_IO_SUCCESS) THEN
(  705)   WRITE(0,*) 'BYTES_IO_WRITE_JPIB_CHAR_ARRAY ',KFILE,' FAILED',IRET
(  706)   CALL MPL_ABORT('BYTES_IO_WRITE_JPIB_CHAR_ARRAY FAILED')
(  707) ENDIF
(  708) IF (LHOOK) CALL DR_HOOK('BYTES_IO:BYTES_IO_WRITE_JPIB_CHAR_ARRAY',1,ZHOOK_HANDLE)
(  709) END SUBROUTINE BYTES_IO_WRITE_JPIB_CHAR_ARRAY
(  710) # 711 "bytes_io_mod.F90"
(  711) END MODULE BYTES_IO_MOD
