


NVFORTRAN (Version    20.11)          02/16/2022  17:28:25      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: eupdspad_mod.F90

(    1) MODULE EUPDSPAD_MOD
(    2) CONTAINS
(    3) SUBROUTINE EUPDSPAD(KM,KF_UV,KF_SCALARS,PFFT,PVODI, &
(    4)  & PSPVOR,PSPDIV,PSPSCALAR,&
(    5)  & PSPSC3A,PSPSC3B,PSPSC2 , &
(    6)  & KFLDPTRUV,KFLDPTRSC)
(    7) 
(    8) !**** *EUPDSPAD* - Update spectral arrays after direct Legendre transform
(    9) 
(   10) !     Purpose.
(   11) !     --------
(   12) !        To update the spectral arrays for a fixed zonal wave-number
(   13) !        from values in POA1 and POA2.
(   14) 
(   15) !**   Interface.
(   16) !     ----------
(   17) !        CALL EUPDSPAD(...)
(   18) 
(   19) !        Explicit arguments :
(   20) !        --------------------
(   21) !        KM - zonal wave-number
(   22) !        POA1 - spectral fields for zonal wavenumber KM (basic var.)
(   23) !        POA2 - spectral fields for zonal wavenumber KM (vor. div.)
(   24) !        PSPVOR - spectral vorticity
(   25) !        PSPDIV - spectral divergence
(   26) !        PSPSCALAR - spectral scalar variables
(   27) 
(   28) !        Implicit arguments :
(   29) !        --------------------
(   30) 
(   31) !     Method.
(   32) !     -------
(   33) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:25      page 2

(   34) !     Externals.  UPDSPADB - basic transfer routine
(   35) !     ----------
(   36) 
(   37) !     Reference.
(   38) !     ----------
(   39) !        ECMWF Research Department documentation of the IFS
(   40) 
(   41) !     Author.
(   42) !     -------
(   43) !        Mats Hamrud and Philippe Courtier  *ECMWF*
(   44) 
(   45) !     Modifications.
(   46) !     --------------
(   47) !        Original : 88-02-02
(   48) !        Modified : 91-07-01 Philippe Courtier/Mats Hamrud - Rewrite
(   49) !                            for uv formulation
(   50) !        Modified : 94-08-02 R. El Khatib - interface to UPDSPADB
(   51) !        M.Hamrud : 94-11-01 New conf 'G' - vor,div->vor,div
(   52) !                            instead of u,v->vor,div
(   53) !        MPP Group: 95-10-01 Support for Distributed Memory version
(   54) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   55) !     ------------------------------------------------------------------
(   56) 
(   57) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   58) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   59) 
(   60) !USE TPM_DIM
(   61) USE TPM_TRANS       ,ONLY : NF_SC2, NF_SC3A, NF_SC3B
(   62) !USE TPM_DISTR
(   63) 
(   64) USE EUPDSPBAD_MOD   ,ONLY : EUPDSPBAD
(   65) !
(   66) 
(   67) IMPLICIT NONE
(   68) 
(   69) 
(   70) INTEGER(KIND=JPIM), INTENT(IN)  :: KM,KF_UV,KF_SCALARS
(   71) 
(   72) REAL(KIND=JPRB) , INTENT(OUT)  :: PFFT(:,:)
(   73) REAL(KIND=JPRB) , INTENT(OUT)  :: PVODI(:,:)
(   74) 
(   75) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(INOUT) :: PSPVOR(:,:)
(   76) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPDIV(:,:)
(   77) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSCALAR(:,:)
(   78) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSC2(:,:)
(   79) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSC3A(:,:,:)
(   80) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSC3B(:,:,:)
(   81) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KFLDPTRUV(:)
(   82) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KFLDPTRSC(:)
(   83) 
(   84) INTEGER(KIND=JPIM) :: IVORS, IVORE, IDIVS, IDIVE, IST ,IEND
(   85) INTEGER(KIND=JPIM) :: IDIM1,IDIM3,J3
(   86) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   87) 
(   88) !     ------------------------------------------------------------------
(   89) 
(   90) !*       1.    UPDATE FIELDS
(   91) !              -------------






NVFORTRAN (Version    20.11)          02/16/2022  17:28:25      page 3

(   92) 
(   93) !*       1.1      VORTICITY AND DIVERGENCE.
(   94) 
(   95) IF (LHOOK) CALL DR_HOOK('EUPDSPAD_MOD:EUPDSPAD',0,ZHOOK_HANDLE)
(   96) IST = 1
(   97) IF (KF_UV > 0) THEN
(   98)   IST = IST+4*KF_UV
(   99)   IVORS = 1
(  100)   IVORE = 2*KF_UV
(  101)   IDIVS = 2*KF_UV+1
(  102)   IDIVE = 4*KF_UV
(  103)   CALL EUPDSPBAD(KM,KF_UV,PVODI(:,IVORS:IVORE),PSPVOR,KFLDPTRUV)
(  104)   CALL EUPDSPBAD(KM,KF_UV,PVODI(:,IDIVS:IDIVE),PSPDIV,KFLDPTRUV)
(  105) ENDIF
(  106) 
(  107) !*       1.2   SCALARS
(  108) 
(  109) IF (KF_SCALARS > 0) THEN
(  110)   IF(PRESENT(PSPSCALAR)) THEN
(  111)     IEND = IST+2*KF_SCALARS-1
(  112)     CALL EUPDSPBAD(KM,KF_SCALARS,PFFT(:,IST:IEND),PSPSCALAR,KFLDPTRSC)
(  113)   ELSE
(  114)     IF(PRESENT(PSPSC2) .AND. NF_SC2 > 0) THEN
(  115)       IDIM1 = NF_SC2
(  116)       IEND  = IST+2*IDIM1-1
(  117)       CALL EUPDSPBAD(KM,IDIM1,PFFT(:,IST:IEND),PSPSC2)
(  118)       IST=IST+2*IDIM1
(  119)     ENDIF
(  120)     IF(PRESENT(PSPSC3A) .AND. NF_SC3A > 0) THEN
(  121)       IDIM1=NF_SC3A
(  122)       IDIM3=UBOUND(PSPSC3A,3)
(  123)       DO J3=1,IDIM3
(  124)         IEND = IST+2*IDIM1-1
(  125)         CALL EUPDSPBAD(KM,IDIM1,PFFT(:,IST:IEND),PSPSC3A(:,:,J3))
(  126)         IST=IST+2*IDIM1
(  127)       ENDDO
(  128)     ENDIF
(  129)     IF(PRESENT(PSPSC3B) .AND. NF_SC3B > 0) THEN
(  130)       IDIM1=NF_SC3B
(  131)       IDIM3=UBOUND(PSPSC3B,3)
(  132)       DO J3=1,IDIM3
(  133)         IEND = IST+2*IDIM1-1
(  134)         CALL EUPDSPBAD(KM,IDIM1,PFFT(:,IST:IEND),PSPSC3B(:,:,J3))
(  135)         IST=IST+2*IDIM1
(  136)       ENDDO
(  137)     ENDIF
(  138)   ENDIF
(  139) ENDIF
(  140) IF (LHOOK) CALL DR_HOOK('EUPDSPAD_MOD:EUPDSPAD',1,ZHOOK_HANDLE)
(  141) 
(  142) !     ------------------------------------------------------------------
(  143) 
(  144) END SUBROUTINE EUPDSPAD
(  145) END MODULE EUPDSPAD_MOD










NVFORTRAN (Version    20.11)          02/16/2022  17:28:25      page 4

(    1) # 1 "eupdspad_mod.F90"
(    1) MODULE EUPDSPAD_MOD
(    2) CONTAINS
(    3) SUBROUTINE EUPDSPAD(KM,KF_UV,KF_SCALARS,PFFT,PVODI, &
(    4)  & PSPVOR,PSPDIV,PSPSCALAR,&
(    5)  & PSPSC3A,PSPSC3B,PSPSC2 , &
(    6)  & KFLDPTRUV,KFLDPTRSC)
(    7) # 8 "eupdspad_mod.F90"
(    8) !**** *EUPDSPAD* - Update spectral arrays after direct Legendre transform
(    9) # 10 "eupdspad_mod.F90"
(   10) !     Purpose.
(   11) !     --------
(   12) !        To update the spectral arrays for a fixed zonal wave-number
(   13) !        from values in POA1 and POA2.
(   14) # 15 "eupdspad_mod.F90"
(   15) !**   Interface.
(   16) !     ----------
(   17) !        CALL EUPDSPAD(...)
(   18) # 19 "eupdspad_mod.F90"
(   19) !        Explicit arguments :
(   20) !        --------------------
(   21) !        KM - zonal wave-number
(   22) !        POA1 - spectral fields for zonal wavenumber KM (basic var.)
(   23) !        POA2 - spectral fields for zonal wavenumber KM (vor. div.)
(   24) !        PSPVOR - spectral vorticity
(   25) !        PSPDIV - spectral divergence
(   26) !        PSPSCALAR - spectral scalar variables
(   27) # 28 "eupdspad_mod.F90"
(   28) !        Implicit arguments :
(   29) !        --------------------
(   30) # 31 "eupdspad_mod.F90"
(   31) !     Method.
(   32) !     -------
(   33) # 34 "eupdspad_mod.F90"
(   34) !     Externals.  UPDSPADB - basic transfer routine
(   35) !     ----------
(   36) # 37 "eupdspad_mod.F90"
(   37) !     Reference.
(   38) !     ----------
(   39) !        ECMWF Research Department documentation of the IFS
(   40) # 41 "eupdspad_mod.F90"
(   41) !     Author.
(   42) !     -------
(   43) !        Mats Hamrud and Philippe Courtier  *ECMWF*
(   44) # 45 "eupdspad_mod.F90"
(   45) !     Modifications.
(   46) !     --------------
(   47) !        Original : 88-02-02
(   48) !        Modified : 91-07-01 Philippe Courtier/Mats Hamrud - Rewrite
(   49) !                            for uv formulation
(   50) !        Modified : 94-08-02 R. El Khatib - interface to UPDSPADB
(   51) !        M.Hamrud : 94-11-01 New conf 'G' - vor,div->vor,div
(   52) !                            instead of u,v->vor,div
(   53) !        MPP Group: 95-10-01 Support for Distributed Memory version
(   54) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   55) !     ------------------------------------------------------------------
(   56) # 57 "eupdspad_mod.F90"
(   57) USE PARKIND1  ,ONLY : JPIM     ,JPRB






NVFORTRAN (Version    20.11)          02/16/2022  17:28:25      page 5

(   58) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   59) # 60 "eupdspad_mod.F90"
(   60) !USE TPM_DIM
(   61) USE TPM_TRANS       ,ONLY : NF_SC2, NF_SC3A, NF_SC3B
(   62) !USE TPM_DISTR
(   63) # 64 "eupdspad_mod.F90"
(   64) USE EUPDSPBAD_MOD   ,ONLY : EUPDSPBAD
(   65) !
(   66) # 67 "eupdspad_mod.F90"
(   67) IMPLICIT NONE
(   68) # 70 "eupdspad_mod.F90"
(   70) INTEGER(KIND=JPIM), INTENT(IN)  :: KM,KF_UV,KF_SCALARS
(   71) # 72 "eupdspad_mod.F90"
(   72) REAL(KIND=JPRB) , INTENT(OUT)  :: PFFT(:,:)
(   73) REAL(KIND=JPRB) , INTENT(OUT)  :: PVODI(:,:)
(   74) # 75 "eupdspad_mod.F90"
(   75) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(INOUT) :: PSPVOR(:,:)
(   76) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPDIV(:,:)
(   77) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSCALAR(:,:)
(   78) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSC2(:,:)
(   79) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSC3A(:,:,:)
(   80) REAL(KIND=JPRB)  ,OPTIONAL, INTENT(INOUT) :: PSPSC3B(:,:,:)
(   81) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KFLDPTRUV(:)
(   82) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KFLDPTRSC(:)
(   83) # 84 "eupdspad_mod.F90"
(   84) INTEGER(KIND=JPIM) :: IVORS, IVORE, IDIVS, IDIVE, IST ,IEND
(   85) INTEGER(KIND=JPIM) :: IDIM1,IDIM3,J3
(   86) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   87) # 88 "eupdspad_mod.F90"
(   88) !     ------------------------------------------------------------------
(   89) # 90 "eupdspad_mod.F90"
(   90) !*       1.    UPDATE FIELDS
(   91) !              -------------
(   92) # 93 "eupdspad_mod.F90"
(   93) !*       1.1      VORTICITY AND DIVERGENCE.
(   94) # 95 "eupdspad_mod.F90"
(   95) IF (LHOOK) CALL DR_HOOK('EUPDSPAD_MOD:EUPDSPAD',0,ZHOOK_HANDLE)
(   96) IST = 1
(   97) IF (KF_UV > 0) THEN
(   98)   IST = IST+4*KF_UV
(   99)   IVORS = 1
(  100)   IVORE = 2*KF_UV
(  101)   IDIVS = 2*KF_UV+1
(  102)   IDIVE = 4*KF_UV
(  103)   CALL EUPDSPBAD(KM,KF_UV,PVODI(:,IVORS:IVORE),PSPVOR,KFLDPTRUV)
(  104)   CALL EUPDSPBAD(KM,KF_UV,PVODI(:,IDIVS:IDIVE),PSPDIV,KFLDPTRUV)
(  105) ENDIF
(  106) # 107 "eupdspad_mod.F90"
(  107) !*       1.2   SCALARS
(  108) # 109 "eupdspad_mod.F90"
(  109) IF (KF_SCALARS > 0) THEN
(  110)   IF(PRESENT(PSPSCALAR)) THEN
(  111)     IEND = IST+2*KF_SCALARS-1
(  112)     CALL EUPDSPBAD(KM,KF_SCALARS,PFFT(:,IST:IEND),PSPSCALAR,KFLDPTRSC)
(  113)   ELSE
(  114)     IF(PRESENT(PSPSC2) .AND. NF_SC2 > 0) THEN
(  115)       IDIM1 = NF_SC2
(  116)       IEND  = IST+2*IDIM1-1






NVFORTRAN (Version    20.11)          02/16/2022  17:28:25      page 6

(  117)       CALL EUPDSPBAD(KM,IDIM1,PFFT(:,IST:IEND),PSPSC2)
(  118)       IST=IST+2*IDIM1
(  119)     ENDIF
(  120)     IF(PRESENT(PSPSC3A) .AND. NF_SC3A > 0) THEN
(  121)       IDIM1=NF_SC3A
(  122)       IDIM3=UBOUND(PSPSC3A,3)
(  123)       DO J3=1,IDIM3
(  124)         IEND = IST+2*IDIM1-1
(  125)         CALL EUPDSPBAD(KM,IDIM1,PFFT(:,IST:IEND),PSPSC3A(:,:,J3))
(  126)         IST=IST+2*IDIM1
(  127)       ENDDO
(  128)     ENDIF
(  129)     IF(PRESENT(PSPSC3B) .AND. NF_SC3B > 0) THEN
(  130)       IDIM1=NF_SC3B
(  131)       IDIM3=UBOUND(PSPSC3B,3)
(  132)       DO J3=1,IDIM3
(  133)         IEND = IST+2*IDIM1-1
(  134)         CALL EUPDSPBAD(KM,IDIM1,PFFT(:,IST:IEND),PSPSC3B(:,:,J3))
(  135)         IST=IST+2*IDIM1
(  136)       ENDDO
(  137)     ENDIF
(  138)   ENDIF
(  139) ENDIF
(  140) IF (LHOOK) CALL DR_HOOK('EUPDSPAD_MOD:EUPDSPAD',1,ZHOOK_HANDLE)
(  141) # 142 "eupdspad_mod.F90"
(  142) !     ------------------------------------------------------------------
(  143) # 144 "eupdspad_mod.F90"
(  144) END SUBROUTINE EUPDSPAD
(  145) END MODULE EUPDSPAD_MOD
