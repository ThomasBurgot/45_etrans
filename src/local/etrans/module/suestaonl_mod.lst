


NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: suestaonl_mod.F90

(    1) MODULE SUESTAONL_MOD
(    2) CONTAINS
(    3) SUBROUTINE SUESTAONL(KMEDIAP,KRESTM,LDWEIGHTED_DISTR,PWEIGHT,PMEDIAP,KPROCAGP)
(    4) 
(    5) !**** *SUESTAONL * - Routine to initialize parallel environment, TAL
(    6) 
(    7) !     Purpose.
(    8) !     --------
(    9) !           Initialize D%NSTA and D%NONL.
(   10) !           Calculation of distribution of grid points to processors :
(   11) !           Splitting of grid in B direction
(   12) 
(   13) !**   Interface.
(   14) !     ----------
(   15) !        *CALL* *SUESTAONL *
(   16) 
(   17) !        Explicit arguments :
(   18) !        --------------------
(   19) !                     KMEDIAP - mean number of grid points per PE
(   20) !                     KRESTM  - number of PEs with one extra point
(   21) !                     LDWEIGHTED_DISTR -true if weighted distribution
(   22) !                     PWEIGHT    -weight per grid-point if weighted
(   23) !                                   distribution
(   24) !                     PMEDIAP    -mean weight per PE if weighted
(   25) !                                   distribution
(   26) !                     KPROCAGP   -number of grid points per A set
(   27) !        Implicit arguments :
(   28) !        --------------------
(   29) 
(   30) !     Method.
(   31) !     -------






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 2

(   32) !        See documentation
(   33) 
(   34) !     Externals.   NONE.
(   35) !     ----------
(   36) 
(   37) !     Reference.
(   38) !     ----------
(   39) !        ECMWF Research Department documentation of the IFS
(   40) 
(   41) !     Author.
(   42) !     -------
(   43) !        MPP Group *ECMWF*
(   44) 
(   45) !     Modifications.
(   46) !     --------------
(   47) !        Original : 95-10-01
(   48) !        Modified 98-08-10 by K. YESSAD: removal of LRPOLE option.
(   49) !          - removal of LRPOLE in YOMCT0.
(   50) !          - removal of code under LRPOLE.
(   51) !        Modified 98-12-04 C. Fischer: merge with SUESTAONL (Aladin)
(   52) !                 03-03-03 G. Radnoti: no merge: only difference with
(   53) !                                      sustaonl: ezone added to last a-set
(   54) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   55) !        O.Spaniel     Oct-2004 phasing for AL29
(   56) !        A.Bogatchev   Sep-2010 phasing for AL37
(   57) !        R. El Khatib 09-Aug-2013 Allow LEQ_REGIONS
(   58) !     ------------------------------------------------------------------
(   59) 
(   60) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   61) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   62) USE MPL_MODULE  ,ONLY : MPL_ALLGATHERV, MPL_RECV, MPL_SEND
(   63) 
(   64) USE TPM_GEN         ,ONLY : NOUT, NPRINTLEV
(   65) USE TPM_DIM         ,ONLY : R
(   66) USE TPM_GEOMETRY    ,ONLY : G
(   67) USE TPM_DISTR       ,ONLY : D, LEQ_REGIONS, MTAGPART, NPRCIDS, MYPROC, NPROC
(   68) USE TPMALD_DIM      ,ONLY : RALD
(   69) USE SET2PE_MOD      ,ONLY : SET2PE
(   70) USE EQ_REGIONS_MOD  ,ONLY : MY_REGION_EW, MY_REGION_NS,           &
(   71)      &                      N_REGIONS, N_REGIONS_NS, N_REGIONS_EW
(   72) USE ABORT_TRANS_MOD ,ONLY : ABORT_TRANS
(   73) !
(   74) 
(   75) IMPLICIT NONE
(   76) 
(   77) INTEGER(KIND=JPIM),INTENT(IN) :: KMEDIAP
(   78) INTEGER(KIND=JPIM),INTENT(IN) :: KRESTM
(   79) REAL(KIND=JPRB),INTENT(IN)    :: PWEIGHT(:)
(   80) LOGICAL,INTENT(IN)            :: LDWEIGHTED_DISTR
(   81) REAL(KIND=JPRB),INTENT(IN)    :: PMEDIAP
(   82) INTEGER(KIND=JPIM),INTENT(IN) :: KPROCAGP(:)
(   83) 
(   84) INTEGER(KIND=JPIM) :: IXPTLAT(R%NDGL), ILSTPTLAT(R%NDGL)
(   85) INTEGER(KIND=JPIM) :: ICHK(R%NDLON,R%NDGL), ICOMBUF(R%NDGL*N_REGIONS_EW*2)
(   86) 
(   87) INTEGER(KIND=JPIM) :: I1, I2, IBUFLEN, IDGLG, IDWIDE, &
(   88)              & IGL, IGL1, IGL2, IGLOFF, IGPTA, &
(   89)              & IGPTPRSETS, IGPTS, IGPTSP, ILEN, ILRECV, &






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 3

(   90)              & ILSEND, INPLAT, INXLAT, IPOS, &
(   91)              & IPROCB, IPTSRE, IRECV, &
(   92)              & IREST, ISEND, ITAG, JA, JB, JGL, JL, JNPTSRE, &
(   93)              & ILAT, ILON, ILOEN  
(   94) INTEGER(KIND=JPIM),ALLOCATABLE :: ICOMBUFG(:)
(   95) REAL(KIND=JPRB),ALLOCATABLE :: ZWEIGHT(:,:)
(   96) INTEGER(KIND=JPIM) :: JJ, ILENG(NPROC), IOFF(NPROC)
(   97) 
(   98) LOGICAL :: LLABORT
(   99) LOGICAL :: LLP1,LLP2
(  100) 
(  101) REAL(KIND=JPRB) ::  ZLAT, ZLAT1, ZCOMP
(  102) REAL(KIND=JPRB) :: ZDIVID(R%NDGL),ZXPTLAT(R%NDGL)
(  103) 
(  104) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  105) !      -----------------------------------------------------------------
(  106) 
(  107) IF (LHOOK) CALL DR_HOOK('SUESTAONL_MOD:SUESTAONL',0,ZHOOK_HANDLE)
(  108) IXPTLAT  (:)=999999
(  109) ILSTPTLAT(:)=999999
(  110) LLP1 = NPRINTLEV>0
(  111) LLP2 = NPRINTLEV>1
(  112) 
(  113) IDWIDE  = R%NDGL/2
(  114) IBUFLEN = R%NDGL*N_REGIONS_EW*2
(  115) IDGLG   = R%NDGL
(  116) 
(  117) I1 = MAX(   1,D%NFRSTLAT(MY_REGION_NS)-D%NFRSTLOFF)
(  118) I2 = MIN(IDGLG,D%NLSTLAT (MY_REGION_NS)-D%NFRSTLOFF)
(  119) 
(  120) ILEN = D%NLSTLAT(MY_REGION_NS) - D%NFRSTLAT(MY_REGION_NS)+1
(  121) 
(  122) IGPTPRSETS = SUM(G%NLOEN(1:D%NFRSTLAT(MY_REGION_NS)-1))
(  123) 
(  124) 
(  125) IF (D%LSPLIT) THEN
(  126)   IF( LEQ_REGIONS )THEN
(  127)     IGPTA=0
(  128)     DO JA=1,MY_REGION_NS-1
(  129)       IGPTA = IGPTA + KPROCAGP(JA)
(  130)     ENDDO
(  131)     IGPTS = KPROCAGP(MY_REGION_NS)
(  132)   ELSE
(  133)     IF (MY_REGION_NS <= KRESTM.OR.KRESTM == 0) THEN
(  134)       IF (MY_REGION_NS < N_REGIONS_NS) THEN
(  135)         IGPTS = KMEDIAP
(  136)         IGPTA = KMEDIAP*(MY_REGION_NS-1)
(  137)       ELSE
(  138)         IGPTS = KMEDIAP+SUM(G%NLOEN(RALD%NDGUX+1:R%NDGL))
(  139)         IGPTA = KMEDIAP*(MY_REGION_NS-1)
(  140)       ENDIF
(  141)     ELSE
(  142)       IF (MY_REGION_NS < N_REGIONS_NS) THEN
(  143)         IGPTS = KMEDIAP-1
(  144)         IGPTA = KMEDIAP*KRESTM+IGPTS*(MY_REGION_NS-1-KRESTM)
(  145)       ELSE
(  146)         IGPTS = KMEDIAP-1+SUM(G%NLOEN(RALD%NDGUX+1:R%NDGL))
(  147)         IGPTA = KMEDIAP*KRESTM+(KMEDIAP-1)*(MY_REGION_NS-1-KRESTM)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 4

(  148)       ENDIF
(  149)     ENDIF
(  150)   ENDIF
(  151) ELSE
(  152)   IGPTA = IGPTPRSETS
(  153)   IGPTS = SUM(G%NLOEN(D%NFRSTLAT(MY_REGION_NS):D%NLSTLAT(MY_REGION_NS)))
(  154) ENDIF
(  155) IGPTSP = IGPTS/N_REGIONS(MY_REGION_NS)
(  156) IREST = IGPTS-N_REGIONS(MY_REGION_NS)*IGPTSP
(  157) IXPTLAT(1) = IGPTA-IGPTPRSETS+1
(  158) ZXPTLAT(1) = REAL(IXPTLAT(1))
(  159) ILSTPTLAT(1) = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))
(  160) INPLAT = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))-IXPTLAT(1)+1
(  161) DO JGL=2,ILEN
(  162)   IXPTLAT(JGL) = 1
(  163)   ZXPTLAT(JGL) = 1.0_JPRB
(  164)   ILSTPTLAT(JGL) =  G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  165)   INPLAT = INPLAT+G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  166) ENDDO
(  167) ILSTPTLAT(ILEN) = G%NLOEN(D%NLSTLAT(MY_REGION_NS))-INPLAT+IGPTS
(  168) 
(  169) DO JB=1,N_REGIONS_EW
(  170)   DO JGL=1,R%NDGL+N_REGIONS_NS-1
(  171)     D%NSTA(JGL,JB) = 0
(  172)     D%NONL(JGL,JB) = 0
(  173)   ENDDO
(  174) ENDDO
(  175) 
(  176) !  grid point decomposition
(  177) !  ---------------------------------------
(  178) DO JGL=1,ILEN
(  179)   ZDIVID(JGL)=1._JPRB/REAL(G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRB)
(  180) ENDDO
(  181) IF( LDWEIGHTED_DISTR )THEN
(  182)   ALLOCATE(ZWEIGHT(G%NLOEN(R%NDGL/2),R%NDGL))
(  183)   IGL=0
(  184)   DO JGL=1,R%NDGL
(  185)     DO JL=1,G%NLOEN(JGL)
(  186)       IGL=IGL+1
(  187)       ZWEIGHT(JL,JGL)=PWEIGHT(IGL)
(  188)     ENDDO
(  189)   ENDDO
(  190)   ZCOMP=0
(  191)   IGPTS=0
(  192) ENDIF
(  193) DO JB=1,N_REGIONS(MY_REGION_NS)
(  194) 
(  195)  IF( .NOT.LDWEIGHTED_DISTR )THEN
(  196) 
(  197)   IF (JB <= IREST) THEN
(  198)     IPTSRE = IGPTSP+1
(  199)   ELSE
(  200)     IPTSRE = IGPTSP
(  201)   ENDIF
(  202) 
(  203)   DO JNPTSRE=1,IPTSRE
(  204)     ZLAT  = 1._JPRB
(  205)     ZLAT1 = 1._JPRB






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 5

(  206)       DO JGL=1,ILEN
(  207)         IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  208)           ZLAT1  = (ZXPTLAT(JGL)-1.0_JPRB)*ZDIVID(JGL)
(  209)           IF (ZLAT1 < ZLAT) THEN
(  210)            ZLAT=ZLAT1
(  211)            INXLAT = JGL
(  212)           ENDIF
(  213)         ENDIF
(  214)       ENDDO
(  215)       IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  216)         IGL=D%NPTRFLOFF+INXLAT
(  217)         IF (D%NSTA(IGL,JB) == 0) THEN
(  218)           D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  219)         ENDIF
(  220)         D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  221)       ENDIF
(  222)       IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  223)       ZXPTLAT(INXLAT) = REAL(IXPTLAT(INXLAT),JPRB)
(  224)   ENDDO
(  225) 
(  226)  ELSE
(  227)     DO WHILE ( (JB <  N_REGIONS(MY_REGION_NS) .AND. ZCOMP < PMEDIAP) &
(  228)         & .OR. (JB == N_REGIONS(MY_REGION_NS) .AND. IGPTS < KPROCAGP(MY_REGION_NS)) )
(  229) 
(  230)       IGPTS = IGPTS + 1
(  231)       ZLAT  = 1._JPRB
(  232)       ZLAT1 = 1._JPRB
(  233) 
(  234)       DO JGL=1,ILEN
(  235)         IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  236)           ZLAT1 = (ZXPTLAT(JGL)-1.0_JPRB)*ZDIVID(JGL)
(  237)           IF (ZLAT1 < ZLAT) THEN
(  238)             ZLAT   = ZLAT1
(  239)             INXLAT = JGL
(  240)           ENDIF
(  241)         ENDIF
(  242)       ENDDO
(  243)   
(  244)       IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  245)         IGL=D%NPTRFLOFF+INXLAT
(  246)         IF (D%NSTA(IGL,JB) == 0) THEN
(  247)           D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  248)         ENDIF
(  249)         D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  250)         IF(IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1)THEN
(  251)           CALL ABORT_TRANS(' SUSTAONL: IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1')
(  252)         ENDIF
(  253)         ILON=D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  254)         ILAT=D%NFRSTLAT(MY_REGION_NS)+INXLAT-1
(  255)         ILOEN=G%NLOEN(ILAT)
(  256)         IF(ILON<1.OR.ILON>ILOEN)THEN
(  257)           CALL ABORT_TRANS(' SUSTAONL: ILON<1.OR.ILON>ILOEN')
(  258)         ENDIF
(  259)         ZCOMP = ZCOMP + ZWEIGHT(ILON,ILAT)
(  260)       ENDIF
(  261)       IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  262)       ZXPTLAT(INXLAT) = REAL(IXPTLAT(INXLAT),JPRB)
(  263)     ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 6

(  264) 
(  265)     ZCOMP = ZCOMP - PMEDIAP
(  266) 
(  267)   ENDIF
(  268) 
(  269) ENDDO
(  270) 
(  271) IF( LDWEIGHTED_DISTR )THEN
(  272)   DEALLOCATE(ZWEIGHT)
(  273) ENDIF
(  274) ! Exchange local partitioning info to produce global view
(  275) 
(  276) IF( NPROC > 1 )THEN
(  277)   IF( LEQ_REGIONS )THEN
(  278) 
(  279)     ITAG = MTAGPART
(  280)     IPOS = 0
(  281)     DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  282)       IPOS = IPOS+1
(  283)       ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  284)       IPOS = IPOS+1
(  285)       ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  286)     ENDDO
(  287)     IF( IPOS > IBUFLEN )THEN
(  288)       CALL ABORT_TRANS(' SUSTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  289)     ENDIF
(  290)     ILSEND = IPOS
(  291) 
(  292)     DO JA=1,N_REGIONS_NS
(  293)       DO JB=1,N_REGIONS(JA)
(  294)         CALL SET2PE(IRECV,JA,JB,0,0)
(  295)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  296)         ILENG(NPRCIDS(IRECV))=ILEN
(  297)       ENDDO
(  298)     ENDDO
(  299)     IOFF(1)=0
(  300)     DO JJ=2,NPROC
(  301)       IOFF(JJ)=IOFF(JJ-1)+ILENG(JJ-1)
(  302)     ENDDO
(  303)     ALLOCATE(ICOMBUFG(SUM(ILENG(:))))
(  304)     CALL MPL_ALLGATHERV(ICOMBUF(1:ILSEND),ICOMBUFG,ILENG,CDSTRING='SUSTAONL')
(  305)     DO JA=1,N_REGIONS_NS
(  306)       IGL1 = D%NFRSTLAT(JA)
(  307)       IGL2 = D%NLSTLAT(JA)
(  308)       DO JB=1,N_REGIONS(JA)
(  309)         CALL SET2PE(IRECV,JA,JB,0,0)
(  310)         IF(IRECV /= MYPROC) THEN
(  311)           ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  312)           IPOS = IOFF(NPRCIDS(IRECV))
(  313)           DO JGL=IGL1,IGL2
(  314)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  315)             IPOS = IPOS+1
(  316)             D%NSTA(IGL,JB) = ICOMBUFG(IPOS)
(  317)             IPOS = IPOS+1
(  318)             D%NONL(IGL,JB) = ICOMBUFG(IPOS)
(  319)           ENDDO
(  320)         ENDIF
(  321)       ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 7

(  322)     ENDDO
(  323)     DEALLOCATE(ICOMBUFG)
(  324) 
(  325)   ELSE
(  326) 
(  327)     ITAG = MTAGPART
(  328)     IPOS = 0
(  329)     DO JB=1,N_REGIONS(MY_REGION_NS)
(  330)       DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  331)         IPOS = IPOS+1
(  332)         ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,JB)
(  333)         IPOS = IPOS+1
(  334)         ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,JB)
(  335)       ENDDO
(  336)     ENDDO
(  337)     IF( IPOS > IBUFLEN )THEN
(  338)       CALL ABORT_TRANS(' SUESTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  339)     ENDIF
(  340)     ILSEND = IPOS
(  341) 
(  342)     DO JA=1,N_REGIONS_NS
(  343)       CALL SET2PE(ISEND,JA,MY_REGION_EW,0,0)
(  344)       IF(ISEND /= MYPROC) THEN
(  345)         CALL MPL_SEND(ICOMBUF(1:ILSEND),KDEST=NPRCIDS(ISEND),KTAG=ITAG, &
(  346)          & CDSTRING='SUESTAONL:') 
(  347)       ENDIF
(  348)     ENDDO
(  349)     DO JA=1,N_REGIONS_NS
(  350)       CALL SET2PE(IRECV,JA,MY_REGION_EW,0,0)
(  351)       IF(IRECV /= MYPROC) THEN
(  352)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*N_REGIONS(JA)*2
(  353)         CALL MPL_RECV(ICOMBUF(1:ILEN),KSOURCE=NPRCIDS(IRECV),KTAG=ITAG, &
(  354)           & KOUNT=ILRECV,CDSTRING='SUESTAONL:')  
(  355)         IGL1 = D%NFRSTLAT(JA)
(  356)         IGL2 = D%NLSTLAT(JA)
(  357)         IPOS = 0
(  358)         DO JB=1,N_REGIONS(JA)
(  359)           DO JGL=IGL1,IGL2
(  360)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  361)             IPOS = IPOS+1
(  362)             D%NSTA(IGL,JB) = ICOMBUF(IPOS)
(  363)             IPOS = IPOS+1
(  364)             D%NONL(IGL,JB) = ICOMBUF(IPOS)
(  365)           ENDDO
(  366)         ENDDO
(  367)       ENDIF
(  368)     ENDDO
(  369) 
(  370)   ENDIF
(  371) ENDIF
(  372) 
(  373) ! Confirm consistency of global partitioning, specifically testing for
(  374) ! multiple assignments of same grid point and unassigned grid points
(  375) 
(  376) LLABORT = .FALSE.
(  377) DO JGL=1,R%NDGL
(  378)   DO JL=1,G%NLOEN(JGL)
(  379)     ICHK(JL,JGL) = 1






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 8

(  380)   ENDDO
(  381) ENDDO
(  382) DO JA=1,N_REGIONS_NS
(  383)   IGLOFF = D%NPTRFRSTLAT(JA)
(  384)   DO JB=1,N_REGIONS(JA)
(  385)     IGL1 = D%NFRSTLAT(JA)
(  386)     IGL2 = D%NLSTLAT(JA)
(  387)     DO JGL=IGL1,IGL2
(  388)       IGL = IGLOFF+JGL-IGL1
(  389)       DO JL=D%NSTA(IGL,JB),D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  390)         IF( ICHK(JL,JGL) /= 1 )THEN
(  391)           WRITE(NOUT,'(" SUESTAONL : seta=",i4," setb=",i4,&
(  392)            & " row=",I4," sta=",I4," INVALID GRID POINT")')&
(  393)            & JA,JB,JGL,JL  
(  394)           WRITE(0,'(" SUESTAONL : seta=",i4," setb=",i4,&
(  395)            & " ROW=",I4," sta=",I4," INVALID GRID POINT")')&
(  396)            & JA,JB,JGL,JL  
(  397)           LLABORT = .TRUE.
(  398)         ENDIF
(  399)         ICHK(JL,JGL) = 2
(  400)       ENDDO
(  401)     ENDDO
(  402)   ENDDO
(  403) ENDDO
(  404) DO JGL=1,R%NDGL
(  405)   DO JL=1,G%NLOEN(JGL)
(  406)     IF( ICHK(JL,JGL) /= 2 )THEN
(  407)       WRITE(NOUT,'(" SUESTAONL : row=",i4," sta=",i4,&
(  408)        & " GRID POINT NOT ASSIGNED")') JGL,JL  
(  409)       LLABORT = .TRUE.
(  410)     ENDIF
(  411)   ENDDO
(  412) ENDDO
(  413) IF( LLABORT )THEN
(  414)   WRITE(NOUT,'(" SUESTAONL : inconsistent partitioning")')
(  415)   CALL ABORT_TRANS(' SUESTAONL: inconsistent partitioning')
(  416) ENDIF
(  417) 
(  418) IF (LLP1) THEN
(  419)   WRITE(UNIT=NOUT,FMT='('' OUTPUT FROM ROUTINE SUESTAONL '')')
(  420)   WRITE(UNIT=NOUT,FMT='('' '')')
(  421)   WRITE(UNIT=NOUT,FMT='('' PARTITIONING INFORMATION '')')
(  422)   WRITE(UNIT=NOUT,FMT='('' '')')
(  423)   IPROCB = MIN(32,N_REGIONS_EW)
(  424)   WRITE(UNIT=NOUT,FMT='(17X," SETB=",32(1X,I3))') (JB,JB=1,IPROCB)
(  425)   DO JA=1,N_REGIONS_NS
(  426)     IPROCB = MIN(32,N_REGIONS(JA))
(  427)     WRITE(UNIT=NOUT,FMT='('' '')')
(  428)     IGLOFF = D%NPTRFRSTLAT(JA)
(  429)     IGL1 = D%NFRSTLAT(JA)
(  430)     IGL2 = D%NLSTLAT(JA)
(  431)     DO JGL=IGL1,IGL2
(  432)       IGL=IGLOFF+JGL-IGL1
(  433)       WRITE(UNIT=NOUT,FMT='(" SETA=",I3," LAT=",I3," NSTA=",&
(  434)        & 32(1X,I3))') JA,JGL,(D%NSTA(IGL,JB),JB=1,IPROCB)  
(  435)       WRITE(UNIT=NOUT,FMT='(" SETA=",I3," LAT=",I3," D%NONL=",&
(  436)        & 32(1X,I3))') JA,JGL,(D%NONL(IGL,JB),JB=1,IPROCB)  
(  437)       WRITE(UNIT=NOUT,FMT='('' '')')






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 9

(  438)     ENDDO
(  439)     WRITE(UNIT=NOUT,FMT='('' '')')
(  440)   ENDDO
(  441)   WRITE(UNIT=NOUT,FMT='('' '')')
(  442)   WRITE(UNIT=NOUT,FMT='('' '')')
(  443) ENDIF
(  444) IF (LHOOK) CALL DR_HOOK('SUESTAONL_MOD:SUESTAONL',1,ZHOOK_HANDLE)
(  445) 
(  446) !     ------------------------------------------------------------------
(  447) 
(  448) END SUBROUTINE SUESTAONL
(  449) END MODULE SUESTAONL_MOD




















































NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 10

(    1) # 1 "suestaonl_mod.F90"
(    1) MODULE SUESTAONL_MOD
(    2) CONTAINS
(    3) SUBROUTINE SUESTAONL(KMEDIAP,KRESTM,LDWEIGHTED_DISTR,PWEIGHT,PMEDIAP,KPROCAGP)
(    4) # 5 "suestaonl_mod.F90"
(    5) !**** *SUESTAONL * - Routine to initialize parallel environment, TAL
(    6) # 7 "suestaonl_mod.F90"
(    7) !     Purpose.
(    8) !     --------
(    9) !           Initialize D%NSTA and D%NONL.
(   10) !           Calculation of distribution of grid points to processors :
(   11) !           Splitting of grid in B direction
(   12) # 13 "suestaonl_mod.F90"
(   13) !**   Interface.
(   14) !     ----------
(   15) !        *CALL* *SUESTAONL *
(   16) # 17 "suestaonl_mod.F90"
(   17) !        Explicit arguments :
(   18) !        --------------------
(   19) !                     KMEDIAP - mean number of grid points per PE
(   20) !                     KRESTM  - number of PEs with one extra point
(   21) !                     LDWEIGHTED_DISTR -true if weighted distribution
(   22) !                     PWEIGHT    -weight per grid-point if weighted
(   23) !                                   distribution
(   24) !                     PMEDIAP    -mean weight per PE if weighted
(   25) !                                   distribution
(   26) !                     KPROCAGP   -number of grid points per A set
(   27) !        Implicit arguments :
(   28) !        --------------------
(   29) # 30 "suestaonl_mod.F90"
(   30) !     Method.
(   31) !     -------
(   32) !        See documentation
(   33) # 34 "suestaonl_mod.F90"
(   34) !     Externals.   NONE.
(   35) !     ----------
(   36) # 37 "suestaonl_mod.F90"
(   37) !     Reference.
(   38) !     ----------
(   39) !        ECMWF Research Department documentation of the IFS
(   40) # 41 "suestaonl_mod.F90"
(   41) !     Author.
(   42) !     -------
(   43) !        MPP Group *ECMWF*
(   44) # 45 "suestaonl_mod.F90"
(   45) !     Modifications.
(   46) !     --------------
(   47) !        Original : 95-10-01
(   48) !        Modified 98-08-10 by K. YESSAD: removal of LRPOLE option.
(   49) !          - removal of LRPOLE in YOMCT0.
(   50) !          - removal of code under LRPOLE.
(   51) !        Modified 98-12-04 C. Fischer: merge with SUESTAONL (Aladin)
(   52) !                 03-03-03 G. Radnoti: no merge: only difference with
(   53) !                                      sustaonl: ezone added to last a-set
(   54) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   55) !        O.Spaniel     Oct-2004 phasing for AL29
(   56) !        A.Bogatchev   Sep-2010 phasing for AL37
(   57) !        R. El Khatib 09-Aug-2013 Allow LEQ_REGIONS






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 11

(   58) !     ------------------------------------------------------------------
(   59) # 60 "suestaonl_mod.F90"
(   60) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   61) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   62) USE MPL_MODULE  ,ONLY : MPL_ALLGATHERV, MPL_RECV, MPL_SEND
(   63) # 64 "suestaonl_mod.F90"
(   64) USE TPM_GEN         ,ONLY : NOUT, NPRINTLEV
(   65) USE TPM_DIM         ,ONLY : R
(   66) USE TPM_GEOMETRY    ,ONLY : G
(   67) USE TPM_DISTR       ,ONLY : D, LEQ_REGIONS, MTAGPART, NPRCIDS, MYPROC, NPROC
(   68) USE TPMALD_DIM      ,ONLY : RALD
(   69) USE SET2PE_MOD      ,ONLY : SET2PE
(   70) USE EQ_REGIONS_MOD  ,ONLY : MY_REGION_EW, MY_REGION_NS,           &
(   71)      &                      N_REGIONS, N_REGIONS_NS, N_REGIONS_EW
(   72) USE ABORT_TRANS_MOD ,ONLY : ABORT_TRANS
(   73) !
(   74) # 75 "suestaonl_mod.F90"
(   75) IMPLICIT NONE
(   76) # 77 "suestaonl_mod.F90"
(   77) INTEGER(KIND=JPIM),INTENT(IN) :: KMEDIAP
(   78) INTEGER(KIND=JPIM),INTENT(IN) :: KRESTM
(   79) REAL(KIND=JPRB),INTENT(IN)    :: PWEIGHT(:)
(   80) LOGICAL,INTENT(IN)            :: LDWEIGHTED_DISTR
(   81) REAL(KIND=JPRB),INTENT(IN)    :: PMEDIAP
(   82) INTEGER(KIND=JPIM),INTENT(IN) :: KPROCAGP(:)
(   83) # 84 "suestaonl_mod.F90"
(   84) INTEGER(KIND=JPIM) :: IXPTLAT(R%NDGL), ILSTPTLAT(R%NDGL)
(   85) INTEGER(KIND=JPIM) :: ICHK(R%NDLON,R%NDGL), ICOMBUF(R%NDGL*N_REGIONS_EW*2)
(   86) # 87 "suestaonl_mod.F90"
(   87) INTEGER(KIND=JPIM) :: I1, I2, IBUFLEN, IDGLG, IDWIDE, &
(   88)              & IGL, IGL1, IGL2, IGLOFF, IGPTA, &
(   89)              & IGPTPRSETS, IGPTS, IGPTSP, ILEN, ILRECV, &
(   90)              & ILSEND, INPLAT, INXLAT, IPOS, &
(   91)              & IPROCB, IPTSRE, IRECV, &
(   92)              & IREST, ISEND, ITAG, JA, JB, JGL, JL, JNPTSRE, &
(   93)              & ILAT, ILON, ILOEN  
(   94) INTEGER(KIND=JPIM),ALLOCATABLE :: ICOMBUFG(:)
(   95) REAL(KIND=JPRB),ALLOCATABLE :: ZWEIGHT(:,:)
(   96) INTEGER(KIND=JPIM) :: JJ, ILENG(NPROC), IOFF(NPROC)
(   97) # 98 "suestaonl_mod.F90"
(   98) LOGICAL :: LLABORT
(   99) LOGICAL :: LLP1,LLP2
(  100) # 101 "suestaonl_mod.F90"
(  101) REAL(KIND=JPRB) ::  ZLAT, ZLAT1, ZCOMP
(  102) REAL(KIND=JPRB) :: ZDIVID(R%NDGL),ZXPTLAT(R%NDGL)
(  103) # 104 "suestaonl_mod.F90"
(  104) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  105) !      -----------------------------------------------------------------
(  106) # 107 "suestaonl_mod.F90"
(  107) IF (LHOOK) CALL DR_HOOK('SUESTAONL_MOD:SUESTAONL',0,ZHOOK_HANDLE)
(  108) IXPTLAT  (:)=999999
(  109) ILSTPTLAT(:)=999999
(  110) LLP1 = NPRINTLEV>0
(  111) LLP2 = NPRINTLEV>1
(  112) # 113 "suestaonl_mod.F90"
(  113) IDWIDE  = R%NDGL/2
(  114) IBUFLEN = R%NDGL*N_REGIONS_EW*2
(  115) IDGLG   = R%NDGL






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 12

(  116) # 117 "suestaonl_mod.F90"
(  117) I1 = MAX(   1,D%NFRSTLAT(MY_REGION_NS)-D%NFRSTLOFF)
(  118) I2 = MIN(IDGLG,D%NLSTLAT (MY_REGION_NS)-D%NFRSTLOFF)
(  119) # 120 "suestaonl_mod.F90"
(  120) ILEN = D%NLSTLAT(MY_REGION_NS) - D%NFRSTLAT(MY_REGION_NS)+1
(  121) # 122 "suestaonl_mod.F90"
(  122) IGPTPRSETS = SUM(G%NLOEN(1:D%NFRSTLAT(MY_REGION_NS)-1))
(  123) # 125 "suestaonl_mod.F90"
(  125) IF (D%LSPLIT) THEN
(  126)   IF( LEQ_REGIONS )THEN
(  127)     IGPTA=0
(  128)     DO JA=1,MY_REGION_NS-1
(  129)       IGPTA = IGPTA + KPROCAGP(JA)
(  130)     ENDDO
(  131)     IGPTS = KPROCAGP(MY_REGION_NS)
(  132)   ELSE
(  133)     IF (MY_REGION_NS <= KRESTM.OR.KRESTM == 0) THEN
(  134)       IF (MY_REGION_NS < N_REGIONS_NS) THEN
(  135)         IGPTS = KMEDIAP
(  136)         IGPTA = KMEDIAP*(MY_REGION_NS-1)
(  137)       ELSE
(  138)         IGPTS = KMEDIAP+SUM(G%NLOEN(RALD%NDGUX+1:R%NDGL))
(  139)         IGPTA = KMEDIAP*(MY_REGION_NS-1)
(  140)       ENDIF
(  141)     ELSE
(  142)       IF (MY_REGION_NS < N_REGIONS_NS) THEN
(  143)         IGPTS = KMEDIAP-1
(  144)         IGPTA = KMEDIAP*KRESTM+IGPTS*(MY_REGION_NS-1-KRESTM)
(  145)       ELSE
(  146)         IGPTS = KMEDIAP-1+SUM(G%NLOEN(RALD%NDGUX+1:R%NDGL))
(  147)         IGPTA = KMEDIAP*KRESTM+(KMEDIAP-1)*(MY_REGION_NS-1-KRESTM)
(  148)       ENDIF
(  149)     ENDIF
(  150)   ENDIF
(  151) ELSE
(  152)   IGPTA = IGPTPRSETS
(  153)   IGPTS = SUM(G%NLOEN(D%NFRSTLAT(MY_REGION_NS):D%NLSTLAT(MY_REGION_NS)))
(  154) ENDIF
(  155) IGPTSP = IGPTS/N_REGIONS(MY_REGION_NS)
(  156) IREST = IGPTS-N_REGIONS(MY_REGION_NS)*IGPTSP
(  157) IXPTLAT(1) = IGPTA-IGPTPRSETS+1
(  158) ZXPTLAT(1) = REAL(IXPTLAT(1))
(  159) ILSTPTLAT(1) = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))
(  160) INPLAT = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))-IXPTLAT(1)+1
(  161) DO JGL=2,ILEN
(  162)   IXPTLAT(JGL) = 1
(  163)   ZXPTLAT(JGL) = 1.0_JPRB
(  164)   ILSTPTLAT(JGL) =  G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  165)   INPLAT = INPLAT+G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  166) ENDDO
(  167) ILSTPTLAT(ILEN) = G%NLOEN(D%NLSTLAT(MY_REGION_NS))-INPLAT+IGPTS
(  168) # 169 "suestaonl_mod.F90"
(  169) DO JB=1,N_REGIONS_EW
(  170)   DO JGL=1,R%NDGL+N_REGIONS_NS-1
(  171)     D%NSTA(JGL,JB) = 0
(  172)     D%NONL(JGL,JB) = 0
(  173)   ENDDO
(  174) ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 13

(  175) # 176 "suestaonl_mod.F90"
(  176) !  grid point decomposition
(  177) !  ---------------------------------------
(  178) DO JGL=1,ILEN
(  179)   ZDIVID(JGL)=1._JPRB/REAL(G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRB)
(  180) ENDDO
(  181) IF( LDWEIGHTED_DISTR )THEN
(  182)   ALLOCATE(ZWEIGHT(G%NLOEN(R%NDGL/2),R%NDGL))
(  183)   IGL=0
(  184)   DO JGL=1,R%NDGL
(  185)     DO JL=1,G%NLOEN(JGL)
(  186)       IGL=IGL+1
(  187)       ZWEIGHT(JL,JGL)=PWEIGHT(IGL)
(  188)     ENDDO
(  189)   ENDDO
(  190)   ZCOMP=0
(  191)   IGPTS=0
(  192) ENDIF
(  193) DO JB=1,N_REGIONS(MY_REGION_NS)
(  194) # 195 "suestaonl_mod.F90"
(  195)  IF( .NOT.LDWEIGHTED_DISTR )THEN
(  196) # 197 "suestaonl_mod.F90"
(  197)   IF (JB <= IREST) THEN
(  198)     IPTSRE = IGPTSP+1
(  199)   ELSE
(  200)     IPTSRE = IGPTSP
(  201)   ENDIF
(  202) # 203 "suestaonl_mod.F90"
(  203)   DO JNPTSRE=1,IPTSRE
(  204)     ZLAT  = 1._JPRB
(  205)     ZLAT1 = 1._JPRB
(  206)       DO JGL=1,ILEN
(  207)         IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  208)           ZLAT1  = (ZXPTLAT(JGL)-1.0_JPRB)*ZDIVID(JGL)
(  209)           IF (ZLAT1 < ZLAT) THEN
(  210)            ZLAT=ZLAT1
(  211)            INXLAT = JGL
(  212)           ENDIF
(  213)         ENDIF
(  214)       ENDDO
(  215)       IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  216)         IGL=D%NPTRFLOFF+INXLAT
(  217)         IF (D%NSTA(IGL,JB) == 0) THEN
(  218)           D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  219)         ENDIF
(  220)         D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  221)       ENDIF
(  222)       IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  223)       ZXPTLAT(INXLAT) = REAL(IXPTLAT(INXLAT),JPRB)
(  224)   ENDDO
(  225) # 226 "suestaonl_mod.F90"
(  226)  ELSE
(  227)     DO WHILE ( (JB <  N_REGIONS(MY_REGION_NS) .AND. ZCOMP < PMEDIAP) &
(  228)         & .OR. (JB == N_REGIONS(MY_REGION_NS) .AND. IGPTS < KPROCAGP(MY_REGION_NS)) )
(  229) # 230 "suestaonl_mod.F90"
(  230)       IGPTS = IGPTS + 1
(  231)       ZLAT  = 1._JPRB
(  232)       ZLAT1 = 1._JPRB






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 14

(  233) # 234 "suestaonl_mod.F90"
(  234)       DO JGL=1,ILEN
(  235)         IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  236)           ZLAT1 = (ZXPTLAT(JGL)-1.0_JPRB)*ZDIVID(JGL)
(  237)           IF (ZLAT1 < ZLAT) THEN
(  238)             ZLAT   = ZLAT1
(  239)             INXLAT = JGL
(  240)           ENDIF
(  241)         ENDIF
(  242)       ENDDO
(  243)   
(  244)       IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  245)         IGL=D%NPTRFLOFF+INXLAT
(  246)         IF (D%NSTA(IGL,JB) == 0) THEN
(  247)           D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  248)         ENDIF
(  249)         D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  250)         IF(IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1)THEN
(  251)           CALL ABORT_TRANS(' SUSTAONL: IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1')
(  252)         ENDIF
(  253)         ILON=D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  254)         ILAT=D%NFRSTLAT(MY_REGION_NS)+INXLAT-1
(  255)         ILOEN=G%NLOEN(ILAT)
(  256)         IF(ILON<1.OR.ILON>ILOEN)THEN
(  257)           CALL ABORT_TRANS(' SUSTAONL: ILON<1.OR.ILON>ILOEN')
(  258)         ENDIF
(  259)         ZCOMP = ZCOMP + ZWEIGHT(ILON,ILAT)
(  260)       ENDIF
(  261)       IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  262)       ZXPTLAT(INXLAT) = REAL(IXPTLAT(INXLAT),JPRB)
(  263)     ENDDO
(  264) # 265 "suestaonl_mod.F90"
(  265)     ZCOMP = ZCOMP - PMEDIAP
(  266) # 267 "suestaonl_mod.F90"
(  267)   ENDIF
(  268) # 269 "suestaonl_mod.F90"
(  269) ENDDO
(  270) # 271 "suestaonl_mod.F90"
(  271) IF( LDWEIGHTED_DISTR )THEN
(  272)   DEALLOCATE(ZWEIGHT)
(  273) ENDIF
(  274) ! Exchange local partitioning info to produce global view
(  275) # 276 "suestaonl_mod.F90"
(  276) IF( NPROC > 1 )THEN
(  277)   IF( LEQ_REGIONS )THEN
(  278) # 279 "suestaonl_mod.F90"
(  279)     ITAG = MTAGPART
(  280)     IPOS = 0
(  281)     DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  282)       IPOS = IPOS+1
(  283)       ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  284)       IPOS = IPOS+1
(  285)       ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  286)     ENDDO
(  287)     IF( IPOS > IBUFLEN )THEN
(  288)       CALL ABORT_TRANS(' SUSTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  289)     ENDIF
(  290)     ILSEND = IPOS






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 15

(  291) # 292 "suestaonl_mod.F90"
(  292)     DO JA=1,N_REGIONS_NS
(  293)       DO JB=1,N_REGIONS(JA)
(  294)         CALL SET2PE(IRECV,JA,JB,0,0)
(  295)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  296)         ILENG(NPRCIDS(IRECV))=ILEN
(  297)       ENDDO
(  298)     ENDDO
(  299)     IOFF(1)=0
(  300)     DO JJ=2,NPROC
(  301)       IOFF(JJ)=IOFF(JJ-1)+ILENG(JJ-1)
(  302)     ENDDO
(  303)     ALLOCATE(ICOMBUFG(SUM(ILENG(:))))
(  304)     CALL MPL_ALLGATHERV(ICOMBUF(1:ILSEND),ICOMBUFG,ILENG,CDSTRING='SUSTAONL')
(  305)     DO JA=1,N_REGIONS_NS
(  306)       IGL1 = D%NFRSTLAT(JA)
(  307)       IGL2 = D%NLSTLAT(JA)
(  308)       DO JB=1,N_REGIONS(JA)
(  309)         CALL SET2PE(IRECV,JA,JB,0,0)
(  310)         IF(IRECV /= MYPROC) THEN
(  311)           ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  312)           IPOS = IOFF(NPRCIDS(IRECV))
(  313)           DO JGL=IGL1,IGL2
(  314)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  315)             IPOS = IPOS+1
(  316)             D%NSTA(IGL,JB) = ICOMBUFG(IPOS)
(  317)             IPOS = IPOS+1
(  318)             D%NONL(IGL,JB) = ICOMBUFG(IPOS)
(  319)           ENDDO
(  320)         ENDIF
(  321)       ENDDO
(  322)     ENDDO
(  323)     DEALLOCATE(ICOMBUFG)
(  324) # 325 "suestaonl_mod.F90"
(  325)   ELSE
(  326) # 327 "suestaonl_mod.F90"
(  327)     ITAG = MTAGPART
(  328)     IPOS = 0
(  329)     DO JB=1,N_REGIONS(MY_REGION_NS)
(  330)       DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  331)         IPOS = IPOS+1
(  332)         ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,JB)
(  333)         IPOS = IPOS+1
(  334)         ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,JB)
(  335)       ENDDO
(  336)     ENDDO
(  337)     IF( IPOS > IBUFLEN )THEN
(  338)       CALL ABORT_TRANS(' SUESTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  339)     ENDIF
(  340)     ILSEND = IPOS
(  341) # 342 "suestaonl_mod.F90"
(  342)     DO JA=1,N_REGIONS_NS
(  343)       CALL SET2PE(ISEND,JA,MY_REGION_EW,0,0)
(  344)       IF(ISEND /= MYPROC) THEN
(  345)         CALL MPL_SEND(ICOMBUF(1:ILSEND),KDEST=NPRCIDS(ISEND),KTAG=ITAG, &
(  346)          & CDSTRING='SUESTAONL:') 
(  347)       ENDIF
(  348)     ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 16

(  349)     DO JA=1,N_REGIONS_NS
(  350)       CALL SET2PE(IRECV,JA,MY_REGION_EW,0,0)
(  351)       IF(IRECV /= MYPROC) THEN
(  352)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*N_REGIONS(JA)*2
(  353)         CALL MPL_RECV(ICOMBUF(1:ILEN),KSOURCE=NPRCIDS(IRECV),KTAG=ITAG, &
(  354)           & KOUNT=ILRECV,CDSTRING='SUESTAONL:')  
(  355)         IGL1 = D%NFRSTLAT(JA)
(  356)         IGL2 = D%NLSTLAT(JA)
(  357)         IPOS = 0
(  358)         DO JB=1,N_REGIONS(JA)
(  359)           DO JGL=IGL1,IGL2
(  360)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  361)             IPOS = IPOS+1
(  362)             D%NSTA(IGL,JB) = ICOMBUF(IPOS)
(  363)             IPOS = IPOS+1
(  364)             D%NONL(IGL,JB) = ICOMBUF(IPOS)
(  365)           ENDDO
(  366)         ENDDO
(  367)       ENDIF
(  368)     ENDDO
(  369) # 370 "suestaonl_mod.F90"
(  370)   ENDIF
(  371) ENDIF
(  372) # 373 "suestaonl_mod.F90"
(  373) ! Confirm consistency of global partitioning, specifically testing for
(  374) ! multiple assignments of same grid point and unassigned grid points
(  375) # 376 "suestaonl_mod.F90"
(  376) LLABORT = .FALSE.
(  377) DO JGL=1,R%NDGL
(  378)   DO JL=1,G%NLOEN(JGL)
(  379)     ICHK(JL,JGL) = 1
(  380)   ENDDO
(  381) ENDDO
(  382) DO JA=1,N_REGIONS_NS
(  383)   IGLOFF = D%NPTRFRSTLAT(JA)
(  384)   DO JB=1,N_REGIONS(JA)
(  385)     IGL1 = D%NFRSTLAT(JA)
(  386)     IGL2 = D%NLSTLAT(JA)
(  387)     DO JGL=IGL1,IGL2
(  388)       IGL = IGLOFF+JGL-IGL1
(  389)       DO JL=D%NSTA(IGL,JB),D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  390)         IF( ICHK(JL,JGL) /= 1 )THEN
(  391)           WRITE(NOUT,'(" SUESTAONL : seta=",i4," setb=",i4,&
(  392)            & " row=",I4," sta=",I4," INVALID GRID POINT")')&
(  393)            & JA,JB,JGL,JL  
(  394)           WRITE(0,'(" SUESTAONL : seta=",i4," setb=",i4,&
(  395)            & " ROW=",I4," sta=",I4," INVALID GRID POINT")')&
(  396)            & JA,JB,JGL,JL  
(  397)           LLABORT = .TRUE.
(  398)         ENDIF
(  399)         ICHK(JL,JGL) = 2
(  400)       ENDDO
(  401)     ENDDO
(  402)   ENDDO
(  403) ENDDO
(  404) DO JGL=1,R%NDGL
(  405)   DO JL=1,G%NLOEN(JGL)
(  406)     IF( ICHK(JL,JGL) /= 2 )THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:29:43      page 17

(  407)       WRITE(NOUT,'(" SUESTAONL : row=",i4," sta=",i4,&
(  408)        & " GRID POINT NOT ASSIGNED")') JGL,JL  
(  409)       LLABORT = .TRUE.
(  410)     ENDIF
(  411)   ENDDO
(  412) ENDDO
(  413) IF( LLABORT )THEN
(  414)   WRITE(NOUT,'(" SUESTAONL : inconsistent partitioning")')
(  415)   CALL ABORT_TRANS(' SUESTAONL: inconsistent partitioning')
(  416) ENDIF
(  417) # 418 "suestaonl_mod.F90"
(  418) IF (LLP1) THEN
(  419)   WRITE(UNIT=NOUT,FMT='('' OUTPUT FROM ROUTINE SUESTAONL '')')
(  420)   WRITE(UNIT=NOUT,FMT='('' '')')
(  421)   WRITE(UNIT=NOUT,FMT='('' PARTITIONING INFORMATION '')')
(  422)   WRITE(UNIT=NOUT,FMT='('' '')')
(  423)   IPROCB = MIN(32,N_REGIONS_EW)
(  424)   WRITE(UNIT=NOUT,FMT='(17X," SETB=",32(1X,I3))') (JB,JB=1,IPROCB)
(  425)   DO JA=1,N_REGIONS_NS
(  426)     IPROCB = MIN(32,N_REGIONS(JA))
(  427)     WRITE(UNIT=NOUT,FMT='('' '')')
(  428)     IGLOFF = D%NPTRFRSTLAT(JA)
(  429)     IGL1 = D%NFRSTLAT(JA)
(  430)     IGL2 = D%NLSTLAT(JA)
(  431)     DO JGL=IGL1,IGL2
(  432)       IGL=IGLOFF+JGL-IGL1
(  433)       WRITE(UNIT=NOUT,FMT='(" SETA=",I3," LAT=",I3," NSTA=",&
(  434)        & 32(1X,I3))') JA,JGL,(D%NSTA(IGL,JB),JB=1,IPROCB)  
(  435)       WRITE(UNIT=NOUT,FMT='(" SETA=",I3," LAT=",I3," D%NONL=",&
(  436)        & 32(1X,I3))') JA,JGL,(D%NONL(IGL,JB),JB=1,IPROCB)  
(  437)       WRITE(UNIT=NOUT,FMT='('' '')')
(  438)     ENDDO
(  439)     WRITE(UNIT=NOUT,FMT='('' '')')
(  440)   ENDDO
(  441)   WRITE(UNIT=NOUT,FMT='('' '')')
(  442)   WRITE(UNIT=NOUT,FMT='('' '')')
(  443) ENDIF
(  444) IF (LHOOK) CALL DR_HOOK('SUESTAONL_MOD:SUESTAONL',1,ZHOOK_HANDLE)
(  445) # 446 "suestaonl_mod.F90"
(  446) !     ------------------------------------------------------------------
(  447) # 448 "suestaonl_mod.F90"
(  448) END SUBROUTINE SUESTAONL
(  449) END MODULE SUESTAONL_MOD
