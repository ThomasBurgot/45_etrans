


NVFORTRAN (Version    20.11)          02/16/2022  17:28:03      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: evdtuv_mod.F90

(    1) MODULE EVDTUV_MOD
(    2) CONTAINS
(    3) SUBROUTINE EVDTUV(KFIELD,KFLDPTR,PVOR,PDIV,PU,PV,PSPMEANU,PSPMEANV)
(    4) 
(    5) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(    6) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(    7) 
(    8) !USE TPM_DIM
(    9) !USE TPM_FIELDS
(   10) USE TPMALD_FIELDS   ,ONLY : FALD, FALD_RLEPINM
(   11) USE TPMALD_GEO      ,ONLY : GALD
(   12) USE TPMALD_DISTR    ,ONLY : DALD, DALD_NCPL2M, DALD_NPME
(   13) USE TPM_DISTR       ,ONLY : D, D_NUMP, D_MYMS
(   14) 
(   15) !**** *VDTUV* - Compute U,V in  spectral space
(   16) 
(   17) !     Purpose.
(   18) !     --------
(   19) !        In Laplace space compute the the winds
(   20) !        from vorticity and divergence.
(   21) 
(   22) !**   Interface.
(   23) !     ----------
(   24) !        CALL VDTUV(...)
(   25) 
(   26) !        Explicit arguments :  KM -zonal wavenumber (input-c)
(   27) !        --------------------  KFIELD - number of fields (input-c)
(   28) !                              KFLDPTR - fields pointers
(   29) !                              PEPSNM - REPSNM for wavenumber KM (input-c)
(   30) !                              PVOR(NLEI1,2*KFIELD) - vorticity (input)
(   31) !                              PDIV(NLEI1,2*KFIELD) - divergence (input)
(   32) !                              PU(NLEI1,2*KFIELD)   - u wind (output)
(   33) !                              PV(NLEI1,2*KFIELD)   - v wind (output)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:03      page 2

(   34) !        Organisation within NLEI1:
(   35) !        NLEI1 = NSMAX+4+mod(NSMAX+4+1,2)
(   36) !                        overdimensioning
(   37) !        1        : n=NSMAX+2
(   38) !        2        : n=NSMAX+1
(   39) !        3        : n=NSMAX
(   40) !        .        :
(   41) !        .        :
(   42) !        NSMAX+3  : n=0
(   43) !        NSMAX+4  : n=-1
(   44) 
(   45) !        Implicit arguments :  Eigenvalues of inverse Laplace operator
(   46) !        --------------------  from YOMLAP
(   47) 
(   48) !     Method.
(   49) !     -------
(   50) 
(   51) !     Externals.   None.
(   52) !     ----------
(   53) 
(   54) !     Reference.
(   55) !     ----------
(   56) !        ECMWF Research Department documentation of the IFS
(   57) !        Temperton, 1991, MWR 119 p1303
(   58) 
(   59) !     Author.
(   60) !     -------
(   61) !        Mats Hamrud and Philippe Courtier  *ECMWF*
(   62) 
(   63) !     Modifications.
(   64) !     --------------
(   65) !        Original : 00-02-01 From VDTUV in IFS CY22R1
(   66) !        01-08-27 : R. El Khatib Fix for NPROMATR /= 0
(   67) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   68) !     ------------------------------------------------------------------
(   69) 
(   70) IMPLICIT NONE
(   71) 
(   72) INTEGER(KIND=JPIM), INTENT(IN)  :: KFIELD
(   73) REAL(KIND=JPRB),    INTENT(IN)  :: PVOR(:,:,:),PDIV(:,:,:)
(   74) REAL(KIND=JPRB),    INTENT(OUT) :: PU  (:,:,:),PV  (:,:,:)
(   75) 
(   76) INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: KFLDPTR(:)
(   77) REAL(KIND=JPRB),    OPTIONAL, INTENT(IN) :: PSPMEANU(:),PSPMEANV(:)
(   78) 
(   79) INTEGER(KIND=JPIM) :: II, IJ, IR, J, JN, IN, IFLD
(   80) INTEGER(KIND=JPIM) :: JM, IM
(   81) INTEGER(KIND=JPIM) :: JNMAX
(   82) 
(   83) REAL(KIND=JPRB) :: ZLEPINM
(   84) REAL(KIND=JPRB) :: ZKM
(   85) REAL(KIND=JPRB) :: ZIN
(   86) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   87) IF (LHOOK) CALL DR_HOOK('EVDTUV_MOD:EVDTUV',0,ZHOOK_HANDLE)
(   88) 
(   89) JNMAX = MAXVAL (DALD%NCPL2M)
(   90) 
(   91) !$acc parallel loop collapse (3) private (JM, J, JN, IM, IN, ZIN) &






NVFORTRAN (Version    20.11)          02/16/2022  17:28:03      page 3

(   92) !$acc & present (D_NUMP, D_MYMS, DALD_NCPL2M, PU, PV, PVOR, PDIV)
(   93) DO J=1,2*KFIELD
(   94)   DO JM = 1, D_NUMP
(   95)     DO JN=1,JNMAX,2
(   96)       IM = D_MYMS (JM)
(   97)       IF (JN <= DALD_NCPL2M(IM)) THEN
(   98)         IN = (JN-1)/2
(   99)         ZIN = REAL(IN,JPRB)*GALD%EYWN
(  100)         PU(JN  ,JM,J) = -ZIN*PVOR(JN+1,JM,J)
(  101)         PU(JN+1,JM,J) =  ZIN*PVOR(JN  ,JM,J)
(  102)         PV(JN  ,JM,J) = -ZIN*PDIV(JN+1,JM,J)
(  103)         PV(JN+1,JM,J) =  ZIN*PDIV(JN  ,JM,J)
(  104)       ENDIF
(  105)     ENDDO
(  106)   ENDDO
(  107) ENDDO
(  108) !$acc end parallel loop
(  109) 
(  110) !$acc parallel loop collapse (3) private (JM, J, JN, IM, ZKM, IR, II, IJ, ZLEPINM) &
(  111) !$acc & present (D_NUMP, D_MYMS, DALD_NCPL2M, FALD_RLEPINM, PU, PV, PDIV, PVOR)
(  112) DO J=1,KFIELD
(  113)   DO JM = 1, D_NUMP
(  114)     DO JN=1,JNMAX
(  115)       IM = D_MYMS (JM)
(  116)       ZKM=REAL(IM,JPRB)*GALD%EXWN
(  117)       IR = 2*J-1
(  118)       II = IR+1
(  119)       IF (JN <= DALD_NCPL2M(IM)) THEN
(  120)         IJ=(JN-1)/2
(  121)         ZLEPINM = FALD_RLEPINM(DALD_NPME(IM)+IJ)
(  122)         PU(JN,JM,IR)= ZLEPINM*(-ZKM*PDIV(JN,JM,II)-PU(JN,JM,IR))
(  123)         PU(JN,JM,II)= ZLEPINM*( ZKM*PDIV(JN,JM,IR)-PU(JN,JM,II))
(  124)         PV(JN,JM,IR)= ZLEPINM*(-ZKM*PVOR(JN,JM,II)+PV(JN,JM,IR))
(  125)         PV(JN,JM,II)= ZLEPINM*( ZKM*PVOR(JN,JM,IR)+PV(JN,JM,II))
(  126)       ENDIF
(  127)     ENDDO
(  128)   ENDDO
(  129) ENDDO
(  130) !$acc end parallel loop
(  131) 
(  132) IF (PRESENT(KFLDPTR)) THEN
(  133) !$acc parallel loop collapse (2) private (J, JM, IM, IR, IFLD) &
(  134) !$acc & present (D_NUMP, D_MYMS, PU, PV) copyin (PSPMEANU, PSPMEANV, KFLDPTR)
(  135)   DO J = 1, KFIELD
(  136)     DO JM = 1, D_NUMP
(  137)       IM = D_MYMS (JM)
(  138)       IF (IM == 0) THEN
(  139)         IR = 2*J-1
(  140)         IFLD=KFLDPTR(J)
(  141)         PU(1,JM,IR)=PSPMEANU(IFLD)
(  142)         PV(1,JM,IR)=PSPMEANV(IFLD)
(  143)       ENDIF
(  144)     ENDDO
(  145)   ENDDO
(  146) !$acc end parallel loop
(  147) ELSE
(  148) !$acc parallel loop collapse (2) private (J, JM, IM, IR) &
(  149) !$acc & present (D_NUMP, D_MYMS, PU, PV) copyin (PSPMEANU, PSPMEANV)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:03      page 4

(  150)   DO J = 1, KFIELD
(  151)     DO JM = 1, D_NUMP
(  152)       IM = D_MYMS (JM)
(  153)       IF (IM == 0) THEN
(  154)         IR = 2*J-1
(  155)         PU(1,JM,IR)=PSPMEANU(J)
(  156)         PV(1,JM,IR)=PSPMEANV(J)
(  157)       ENDIF
(  158)     ENDDO
(  159)   ENDDO
(  160) !$acc end parallel loop
(  161) ENDIF
(  162) 
(  163) IF (LHOOK) CALL DR_HOOK('EVDTUV_MOD:EVDTUV',1,ZHOOK_HANDLE)
(  164) 
(  165) END SUBROUTINE EVDTUV
(  166) END MODULE EVDTUV_MOD















































NVFORTRAN (Version    20.11)          02/16/2022  17:28:03      page 5

(    1) # 1 "evdtuv_mod.F90"
(    1) MODULE EVDTUV_MOD
(    2) CONTAINS
(    3) SUBROUTINE EVDTUV(KFIELD,KFLDPTR,PVOR,PDIV,PU,PV,PSPMEANU,PSPMEANV)
(    4) # 5 "evdtuv_mod.F90"
(    5) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(    6) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(    7) # 8 "evdtuv_mod.F90"
(    8) !USE TPM_DIM
(    9) !USE TPM_FIELDS
(   10) USE TPMALD_FIELDS   ,ONLY : FALD, FALD_RLEPINM
(   11) USE TPMALD_GEO      ,ONLY : GALD
(   12) USE TPMALD_DISTR    ,ONLY : DALD, DALD_NCPL2M, DALD_NPME
(   13) USE TPM_DISTR       ,ONLY : D, D_NUMP, D_MYMS
(   14) # 15 "evdtuv_mod.F90"
(   15) !**** *VDTUV* - Compute U,V in  spectral space
(   16) # 17 "evdtuv_mod.F90"
(   17) !     Purpose.
(   18) !     --------
(   19) !        In Laplace space compute the the winds
(   20) !        from vorticity and divergence.
(   21) # 22 "evdtuv_mod.F90"
(   22) !**   Interface.
(   23) !     ----------
(   24) !        CALL VDTUV(...)
(   25) # 26 "evdtuv_mod.F90"
(   26) !        Explicit arguments :  KM -zonal wavenumber (input-c)
(   27) !        --------------------  KFIELD - number of fields (input-c)
(   28) !                              KFLDPTR - fields pointers
(   29) !                              PEPSNM - REPSNM for wavenumber KM (input-c)
(   30) !                              PVOR(NLEI1,2*KFIELD) - vorticity (input)
(   31) !                              PDIV(NLEI1,2*KFIELD) - divergence (input)
(   32) !                              PU(NLEI1,2*KFIELD)   - u wind (output)
(   33) !                              PV(NLEI1,2*KFIELD)   - v wind (output)
(   34) !        Organisation within NLEI1:
(   35) !        NLEI1 = NSMAX+4+mod(NSMAX+4+1,2)
(   36) !                        overdimensioning
(   37) !        1        : n=NSMAX+2
(   38) !        2        : n=NSMAX+1
(   39) !        3        : n=NSMAX
(   40) !        .        :
(   41) !        .        :
(   42) !        NSMAX+3  : n=0
(   43) !        NSMAX+4  : n=-1
(   44) # 45 "evdtuv_mod.F90"
(   45) !        Implicit arguments :  Eigenvalues of inverse Laplace operator
(   46) !        --------------------  from YOMLAP
(   47) # 48 "evdtuv_mod.F90"
(   48) !     Method.
(   49) !     -------
(   50) # 51 "evdtuv_mod.F90"
(   51) !     Externals.   None.
(   52) !     ----------
(   53) # 54 "evdtuv_mod.F90"
(   54) !     Reference.
(   55) !     ----------
(   56) !        ECMWF Research Department documentation of the IFS
(   57) !        Temperton, 1991, MWR 119 p1303






NVFORTRAN (Version    20.11)          02/16/2022  17:28:03      page 6

(   58) # 59 "evdtuv_mod.F90"
(   59) !     Author.
(   60) !     -------
(   61) !        Mats Hamrud and Philippe Courtier  *ECMWF*
(   62) # 63 "evdtuv_mod.F90"
(   63) !     Modifications.
(   64) !     --------------
(   65) !        Original : 00-02-01 From VDTUV in IFS CY22R1
(   66) !        01-08-27 : R. El Khatib Fix for NPROMATR /= 0
(   67) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   68) !     ------------------------------------------------------------------
(   69) # 70 "evdtuv_mod.F90"
(   70) IMPLICIT NONE
(   71) # 72 "evdtuv_mod.F90"
(   72) INTEGER(KIND=JPIM), INTENT(IN)  :: KFIELD
(   73) REAL(KIND=JPRB),    INTENT(IN)  :: PVOR(:,:,:),PDIV(:,:,:)
(   74) REAL(KIND=JPRB),    INTENT(OUT) :: PU  (:,:,:),PV  (:,:,:)
(   75) # 76 "evdtuv_mod.F90"
(   76) INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: KFLDPTR(:)
(   77) REAL(KIND=JPRB),    OPTIONAL, INTENT(IN) :: PSPMEANU(:),PSPMEANV(:)
(   78) # 79 "evdtuv_mod.F90"
(   79) INTEGER(KIND=JPIM) :: II, IJ, IR, J, JN, IN, IFLD
(   80) INTEGER(KIND=JPIM) :: JM, IM
(   81) INTEGER(KIND=JPIM) :: JNMAX
(   82) # 83 "evdtuv_mod.F90"
(   83) REAL(KIND=JPRB) :: ZLEPINM
(   84) REAL(KIND=JPRB) :: ZKM
(   85) REAL(KIND=JPRB) :: ZIN
(   86) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   87) IF (LHOOK) CALL DR_HOOK('EVDTUV_MOD:EVDTUV',0,ZHOOK_HANDLE)
(   88) # 89 "evdtuv_mod.F90"
(   89) JNMAX = MAXVAL (DALD%NCPL2M)
(   90) # 91 "evdtuv_mod.F90"
(   92) !$acc & present (D_NUMP, D_MYMS, DALD_NCPL2M, PU, PV, PVOR, PDIV)
(   93) DO J=1,2*KFIELD
(   94)   DO JM = 1, D_NUMP
(   95)     DO JN=1,JNMAX,2
(   96)       IM = D_MYMS (JM)
(   97)       IF (JN <= DALD_NCPL2M(IM)) THEN
(   98)         IN = (JN-1)/2
(   99)         ZIN = REAL(IN,JPRB)*GALD%EYWN
(  100)         PU(JN  ,JM,J) = -ZIN*PVOR(JN+1,JM,J)
(  101)         PU(JN+1,JM,J) =  ZIN*PVOR(JN  ,JM,J)
(  102)         PV(JN  ,JM,J) = -ZIN*PDIV(JN+1,JM,J)
(  103)         PV(JN+1,JM,J) =  ZIN*PDIV(JN  ,JM,J)
(  104)       ENDIF
(  105)     ENDDO
(  106)   ENDDO
(  107) ENDDO
(  108) !$acc end parallel loop
(  109) # 110 "evdtuv_mod.F90"
(  111) !$acc & present (D_NUMP, D_MYMS, DALD_NCPL2M, FALD_RLEPINM, PU, PV, PDIV, PVOR)
(  112) DO J=1,KFIELD
(  113)   DO JM = 1, D_NUMP
(  114)     DO JN=1,JNMAX
(  115)       IM = D_MYMS (JM)
(  116)       ZKM=REAL(IM,JPRB)*GALD%EXWN
(  117)       IR = 2*J-1






NVFORTRAN (Version    20.11)          02/16/2022  17:28:03      page 7

(  118)       II = IR+1
(  119)       IF (JN <= DALD_NCPL2M(IM)) THEN
(  120)         IJ=(JN-1)/2
(  121)         ZLEPINM = FALD_RLEPINM(DALD_NPME(IM)+IJ)
(  122)         PU(JN,JM,IR)= ZLEPINM*(-ZKM*PDIV(JN,JM,II)-PU(JN,JM,IR))
(  123)         PU(JN,JM,II)= ZLEPINM*( ZKM*PDIV(JN,JM,IR)-PU(JN,JM,II))
(  124)         PV(JN,JM,IR)= ZLEPINM*(-ZKM*PVOR(JN,JM,II)+PV(JN,JM,IR))
(  125)         PV(JN,JM,II)= ZLEPINM*( ZKM*PVOR(JN,JM,IR)+PV(JN,JM,II))
(  126)       ENDIF
(  127)     ENDDO
(  128)   ENDDO
(  129) ENDDO
(  130) !$acc end parallel loop
(  131) # 132 "evdtuv_mod.F90"
(  132) IF (PRESENT(KFLDPTR)) THEN
(  134) !$acc & present (D_NUMP, D_MYMS, PU, PV) copyin (PSPMEANU, PSPMEANV, KFLDPTR)
(  135)   DO J = 1, KFIELD
(  136)     DO JM = 1, D_NUMP
(  137)       IM = D_MYMS (JM)
(  138)       IF (IM == 0) THEN
(  139)         IR = 2*J-1
(  140)         IFLD=KFLDPTR(J)
(  141)         PU(1,JM,IR)=PSPMEANU(IFLD)
(  142)         PV(1,JM,IR)=PSPMEANV(IFLD)
(  143)       ENDIF
(  144)     ENDDO
(  145)   ENDDO
(  146) !$acc end parallel loop
(  147) ELSE
(  149) !$acc & present (D_NUMP, D_MYMS, PU, PV) copyin (PSPMEANU, PSPMEANV)
(  150)   DO J = 1, KFIELD
(  151)     DO JM = 1, D_NUMP
(  152)       IM = D_MYMS (JM)
(  153)       IF (IM == 0) THEN
(  154)         IR = 2*J-1
(  155)         PU(1,JM,IR)=PSPMEANU(J)
(  156)         PV(1,JM,IR)=PSPMEANV(J)
(  157)       ENDIF
(  158)     ENDDO
(  159)   ENDDO
(  160) !$acc end parallel loop
(  161) ENDIF
(  162) # 163 "evdtuv_mod.F90"
(  163) IF (LHOOK) CALL DR_HOOK('EVDTUV_MOD:EVDTUV',1,ZHOOK_HANDLE)
(  164) # 165 "evdtuv_mod.F90"
(  165) END SUBROUTINE EVDTUV
(  166) END MODULE EVDTUV_MOD
