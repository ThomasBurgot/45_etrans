


NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: suemp_trans_mod.F90

(    1) MODULE SUEMP_TRANS_MOD
(    2) CONTAINS
(    3) SUBROUTINE SUEMP_TRANS
(    4) 
(    5) ! Set up distributed environment for the transform package (part 2)
(    6) !        R. El Khatib 09-Aug-2013 Allow LEQ_REGIONS
(    7) 
(    8) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(    9) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   10) 
(   11) USE TPM_GEN         ,ONLY : NOUT, NPRINTLEV
(   12) USE TPM_DIM         ,ONLY : R
(   13) USE TPM_GEOMETRY    ,ONLY : G
(   14) USE TPM_DISTR       ,ONLY : D, LEQ_REGIONS, NPRTRNS, NPRTRV, NPRTRW, MYSETW, NPROC, MYPROC
(   15) USE TPMALD_DIM      ,ONLY : RALD
(   16) !USE TPMALD_DISTR
(   17) !USE SUWAVEDI_MOD
(   18) !USE PE2SET_MOD
(   19) USE SUMPLATF_MOD    ,ONLY : SUMPLATF
(   20) USE SUEMPLAT_MOD    ,ONLY : SUEMPLAT
(   21) USE SUESTAONL_MOD   ,ONLY : SUESTAONL
(   22) USE MYSENDSET_MOD   ,ONLY : MYSENDSET
(   23) USE MYRECVSET_MOD   ,ONLY : MYRECVSET
(   24) USE EQ_REGIONS_MOD  ,ONLY : MY_REGION_EW, MY_REGION_NS,           &
(   25)      &                      N_REGIONS, N_REGIONS_EW, N_REGIONS_NS
(   26) !
(   27) 
(   28) IMPLICIT NONE
(   29) 
(   30) INTEGER(KIND=JPIM) :: JM,JMLOC
(   31) INTEGER(KIND=JPIM) :: JGL,IGL,IPLAT,ISENDSET,IRECVSET,JML,IPOS,IM






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 2

(   32) INTEGER(KIND=JPIM) :: I1,I2,I3,IAUX0,IAUX1,JA1
(   33) INTEGER(KIND=JPIM) :: IGPTOT,IMEDIAP,IRESTM,JA,JB,IOFF
(   34) INTEGER(KIND=JPIM), ALLOCATABLE :: IGPTOTL(:,:)
(   35) 
(   36) REAL(KIND=JPRB) :: ZMEDIAP
(   37) 
(   38) LOGICAL    :: LLP1,LLP2
(   39) REAL(KIND=JPRB),ALLOCATABLE :: ZDUM(:)
(   40) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   41) 
(   42) !     ------------------------------------------------------------------
(   43) 
(   44) IF (LHOOK) CALL DR_HOOK('SUEMP_TRANS_MOD:SUEMP_TRANS',0,ZHOOK_HANDLE)
(   45) LLP1 = NPRINTLEV>0
(   46) LLP2 = NPRINTLEV>1
(   47) IF(LLP1) WRITE(NOUT,*) '=== ENTER ROUTINE SUEMP_TRANS ==='
(   48) 
(   49) IF(.NOT.D%LGRIDONLY) THEN
(   50)         
(   51) ALLOCATE(D%NULTPP(NPRTRNS))
(   52) IF(LLP2)WRITE(NOUT,9) 'D%NULTPP   ',SIZE(D%NULTPP   ),SHAPE(D%NULTPP   )
(   53) ALLOCATE(D%NPTRLS(NPRTRNS))
(   54) IF(LLP2)WRITE(NOUT,9) 'D%NPTRLS   ',SIZE(D%NPTRLS   ),SHAPE(D%NPTRLS   )
(   55) ALLOCATE(D%NPROCL(R%NDGL))
(   56) IF(LLP2)WRITE(NOUT,9) 'D%NPROCL   ',SIZE(D%NPROCL   ),SHAPE(D%NPROCL   )
(   57) 
(   58) CALL SUMPLATF(R%NDGL,NPRTRNS,MYSETW,D%NULTPP,D%NPROCL,D%NPTRLS)
(   59) D%NDGL_FS = D%NULTPP(MYSETW)
(   60) 
(   61) ! Help arrays for spectral to fourier space transposition
(   62) ALLOCATE(D%NLTSGTB (NPRTRNS+1))
(   63) IF(LLP2)WRITE(NOUT,9) 'D%NLTSGTB ',SIZE(D%NLTSGTB),SHAPE(D%NLTSGTB)
(   64) ALLOCATE(D%NLTSFTB (NPRTRNS+1))
(   65) IF(LLP2)WRITE(NOUT,9) 'D%NLTSFTB ',SIZE(D%NLTSFTB),SHAPE(D%NLTSFTB)
(   66) ALLOCATE(D%NSTAGT0B(NPRTRNS+1))
(   67) IF(LLP2)WRITE(NOUT,9) 'D%NSTAGT0B ',SIZE(D%NSTAGT0B),SHAPE(D%NSTAGT0B)
(   68) ALLOCATE(D%NSTAGT1B(NPRTRNS+1))
(   69) IF(LLP2)WRITE(NOUT,9) 'D%NSTAGT1B ',SIZE(D%NSTAGT1B),SHAPE(D%NSTAGT1B)
(   70) ALLOCATE(D%MSTABF  (NPRTRNS+1))
(   71) IF(LLP2)WRITE(NOUT,9) 'D%MSTABF ',SIZE(D%MSTABF),SHAPE(D%MSTABF)
(   72) 
(   73) D%NLTSGTB(:) = 0
(   74) DO JGL=1,D%NDGL_FS
(   75)   IGL = D%NPTRLS(MYSETW)+JGL-1
(   76)   DO JM=0,G%NMEN(IGL)
(   77)     D%NLTSGTB(D%NPROCM(JM)) = D%NLTSGTB(D%NPROCM(JM))+1
(   78)   ENDDO
(   79) ENDDO
(   80) DO JA=1,NPRTRW
(   81)   IPLAT = 0
(   82)   DO JGL=1,D%NULTPP(JA)
(   83)     IGL = D%NPTRLS(JA)+JGL-1
(   84)     DO JM=1,D%NUMP
(   85)       IF(IGL > R%NDGNH-G%NDGLU(D%MYMS(JM)) .AND. IGL <= R%NDGNH+G%NDGLU(D%MYMS(JM))) THEN
(   86)         IPLAT = IPLAT + 1
(   87)       ENDIF
(   88)     ENDDO
(   89)   ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 3

(   90)   D%NLTSFTB(JA) = IPLAT
(   91) ENDDO
(   92) 
(   93) DO JA=1,NPRTRW-1
(   94)   ISENDSET = MYSENDSET(NPRTRW,MYSETW,JA)
(   95)   IRECVSET = MYRECVSET(NPRTRW,MYSETW,JA)
(   96)   D%MSTABF(IRECVSET) = ISENDSET
(   97) ENDDO
(   98) D%MSTABF(MYSETW) = MYSETW
(   99) 
(  100) ALLOCATE(D%NPNTGTB0(0:RALD%NMSMAX,D%NDGL_FS))
(  101) IF(LLP2)WRITE(NOUT,9) 'D%NPNTGTB0 ',SIZE(D%NPNTGTB0 ),SHAPE(D%NPNTGTB0 )
(  102) ALLOCATE(D%NPNTGTB1(D%NUMP,R%NDGL))
(  103) IF(LLP2)WRITE(NOUT,9) 'D%NPNTGTB1 ',SIZE(D%NPNTGTB1 ),SHAPE(D%NPNTGTB1 )
(  104) 
(  105) DO JA=1,NPRTRW
(  106)   IPOS = 0
(  107)   DO JGL=1,D%NULTPP(MYSETW)
(  108)     IGL = D%NPTRLS(MYSETW) + JGL - 1
(  109)     DO JML=D%NPTRMS(JA),D%NPTRMS(JA)+D%NUMPP(JA)-1
(  110)       IM = D%NALLMS(JML)
(  111)       IF (IM  <=  G%NMEN(IGL)) THEN
(  112)         D%NPNTGTB0(IM,JGL) = IPOS
(  113)         IPOS = IPOS+1
(  114)       ELSE
(  115)         D%NPNTGTB0(IM,JGL) = -99
(  116)       ENDIF
(  117)     ENDDO
(  118)   ENDDO
(  119) ENDDO
(  120) 
(  121) DO JA=1,NPRTRW
(  122)   IPOS = 0
(  123)   DO JGL=1,D%NULTPP(JA)
(  124)     IGL = D%NPTRLS(JA) + JGL - 1
(  125)     DO JM=1,D%NUMP
(  126)       IM = D%MYMS(JM)
(  127)       IF (IM  <=  G%NMEN(IGL)) THEN
(  128)         D%NPNTGTB1(JM,IGL) = IPOS
(  129)         IPOS = IPOS+1
(  130)       ELSE
(  131)         D%NPNTGTB1(JM,IGL) = -99
(  132)       ENDIF
(  133)     ENDDO
(  134)   ENDDO
(  135) ENDDO
(  136) 
(  137) IAUX0 = 0
(  138) IAUX1 = 0
(  139) DO JA=1,NPRTRNS-1
(  140)   I1 = MYSENDSET(NPRTRNS,MYSETW,JA)
(  141)   I2 = MYRECVSET(NPRTRNS,MYSETW,JA)
(  142)   DO JA1=1,NPRTRNS-1
(  143)     IF(MYSENDSET(NPRTRNS,MYSETW,JA1) == I2) I3 =MYRECVSET(NPRTRNS,MYSETW,JA1)
(  144)   ENDDO
(  145)   IAUX0 = MAX(D%NLTSFTB(I1),D%NLTSGTB(I2),IAUX0)
(  146)   IAUX1 = MAX(D%NLTSGTB(I2),D%NLTSFTB(I3),IAUX1)
(  147) ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 4

(  148) IAUX0 = MAX(D%NLTSGTB(MYSETW),IAUX0)
(  149) IAUX1 = MAX(D%NLTSGTB(MYSETW),IAUX1)
(  150) DO JA=1,NPRTRNS+1
(  151)   D%NSTAGT0B(JA) = (JA-1)*IAUX0
(  152)   D%NSTAGT1B(JA) = (JA-1)*IAUX1
(  153) ENDDO
(  154) D%NLENGT0B = IAUX0*NPRTRNS
(  155) D%NLENGT1B = IAUX1*NPRTRNS
(  156) 
(  157) ENDIF
(  158) 
(  159) ! GRIDPOINT SPACE
(  160) 
(  161) ALLOCATE(D%NFRSTLAT(N_REGIONS_NS))
(  162) IF(LLP2)WRITE(NOUT,9) 'D%NFRSTLAT ',SIZE(D%NFRSTLAT ),SHAPE(D%NFRSTLAT )
(  163) ALLOCATE(D%NLSTLAT(N_REGIONS_NS))
(  164) IF(LLP2)WRITE(NOUT,9) 'D%NLSTLAT  ',SIZE(D%NLSTLAT  ),SHAPE(D%NLSTLAT  )
(  165) ALLOCATE(D%NPTRLAT(R%NDGL))
(  166) IF(LLP2)WRITE(NOUT,9) 'D%NPTRLAT  ',SIZE(D%NPTRLAT  ),SHAPE(D%NPTRLAT  )
(  167) ALLOCATE(D%NPTRFRSTLAT(N_REGIONS_NS))
(  168) IF(LLP2)WRITE(NOUT,9) 'D%NPTRFRSTLAT',SIZE(D%NPTRFRSTLAT),SHAPE(D%NPTRFRSTLAT)
(  169) ALLOCATE(D%NPTRLSTLAT(N_REGIONS_NS))
(  170) IF(LLP2)WRITE(NOUT,9)'D%NPTRLSTLAT',SIZE(D%NPTRLSTLAT),SHAPE(D%NPTRLSTLAT)
(  171) ALLOCATE(D%LSPLITLAT(R%NDGL))
(  172) IF(LLP2)WRITE(NOUT,9) 'D%LSPLITLAT',SIZE(D%LSPLITLAT),SHAPE(D%LSPLITLAT)
(  173) ALLOCATE(D%NPROCA_GP(N_REGIONS_NS))
(  174) IF(LLP2)WRITE(NOUT,9) 'D%NPROCA_GP',SIZE(D%NPROCA_GP),SHAPE(D%NPROCA_GP)
(  175) 
(  176) 
(  177) IF(.NOT.D%LWEIGHTED_DISTR) THEN
(  178)   ALLOCATE(ZDUM(1))
(  179)   CALL SUEMPLAT(R%NDGL,NPROC,N_REGIONS_NS,MY_REGION_NS,D%LSPLIT, LEQ_REGIONS,&
(  180)   & D%NFRSTLAT,D%NLSTLAT,D%NFRSTLOFF,D%NPTRLAT,&
(  181)   & D%NPTRFRSTLAT,D%NPTRLSTLAT,D%NPTRFLOFF,&
(  182)   & ZDUM,D%LWEIGHTED_DISTR,ZMEDIAP,D%NPROCA_GP,&
(  183)   & IMEDIAP,IRESTM,D%LSPLITLAT,MYPROC,G%NLOEN,RALD%NDGUX)
(  184) ELSE
(  185)  CALL SUEMPLAT(R%NDGL,NPROC,N_REGIONS_NS,MY_REGION_NS,D%LSPLIT, LEQ_REGIONS,&
(  186)   & D%NFRSTLAT,D%NLSTLAT,D%NFRSTLOFF,D%NPTRLAT,&
(  187)   & D%NPTRFRSTLAT,D%NPTRLSTLAT,D%NPTRFLOFF,&
(  188)   & D%RWEIGHT,D%LWEIGHTED_DISTR,ZMEDIAP,D%NPROCA_GP,&
(  189)   & IMEDIAP,IRESTM,D%LSPLITLAT,MYPROC,G%NLOEN,RALD%NDGUX)  
(  190) ENDIF
(  191) D%NDGL_GP = D%NLSTLAT(MY_REGION_NS)-D%NFRSTLOFF
(  192) 
(  193) IF (LLP1) THEN
(  194)   IF(.NOT.D%LGRIDONLY) THEN      
(  195)   WRITE(NOUT,FMT='(/'' OUTPUT FROM ROUTINE SUEMPLAT: ''/)')
(  196)   WRITE(NOUT,FMT='('' D%NULTPP '')')
(  197)   WRITE(NOUT,FMT='(20(1X,I4))') D%NULTPP(1:NPRTRNS)
(  198)   WRITE(NOUT,FMT='('' D%NPROCL '')')
(  199)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPROCL(1:R%NDGL)
(  200)   ENDIF
(  201)   WRITE(NOUT,FMT='('' D%NFRSTLAT '')')
(  202)   WRITE(NOUT,FMT='(20(1X,I4))') D%NFRSTLAT(1:N_REGIONS_NS)
(  203)   WRITE(NOUT,FMT='('' D%NLSTLAT '')')
(  204)   WRITE(NOUT,FMT='(20(1X,I4))') D%NLSTLAT(1:N_REGIONS_NS)
(  205)   WRITE(NOUT,FMT='('' D%NFRSTLOFF  D%NPTRFLOFF '')')






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 5

(  206)   WRITE(NOUT,FMT='(2(1X,I6))') D%NFRSTLOFF, D%NPTRFLOFF
(  207)   WRITE(NOUT,FMT='('' D%NPTRLAT '')')
(  208)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPTRLAT(1:R%NDGL)
(  209)   WRITE(NOUT,FMT='('' D%LSPLITLAT '')')
(  210)   WRITE(NOUT,FMT='(50(1X,L1))') D%LSPLITLAT(1:R%NDGL)
(  211)   WRITE(NOUT,FMT='('' D%NPTRFRSTLAT '')')
(  212)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPTRFRSTLAT(1:N_REGIONS_NS)
(  213)   WRITE(NOUT,FMT='('' D%NPTRLSTLAT '')')
(  214)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPTRLSTLAT(1:N_REGIONS_NS)
(  215)   WRITE(NOUT,FMT='(/)')
(  216) ENDIF
(  217) ALLOCATE(D%NSTA(R%NDGL+N_REGIONS_NS-1,N_REGIONS_EW))
(  218) IF(LLP2)WRITE(NOUT,9) 'D%NSTA     ',SIZE(D%NSTA     ),SHAPE(D%NSTA     )
(  219) ALLOCATE(D%NONL(R%NDGL+N_REGIONS_NS-1,N_REGIONS_EW))
(  220) IF(LLP2)WRITE(NOUT,9) 'D%NONL     ',SIZE(D%NONL     ),SHAPE(D%NONL     )
(  221) 
(  222) IF(.NOT.D%LWEIGHTED_DISTR) THEN
(  223)  CALL SUESTAONL(IMEDIAP,IRESTM,D%LWEIGHTED_DISTR,ZDUM,ZMEDIAP,D%NPROCA_GP)
(  224) ELSE
(  225)  CALL SUESTAONL(IMEDIAP,IRESTM,D%LWEIGHTED_DISTR,D%RWEIGHT,ZMEDIAP,D%NPROCA_GP)
(  226) ENDIF
(  227) !  IGPTOTL is the number of grid points in each individual processor
(  228) ALLOCATE(IGPTOTL(N_REGIONS_NS,N_REGIONS_EW))
(  229) IGPTOTL(:,:)=0
(  230) DO JA=1,N_REGIONS_NS
(  231)   DO JB=1,N_REGIONS(JA)
(  232)     IGPTOT = 0
(  233)     DO JGL=D%NPTRFRSTLAT(JA),D%NPTRLSTLAT(JA)
(  234)       IGPTOT = IGPTOT+D%NONL(JGL,JB)
(  235)     ENDDO
(  236)     IGPTOTL(JA,JB) = IGPTOT
(  237)   ENDDO
(  238) ENDDO
(  239) D%NGPTOT = IGPTOTL(MY_REGION_NS,MY_REGION_EW)
(  240) D%NGPTOTMX = MAXVAL(IGPTOTL)
(  241) D%NGPTOTG = SUM(IGPTOTL)
(  242) ALLOCATE(D%NGPTOTL(N_REGIONS_NS,N_REGIONS_EW))
(  243) IF(LLP2)WRITE(NOUT,9) 'D%NGPTOTL     ',SIZE(D%NGPTOTL ),SHAPE(D%NGPTOTL  )
(  244) D%NGPTOTL(:,:) = IGPTOTL(:,:)
(  245) 
(  246) IF(.NOT.D%LGRIDONLY) THEN
(  247) ALLOCATE(D%NSTAGTF(D%NDGL_FS))
(  248) IF(LLP2)WRITE(NOUT,9) 'D%NSTAGTF     ',SIZE(D%NSTAGTF ),SHAPE(D%NSTAGTF  )
(  249) IOFF = 0
(  250) DO JGL=1,D%NDGL_FS
(  251)   D%NSTAGTF(JGL) = IOFF
(  252)   IGL = D%NPTRLS(MYSETW) + JGL - 1
(  253)   IOFF = IOFF + G%NLOEN(IGL)+2+R%NNOEXTZL
(  254) ENDDO
(  255) D%NLENGTF = IOFF
(  256) ENDIF
(  257) 
(  258) IF(ALLOCATED(ZDUM)) DEALLOCATE(ZDUM)
(  259) DEALLOCATE(IGPTOTL)
(  260) IF (LHOOK) CALL DR_HOOK('SUEMP_TRANS_MOD:SUEMP_TRANS',1,ZHOOK_HANDLE)
(  261) 
(  262) !     ------------------------------------------------------------------
(  263) 9 FORMAT(1X,'ARRAY ',A10,' ALLOCATED ',8I8)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 6

(  264) 
(  265) END SUBROUTINE SUEMP_TRANS
(  266) END MODULE SUEMP_TRANS_MOD
(  267) 




























































NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 7

(    1) # 1 "suemp_trans_mod.F90"
(    1) MODULE SUEMP_TRANS_MOD
(    2) CONTAINS
(    3) SUBROUTINE SUEMP_TRANS
(    4) # 5 "suemp_trans_mod.F90"
(    5) ! Set up distributed environment for the transform package (part 2)
(    6) !        R. El Khatib 09-Aug-2013 Allow LEQ_REGIONS
(    7) # 8 "suemp_trans_mod.F90"
(    8) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(    9) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   10) # 11 "suemp_trans_mod.F90"
(   11) USE TPM_GEN         ,ONLY : NOUT, NPRINTLEV
(   12) USE TPM_DIM         ,ONLY : R
(   13) USE TPM_GEOMETRY    ,ONLY : G
(   14) USE TPM_DISTR       ,ONLY : D, LEQ_REGIONS, NPRTRNS, NPRTRV, NPRTRW, MYSETW, NPROC, MYPROC
(   15) USE TPMALD_DIM      ,ONLY : RALD
(   16) !USE TPMALD_DISTR
(   17) !USE SUWAVEDI_MOD
(   18) !USE PE2SET_MOD
(   19) USE SUMPLATF_MOD    ,ONLY : SUMPLATF
(   20) USE SUEMPLAT_MOD    ,ONLY : SUEMPLAT
(   21) USE SUESTAONL_MOD   ,ONLY : SUESTAONL
(   22) USE MYSENDSET_MOD   ,ONLY : MYSENDSET
(   23) USE MYRECVSET_MOD   ,ONLY : MYRECVSET
(   24) USE EQ_REGIONS_MOD  ,ONLY : MY_REGION_EW, MY_REGION_NS,           &
(   25)      &                      N_REGIONS, N_REGIONS_EW, N_REGIONS_NS
(   26) !
(   27) # 28 "suemp_trans_mod.F90"
(   28) IMPLICIT NONE
(   29) # 30 "suemp_trans_mod.F90"
(   30) INTEGER(KIND=JPIM) :: JM,JMLOC
(   31) INTEGER(KIND=JPIM) :: JGL,IGL,IPLAT,ISENDSET,IRECVSET,JML,IPOS,IM
(   32) INTEGER(KIND=JPIM) :: I1,I2,I3,IAUX0,IAUX1,JA1
(   33) INTEGER(KIND=JPIM) :: IGPTOT,IMEDIAP,IRESTM,JA,JB,IOFF
(   34) INTEGER(KIND=JPIM), ALLOCATABLE :: IGPTOTL(:,:)
(   35) # 36 "suemp_trans_mod.F90"
(   36) REAL(KIND=JPRB) :: ZMEDIAP
(   37) # 38 "suemp_trans_mod.F90"
(   38) LOGICAL    :: LLP1,LLP2
(   39) REAL(KIND=JPRB),ALLOCATABLE :: ZDUM(:)
(   40) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   41) # 42 "suemp_trans_mod.F90"
(   42) !     ------------------------------------------------------------------
(   43) # 44 "suemp_trans_mod.F90"
(   44) IF (LHOOK) CALL DR_HOOK('SUEMP_TRANS_MOD:SUEMP_TRANS',0,ZHOOK_HANDLE)
(   45) LLP1 = NPRINTLEV>0
(   46) LLP2 = NPRINTLEV>1
(   47) IF(LLP1) WRITE(NOUT,*) '=== ENTER ROUTINE SUEMP_TRANS ==='
(   48) # 49 "suemp_trans_mod.F90"
(   49) IF(.NOT.D%LGRIDONLY) THEN
(   50)         
(   51) ALLOCATE(D%NULTPP(NPRTRNS))
(   52) IF(LLP2)WRITE(NOUT,9) 'D%NULTPP   ',SIZE(D%NULTPP   ),SHAPE(D%NULTPP   )
(   53) ALLOCATE(D%NPTRLS(NPRTRNS))
(   54) IF(LLP2)WRITE(NOUT,9) 'D%NPTRLS   ',SIZE(D%NPTRLS   ),SHAPE(D%NPTRLS   )
(   55) ALLOCATE(D%NPROCL(R%NDGL))
(   56) IF(LLP2)WRITE(NOUT,9) 'D%NPROCL   ',SIZE(D%NPROCL   ),SHAPE(D%NPROCL   )
(   57) # 58 "suemp_trans_mod.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 8

(   58) CALL SUMPLATF(R%NDGL,NPRTRNS,MYSETW,D%NULTPP,D%NPROCL,D%NPTRLS)
(   59) D%NDGL_FS = D%NULTPP(MYSETW)
(   60) # 61 "suemp_trans_mod.F90"
(   61) ! Help arrays for spectral to fourier space transposition
(   62) ALLOCATE(D%NLTSGTB (NPRTRNS+1))
(   63) IF(LLP2)WRITE(NOUT,9) 'D%NLTSGTB ',SIZE(D%NLTSGTB),SHAPE(D%NLTSGTB)
(   64) ALLOCATE(D%NLTSFTB (NPRTRNS+1))
(   65) IF(LLP2)WRITE(NOUT,9) 'D%NLTSFTB ',SIZE(D%NLTSFTB),SHAPE(D%NLTSFTB)
(   66) ALLOCATE(D%NSTAGT0B(NPRTRNS+1))
(   67) IF(LLP2)WRITE(NOUT,9) 'D%NSTAGT0B ',SIZE(D%NSTAGT0B),SHAPE(D%NSTAGT0B)
(   68) ALLOCATE(D%NSTAGT1B(NPRTRNS+1))
(   69) IF(LLP2)WRITE(NOUT,9) 'D%NSTAGT1B ',SIZE(D%NSTAGT1B),SHAPE(D%NSTAGT1B)
(   70) ALLOCATE(D%MSTABF  (NPRTRNS+1))
(   71) IF(LLP2)WRITE(NOUT,9) 'D%MSTABF ',SIZE(D%MSTABF),SHAPE(D%MSTABF)
(   72) # 73 "suemp_trans_mod.F90"
(   73) D%NLTSGTB(:) = 0
(   74) DO JGL=1,D%NDGL_FS
(   75)   IGL = D%NPTRLS(MYSETW)+JGL-1
(   76)   DO JM=0,G%NMEN(IGL)
(   77)     D%NLTSGTB(D%NPROCM(JM)) = D%NLTSGTB(D%NPROCM(JM))+1
(   78)   ENDDO
(   79) ENDDO
(   80) DO JA=1,NPRTRW
(   81)   IPLAT = 0
(   82)   DO JGL=1,D%NULTPP(JA)
(   83)     IGL = D%NPTRLS(JA)+JGL-1
(   84)     DO JM=1,D%NUMP
(   85)       IF(IGL > R%NDGNH-G%NDGLU(D%MYMS(JM)) .AND. IGL <= R%NDGNH+G%NDGLU(D%MYMS(JM))) THEN
(   86)         IPLAT = IPLAT + 1
(   87)       ENDIF
(   88)     ENDDO
(   89)   ENDDO
(   90)   D%NLTSFTB(JA) = IPLAT
(   91) ENDDO
(   92) # 93 "suemp_trans_mod.F90"
(   93) DO JA=1,NPRTRW-1
(   94)   ISENDSET = MYSENDSET(NPRTRW,MYSETW,JA)
(   95)   IRECVSET = MYRECVSET(NPRTRW,MYSETW,JA)
(   96)   D%MSTABF(IRECVSET) = ISENDSET
(   97) ENDDO
(   98) D%MSTABF(MYSETW) = MYSETW
(   99) # 100 "suemp_trans_mod.F90"
(  100) ALLOCATE(D%NPNTGTB0(0:RALD%NMSMAX,D%NDGL_FS))
(  101) IF(LLP2)WRITE(NOUT,9) 'D%NPNTGTB0 ',SIZE(D%NPNTGTB0 ),SHAPE(D%NPNTGTB0 )
(  102) ALLOCATE(D%NPNTGTB1(D%NUMP,R%NDGL))
(  103) IF(LLP2)WRITE(NOUT,9) 'D%NPNTGTB1 ',SIZE(D%NPNTGTB1 ),SHAPE(D%NPNTGTB1 )
(  104) # 105 "suemp_trans_mod.F90"
(  105) DO JA=1,NPRTRW
(  106)   IPOS = 0
(  107)   DO JGL=1,D%NULTPP(MYSETW)
(  108)     IGL = D%NPTRLS(MYSETW) + JGL - 1
(  109)     DO JML=D%NPTRMS(JA),D%NPTRMS(JA)+D%NUMPP(JA)-1
(  110)       IM = D%NALLMS(JML)
(  111)       IF (IM  <=  G%NMEN(IGL)) THEN
(  112)         D%NPNTGTB0(IM,JGL) = IPOS
(  113)         IPOS = IPOS+1
(  114)       ELSE
(  115)         D%NPNTGTB0(IM,JGL) = -99






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 9

(  116)       ENDIF
(  117)     ENDDO
(  118)   ENDDO
(  119) ENDDO
(  120) # 121 "suemp_trans_mod.F90"
(  121) DO JA=1,NPRTRW
(  122)   IPOS = 0
(  123)   DO JGL=1,D%NULTPP(JA)
(  124)     IGL = D%NPTRLS(JA) + JGL - 1
(  125)     DO JM=1,D%NUMP
(  126)       IM = D%MYMS(JM)
(  127)       IF (IM  <=  G%NMEN(IGL)) THEN
(  128)         D%NPNTGTB1(JM,IGL) = IPOS
(  129)         IPOS = IPOS+1
(  130)       ELSE
(  131)         D%NPNTGTB1(JM,IGL) = -99
(  132)       ENDIF
(  133)     ENDDO
(  134)   ENDDO
(  135) ENDDO
(  136) # 137 "suemp_trans_mod.F90"
(  137) IAUX0 = 0
(  138) IAUX1 = 0
(  139) DO JA=1,NPRTRNS-1
(  140)   I1 = MYSENDSET(NPRTRNS,MYSETW,JA)
(  141)   I2 = MYRECVSET(NPRTRNS,MYSETW,JA)
(  142)   DO JA1=1,NPRTRNS-1
(  143)     IF(MYSENDSET(NPRTRNS,MYSETW,JA1) == I2) I3 =MYRECVSET(NPRTRNS,MYSETW,JA1)
(  144)   ENDDO
(  145)   IAUX0 = MAX(D%NLTSFTB(I1),D%NLTSGTB(I2),IAUX0)
(  146)   IAUX1 = MAX(D%NLTSGTB(I2),D%NLTSFTB(I3),IAUX1)
(  147) ENDDO
(  148) IAUX0 = MAX(D%NLTSGTB(MYSETW),IAUX0)
(  149) IAUX1 = MAX(D%NLTSGTB(MYSETW),IAUX1)
(  150) DO JA=1,NPRTRNS+1
(  151)   D%NSTAGT0B(JA) = (JA-1)*IAUX0
(  152)   D%NSTAGT1B(JA) = (JA-1)*IAUX1
(  153) ENDDO
(  154) D%NLENGT0B = IAUX0*NPRTRNS
(  155) D%NLENGT1B = IAUX1*NPRTRNS
(  156) # 157 "suemp_trans_mod.F90"
(  157) ENDIF
(  158) # 159 "suemp_trans_mod.F90"
(  159) ! GRIDPOINT SPACE
(  160) # 161 "suemp_trans_mod.F90"
(  161) ALLOCATE(D%NFRSTLAT(N_REGIONS_NS))
(  162) IF(LLP2)WRITE(NOUT,9) 'D%NFRSTLAT ',SIZE(D%NFRSTLAT ),SHAPE(D%NFRSTLAT )
(  163) ALLOCATE(D%NLSTLAT(N_REGIONS_NS))
(  164) IF(LLP2)WRITE(NOUT,9) 'D%NLSTLAT  ',SIZE(D%NLSTLAT  ),SHAPE(D%NLSTLAT  )
(  165) ALLOCATE(D%NPTRLAT(R%NDGL))
(  166) IF(LLP2)WRITE(NOUT,9) 'D%NPTRLAT  ',SIZE(D%NPTRLAT  ),SHAPE(D%NPTRLAT  )
(  167) ALLOCATE(D%NPTRFRSTLAT(N_REGIONS_NS))
(  168) IF(LLP2)WRITE(NOUT,9) 'D%NPTRFRSTLAT',SIZE(D%NPTRFRSTLAT),SHAPE(D%NPTRFRSTLAT)
(  169) ALLOCATE(D%NPTRLSTLAT(N_REGIONS_NS))
(  170) IF(LLP2)WRITE(NOUT,9)'D%NPTRLSTLAT',SIZE(D%NPTRLSTLAT),SHAPE(D%NPTRLSTLAT)
(  171) ALLOCATE(D%LSPLITLAT(R%NDGL))
(  172) IF(LLP2)WRITE(NOUT,9) 'D%LSPLITLAT',SIZE(D%LSPLITLAT),SHAPE(D%LSPLITLAT)
(  173) ALLOCATE(D%NPROCA_GP(N_REGIONS_NS))






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 10

(  174) IF(LLP2)WRITE(NOUT,9) 'D%NPROCA_GP',SIZE(D%NPROCA_GP),SHAPE(D%NPROCA_GP)
(  175) # 177 "suemp_trans_mod.F90"
(  177) IF(.NOT.D%LWEIGHTED_DISTR) THEN
(  178)   ALLOCATE(ZDUM(1))
(  179)   CALL SUEMPLAT(R%NDGL,NPROC,N_REGIONS_NS,MY_REGION_NS,D%LSPLIT, LEQ_REGIONS,&
(  180)   & D%NFRSTLAT,D%NLSTLAT,D%NFRSTLOFF,D%NPTRLAT,&
(  181)   & D%NPTRFRSTLAT,D%NPTRLSTLAT,D%NPTRFLOFF,&
(  182)   & ZDUM,D%LWEIGHTED_DISTR,ZMEDIAP,D%NPROCA_GP,&
(  183)   & IMEDIAP,IRESTM,D%LSPLITLAT,MYPROC,G%NLOEN,RALD%NDGUX)
(  184) ELSE
(  185)  CALL SUEMPLAT(R%NDGL,NPROC,N_REGIONS_NS,MY_REGION_NS,D%LSPLIT, LEQ_REGIONS,&
(  186)   & D%NFRSTLAT,D%NLSTLAT,D%NFRSTLOFF,D%NPTRLAT,&
(  187)   & D%NPTRFRSTLAT,D%NPTRLSTLAT,D%NPTRFLOFF,&
(  188)   & D%RWEIGHT,D%LWEIGHTED_DISTR,ZMEDIAP,D%NPROCA_GP,&
(  189)   & IMEDIAP,IRESTM,D%LSPLITLAT,MYPROC,G%NLOEN,RALD%NDGUX)  
(  190) ENDIF
(  191) D%NDGL_GP = D%NLSTLAT(MY_REGION_NS)-D%NFRSTLOFF
(  192) # 193 "suemp_trans_mod.F90"
(  193) IF (LLP1) THEN
(  194)   IF(.NOT.D%LGRIDONLY) THEN      
(  195)   WRITE(NOUT,FMT='(/'' OUTPUT FROM ROUTINE SUEMPLAT: ''/)')
(  196)   WRITE(NOUT,FMT='('' D%NULTPP '')')
(  197)   WRITE(NOUT,FMT='(20(1X,I4))') D%NULTPP(1:NPRTRNS)
(  198)   WRITE(NOUT,FMT='('' D%NPROCL '')')
(  199)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPROCL(1:R%NDGL)
(  200)   ENDIF
(  201)   WRITE(NOUT,FMT='('' D%NFRSTLAT '')')
(  202)   WRITE(NOUT,FMT='(20(1X,I4))') D%NFRSTLAT(1:N_REGIONS_NS)
(  203)   WRITE(NOUT,FMT='('' D%NLSTLAT '')')
(  204)   WRITE(NOUT,FMT='(20(1X,I4))') D%NLSTLAT(1:N_REGIONS_NS)
(  205)   WRITE(NOUT,FMT='('' D%NFRSTLOFF  D%NPTRFLOFF '')')
(  206)   WRITE(NOUT,FMT='(2(1X,I6))') D%NFRSTLOFF, D%NPTRFLOFF
(  207)   WRITE(NOUT,FMT='('' D%NPTRLAT '')')
(  208)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPTRLAT(1:R%NDGL)
(  209)   WRITE(NOUT,FMT='('' D%LSPLITLAT '')')
(  210)   WRITE(NOUT,FMT='(50(1X,L1))') D%LSPLITLAT(1:R%NDGL)
(  211)   WRITE(NOUT,FMT='('' D%NPTRFRSTLAT '')')
(  212)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPTRFRSTLAT(1:N_REGIONS_NS)
(  213)   WRITE(NOUT,FMT='('' D%NPTRLSTLAT '')')
(  214)   WRITE(NOUT,FMT='(20(1X,I4))') D%NPTRLSTLAT(1:N_REGIONS_NS)
(  215)   WRITE(NOUT,FMT='(/)')
(  216) ENDIF
(  217) ALLOCATE(D%NSTA(R%NDGL+N_REGIONS_NS-1,N_REGIONS_EW))
(  218) IF(LLP2)WRITE(NOUT,9) 'D%NSTA     ',SIZE(D%NSTA     ),SHAPE(D%NSTA     )
(  219) ALLOCATE(D%NONL(R%NDGL+N_REGIONS_NS-1,N_REGIONS_EW))
(  220) IF(LLP2)WRITE(NOUT,9) 'D%NONL     ',SIZE(D%NONL     ),SHAPE(D%NONL     )
(  221) # 222 "suemp_trans_mod.F90"
(  222) IF(.NOT.D%LWEIGHTED_DISTR) THEN
(  223)  CALL SUESTAONL(IMEDIAP,IRESTM,D%LWEIGHTED_DISTR,ZDUM,ZMEDIAP,D%NPROCA_GP)
(  224) ELSE
(  225)  CALL SUESTAONL(IMEDIAP,IRESTM,D%LWEIGHTED_DISTR,D%RWEIGHT,ZMEDIAP,D%NPROCA_GP)
(  226) ENDIF
(  227) !  IGPTOTL is the number of grid points in each individual processor
(  228) ALLOCATE(IGPTOTL(N_REGIONS_NS,N_REGIONS_EW))
(  229) IGPTOTL(:,:)=0
(  230) DO JA=1,N_REGIONS_NS
(  231)   DO JB=1,N_REGIONS(JA)
(  232)     IGPTOT = 0






NVFORTRAN (Version    20.11)          02/16/2022  17:30:20      page 11

(  233)     DO JGL=D%NPTRFRSTLAT(JA),D%NPTRLSTLAT(JA)
(  234)       IGPTOT = IGPTOT+D%NONL(JGL,JB)
(  235)     ENDDO
(  236)     IGPTOTL(JA,JB) = IGPTOT
(  237)   ENDDO
(  238) ENDDO
(  239) D%NGPTOT = IGPTOTL(MY_REGION_NS,MY_REGION_EW)
(  240) D%NGPTOTMX = MAXVAL(IGPTOTL)
(  241) D%NGPTOTG = SUM(IGPTOTL)
(  242) ALLOCATE(D%NGPTOTL(N_REGIONS_NS,N_REGIONS_EW))
(  243) IF(LLP2)WRITE(NOUT,9) 'D%NGPTOTL     ',SIZE(D%NGPTOTL ),SHAPE(D%NGPTOTL  )
(  244) D%NGPTOTL(:,:) = IGPTOTL(:,:)
(  245) # 246 "suemp_trans_mod.F90"
(  246) IF(.NOT.D%LGRIDONLY) THEN
(  247) ALLOCATE(D%NSTAGTF(D%NDGL_FS))
(  248) IF(LLP2)WRITE(NOUT,9) 'D%NSTAGTF     ',SIZE(D%NSTAGTF ),SHAPE(D%NSTAGTF  )
(  249) IOFF = 0
(  250) DO JGL=1,D%NDGL_FS
(  251)   D%NSTAGTF(JGL) = IOFF
(  252)   IGL = D%NPTRLS(MYSETW) + JGL - 1
(  253)   IOFF = IOFF + G%NLOEN(IGL)+2+R%NNOEXTZL
(  254) ENDDO
(  255) D%NLENGTF = IOFF
(  256) ENDIF
(  257) # 258 "suemp_trans_mod.F90"
(  258) IF(ALLOCATED(ZDUM)) DEALLOCATE(ZDUM)
(  259) DEALLOCATE(IGPTOTL)
(  260) IF (LHOOK) CALL DR_HOOK('SUEMP_TRANS_MOD:SUEMP_TRANS',1,ZHOOK_HANDLE)
(  261) # 262 "suemp_trans_mod.F90"
(  262) !     ------------------------------------------------------------------
(  263) 9 FORMAT(1X,'ARRAY ',A10,' ALLOCATED ',8I8)
(  264) # 265 "suemp_trans_mod.F90"
(  265) END SUBROUTINE SUEMP_TRANS
(  266) END MODULE SUEMP_TRANS_MOD
