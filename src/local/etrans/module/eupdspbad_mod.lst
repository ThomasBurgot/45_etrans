


NVFORTRAN (Version    20.11)          02/16/2022  17:28:02      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: eupdspbad_mod.F90

(    1) MODULE EUPDSPBAD_MOD
(    2) CONTAINS
(    3) SUBROUTINE EUPDSPBAD(KM,KFIELD,POA,PSPEC,KFLDPTR)
(    4) 
(    5) !**** *EUPDSPBAD* - Update spectral arrays after direct Legendre transform
(    6) 
(    7) !     Purpose.
(    8) !     --------
(    9) !        To update spectral arrays for a fixed zonal wave-number
(   10) !         from values in POA.
(   11) 
(   12) !**   Interface.
(   13) !     ----------
(   14) !        CALL EUPDSPBAD(....)
(   15) 
(   16) !        Explicit arguments :  KM - zonal wavenumber
(   17) !        --------------------  KFIELD  - number of fields
(   18) !                              POA - work array
(   19) !                              PSPEC - spectral array
(   20) 
(   21) !        Implicit arguments :  None
(   22) !        --------------------
(   23) 
(   24) !     Method.
(   25) !     -------
(   26) 
(   27) !     Externals.
(   28) !     ----------
(   29) 
(   30) !     Reference.
(   31) !     ----------
(   32) !        ECMWF Research Department documentation of the IFS
(   33) 






NVFORTRAN (Version    20.11)          02/16/2022  17:28:02      page 2

(   34) !     Author.
(   35) !     -------
(   36) !        Mats Hamrud and Philippe Courtier  *ECMWF*
(   37) 
(   38) !     Modifications.
(   39) !     --------------
(   40) !        Original : 88-02-02
(   41) !        D. Giard : 93-03-19 truncations NSMAX and NTMAX (see NOTE)
(   42) !        R. El Khatib : 94-08-02 Replace number of fields by indexes of the
(   43) !                       first and last field
(   44) !        L. Isaksen : 95-06-06 Reordering of spectral arrays
(   45) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   46) !     ------------------------------------------------------------------
(   47) 
(   48) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   49) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   50) 
(   51) !USE TPM_DIM
(   52) !USE TPM_FIELDS
(   53) !USE TPM_DISTR
(   54) 
(   55) USE TPMALD_DISTR    ,ONLY : DALD
(   56) !
(   57) 
(   58) IMPLICIT NONE
(   59) 
(   60) INTEGER(KIND=JPIM),INTENT(IN)    :: KM,KFIELD
(   61) REAL(KIND=JPRB)   ,INTENT(OUT)   :: POA(:,:)
(   62) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PSPEC(:,:)
(   63) INTEGER(KIND=JPIM),INTENT(IN),OPTIONAL :: KFLDPTR(:)
(   64) 
(   65) INTEGER(KIND=JPIM) :: II, INM, IR, JFLD, JN,IFLD
(   66) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   67) 
(   68) !     ------------------------------------------------------------------
(   69) 
(   70) !*       0.    NOTE.
(   71) !              -----
(   72) 
(   73) ! The following transfer reads :
(   74) ! SPEC(k,NASM0(m)+NLTN(n)*2)  =POA(nn,2*k-1) (real part)
(   75) ! SPEC(k,NASM0(m)+NLTN(n)*2+1)=POA(nn,2*k  ) (imaginary part)
(   76) ! with n from m to NSMAX
(   77) ! and nn=NTMAX+2-n from NTMAX+2-m to NTMAX+2-NSMAX.
(   78) ! NLTN(m)=NTMAX+2-m : n=NLTN(nn),nn=NLTN(n)
(   79) ! nn is the loop index.
(   80) 
(   81) !     ------------------------------------------------------------------
(   82) 
(   83) IF (LHOOK) CALL DR_HOOK('EUPDSPBAD_MOD:EUPDSPBAD',0,ZHOOK_HANDLE)
(   84) POA(:,:) = 0.0_JPRB
(   85)   
(   86) IF(PRESENT(KFLDPTR)) THEN
(   87) 
(   88)   DO JFLD=1,KFIELD
(   89)     IR= 2*JFLD-1
(   90)     II=IR+1
(   91)     IFLD = KFLDPTR(JFLD)






NVFORTRAN (Version    20.11)          02/16/2022  17:28:02      page 3

(   92) !DIR$ IVDEP
(   93) !OCL NOVREC
(   94)     DO JN=1,DALD%NCPL2M(KM),2
(   95)       INM=DALD%NESM0(KM)+(JN-1)*2
(   96)       POA(JN,IR)   = PSPEC(IFLD,INM)
(   97)       POA(JN+1,IR) = PSPEC(IFLD,INM+1)
(   98)       POA(JN,II)   = PSPEC(IFLD,INM+2)
(   99)       POA(JN+1,II) = PSPEC(IFLD,INM+3)
(  100)       PSPEC(IFLD,INM  )= 0.0_JPRB
(  101)       PSPEC(IFLD,INM+1)= 0.0_JPRB
(  102)       PSPEC(IFLD,INM+2)= 0.0_JPRB
(  103)       PSPEC(IFLD,INM+3)= 0.0_JPRB
(  104)     ENDDO
(  105)   ENDDO
(  106) 
(  107) ELSE
(  108) 
(  109)   DO JN=1,DALD%NCPL2M(KM),2
(  110)     INM=DALD%NESM0(KM)+(JN-1)*2
(  111) !DIR$ IVDEP
(  112) !OCL NOVREC
(  113)     DO JFLD=1,KFIELD
(  114)       IR= 2*JFLD-1
(  115)       II=IR+1
(  116)       POA(JN,IR)   = PSPEC(JFLD,INM)
(  117)       POA(JN+1,IR) = PSPEC(JFLD,INM+1)
(  118)       POA(JN,II)   = PSPEC(JFLD,INM+2)
(  119)       POA(JN+1,II) = PSPEC(JFLD,INM+3)
(  120)       PSPEC(JFLD,INM  )= 0.0_JPRB
(  121)       PSPEC(JFLD,INM+1)= 0.0_JPRB
(  122)       PSPEC(JFLD,INM+2)= 0.0_JPRB
(  123)       PSPEC(JFLD,INM+3)= 0.0_JPRB
(  124)     ENDDO
(  125)   ENDDO
(  126) 
(  127) ENDIF
(  128) IF (LHOOK) CALL DR_HOOK('EUPDSPBAD_MOD:EUPDSPBAD',1,ZHOOK_HANDLE)
(  129) 
(  130) !     ------------------------------------------------------------------
(  131) 
(  132) END SUBROUTINE EUPDSPBAD
(  133) END MODULE EUPDSPBAD_MOD






















NVFORTRAN (Version    20.11)          02/16/2022  17:28:02      page 4

(    1) # 1 "eupdspbad_mod.F90"
(    1) MODULE EUPDSPBAD_MOD
(    2) CONTAINS
(    3) SUBROUTINE EUPDSPBAD(KM,KFIELD,POA,PSPEC,KFLDPTR)
(    4) # 5 "eupdspbad_mod.F90"
(    5) !**** *EUPDSPBAD* - Update spectral arrays after direct Legendre transform
(    6) # 7 "eupdspbad_mod.F90"
(    7) !     Purpose.
(    8) !     --------
(    9) !        To update spectral arrays for a fixed zonal wave-number
(   10) !         from values in POA.
(   11) # 12 "eupdspbad_mod.F90"
(   12) !**   Interface.
(   13) !     ----------
(   14) !        CALL EUPDSPBAD(....)
(   15) # 16 "eupdspbad_mod.F90"
(   16) !        Explicit arguments :  KM - zonal wavenumber
(   17) !        --------------------  KFIELD  - number of fields
(   18) !                              POA - work array
(   19) !                              PSPEC - spectral array
(   20) # 21 "eupdspbad_mod.F90"
(   21) !        Implicit arguments :  None
(   22) !        --------------------
(   23) # 24 "eupdspbad_mod.F90"
(   24) !     Method.
(   25) !     -------
(   26) # 27 "eupdspbad_mod.F90"
(   27) !     Externals.
(   28) !     ----------
(   29) # 30 "eupdspbad_mod.F90"
(   30) !     Reference.
(   31) !     ----------
(   32) !        ECMWF Research Department documentation of the IFS
(   33) # 34 "eupdspbad_mod.F90"
(   34) !     Author.
(   35) !     -------
(   36) !        Mats Hamrud and Philippe Courtier  *ECMWF*
(   37) # 38 "eupdspbad_mod.F90"
(   38) !     Modifications.
(   39) !     --------------
(   40) !        Original : 88-02-02
(   41) !        D. Giard : 93-03-19 truncations NSMAX and NTMAX (see NOTE)
(   42) !        R. El Khatib : 94-08-02 Replace number of fields by indexes of the
(   43) !                       first and last field
(   44) !        L. Isaksen : 95-06-06 Reordering of spectral arrays
(   45) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   46) !     ------------------------------------------------------------------
(   47) # 48 "eupdspbad_mod.F90"
(   48) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   49) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   50) # 51 "eupdspbad_mod.F90"
(   51) !USE TPM_DIM
(   52) !USE TPM_FIELDS
(   53) !USE TPM_DISTR
(   54) # 55 "eupdspbad_mod.F90"
(   55) USE TPMALD_DISTR    ,ONLY : DALD
(   56) !
(   57) # 58 "eupdspbad_mod.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:28:02      page 5

(   58) IMPLICIT NONE
(   59) # 60 "eupdspbad_mod.F90"
(   60) INTEGER(KIND=JPIM),INTENT(IN)    :: KM,KFIELD
(   61) REAL(KIND=JPRB)   ,INTENT(OUT)   :: POA(:,:)
(   62) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PSPEC(:,:)
(   63) INTEGER(KIND=JPIM),INTENT(IN),OPTIONAL :: KFLDPTR(:)
(   64) # 65 "eupdspbad_mod.F90"
(   65) INTEGER(KIND=JPIM) :: II, INM, IR, JFLD, JN,IFLD
(   66) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   67) # 68 "eupdspbad_mod.F90"
(   68) !     ------------------------------------------------------------------
(   69) # 70 "eupdspbad_mod.F90"
(   70) !*       0.    NOTE.
(   71) !              -----
(   72) # 73 "eupdspbad_mod.F90"
(   73) ! The following transfer reads :
(   74) ! SPEC(k,NASM0(m)+NLTN(n)*2)  =POA(nn,2*k-1) (real part)
(   75) ! SPEC(k,NASM0(m)+NLTN(n)*2+1)=POA(nn,2*k  ) (imaginary part)
(   76) ! with n from m to NSMAX
(   77) ! and nn=NTMAX+2-n from NTMAX+2-m to NTMAX+2-NSMAX.
(   78) ! NLTN(m)=NTMAX+2-m : n=NLTN(nn),nn=NLTN(n)
(   79) ! nn is the loop index.
(   80) # 81 "eupdspbad_mod.F90"
(   81) !     ------------------------------------------------------------------
(   82) # 83 "eupdspbad_mod.F90"
(   83) IF (LHOOK) CALL DR_HOOK('EUPDSPBAD_MOD:EUPDSPBAD',0,ZHOOK_HANDLE)
(   84) POA(:,:) = 0.0_JPRB
(   85)   
(   86) IF(PRESENT(KFLDPTR)) THEN
(   87) # 88 "eupdspbad_mod.F90"
(   88)   DO JFLD=1,KFIELD
(   89)     IR= 2*JFLD-1
(   90)     II=IR+1
(   91)     IFLD = KFLDPTR(JFLD)
(   92) !DIR$ IVDEP
(   93) !OCL NOVREC
(   94)     DO JN=1,DALD%NCPL2M(KM),2
(   95)       INM=DALD%NESM0(KM)+(JN-1)*2
(   96)       POA(JN,IR)   = PSPEC(IFLD,INM)
(   97)       POA(JN+1,IR) = PSPEC(IFLD,INM+1)
(   98)       POA(JN,II)   = PSPEC(IFLD,INM+2)
(   99)       POA(JN+1,II) = PSPEC(IFLD,INM+3)
(  100)       PSPEC(IFLD,INM  )= 0.0_JPRB
(  101)       PSPEC(IFLD,INM+1)= 0.0_JPRB
(  102)       PSPEC(IFLD,INM+2)= 0.0_JPRB
(  103)       PSPEC(IFLD,INM+3)= 0.0_JPRB
(  104)     ENDDO
(  105)   ENDDO
(  106) # 107 "eupdspbad_mod.F90"
(  107) ELSE
(  108) # 109 "eupdspbad_mod.F90"
(  109)   DO JN=1,DALD%NCPL2M(KM),2
(  110)     INM=DALD%NESM0(KM)+(JN-1)*2
(  111) !DIR$ IVDEP
(  112) !OCL NOVREC
(  113)     DO JFLD=1,KFIELD
(  114)       IR= 2*JFLD-1
(  115)       II=IR+1






NVFORTRAN (Version    20.11)          02/16/2022  17:28:02      page 6

(  116)       POA(JN,IR)   = PSPEC(JFLD,INM)
(  117)       POA(JN+1,IR) = PSPEC(JFLD,INM+1)
(  118)       POA(JN,II)   = PSPEC(JFLD,INM+2)
(  119)       POA(JN+1,II) = PSPEC(JFLD,INM+3)
(  120)       PSPEC(JFLD,INM  )= 0.0_JPRB
(  121)       PSPEC(JFLD,INM+1)= 0.0_JPRB
(  122)       PSPEC(JFLD,INM+2)= 0.0_JPRB
(  123)       PSPEC(JFLD,INM+3)= 0.0_JPRB
(  124)     ENDDO
(  125)   ENDDO
(  126) # 127 "eupdspbad_mod.F90"
(  127) ENDIF
(  128) IF (LHOOK) CALL DR_HOOK('EUPDSPBAD_MOD:EUPDSPBAD',1,ZHOOK_HANDLE)
(  129) # 130 "eupdspbad_mod.F90"
(  130) !     ------------------------------------------------------------------
(  131) # 132 "eupdspbad_mod.F90"
(  132) END SUBROUTINE EUPDSPBAD
(  133) END MODULE EUPDSPBAD_MOD
