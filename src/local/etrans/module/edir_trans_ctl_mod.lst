


NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: edir_trans_ctl_mod.F90

(    1) MODULE EDIR_TRANS_CTL_MOD
(    2) CONTAINS
(    3) SUBROUTINE EDIR_TRANS_CTL(KF_UV_G,KF_SCALARS_G,KF_GP,KF_FS,KF_UV,KF_SCALARS,&
(    4)  & PSPVOR,PSPDIV,PSPSCALAR,KVSETUV,KVSETSC,PGP,&
(    5)  & PSPSC3A,PSPSC3B,PSPSC2,KVSETSC3A,KVSETSC3B,KVSETSC2,PGPUV,PGP3A,PGP3B,PGP2,&
(    6)  & PMEANU,PMEANV,AUX_PROC)
(    7) 
(    8) !**** *EDIR_TRANS_CTL* - Control routine for direct spectral transform.
(    9) 
(   10) !     Purpose.
(   11) !     --------
(   12) !        Control routine for the direct spectral transform
(   13) 
(   14) !**   Interface.
(   15) !     ----------
(   16) !     CALL EDIR_TRANS_CTL(...)
(   17) 
(   18) !     Explicit arguments :
(   19) !     --------------------
(   20) !     KF_UV_G      - global number of spectral u-v fields
(   21) !     KF_SCALARS_G - global number of scalar spectral fields
(   22) !     KF_GP        - total number of output gridpoint fields
(   23) !     KF_FS        - total number of fields in fourier space
(   24) !     KF_UV        - local number of spectral u-v fields
(   25) !     KF_SCALARS   - local number of scalar spectral fields
(   26) !     PSPVOR(:,:)  - spectral vorticity
(   27) !     PSPDIV(:,:)  - spectral divergence
(   28) !     PSPSCALAR(:,:) - spectral scalarvalued fields
(   29) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a
(   30) !                   vor/div field. Equivalant to NBSETLEV in the IFS.
(   31) !                   The length of KVSETUV should be the GLOBAL number
(   32) !                   of u/v fields which is the dimension of u and v releated
(   33) !                   fields in grid-point space.






NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 2

(   34) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   35) !                   scalar field. As for KVSETUV this argument is required
(   36) !                   if the total number of processors is greater than
(   37) !                   the number of processors used for distribution in
(   38) !                   spectral wave space.
(   39) !    PMEANU,PMEANV - mean winds
(   40) !    AUX_PROC        - optional external procedure for biperiodization of
(   41) !            aux.fields
(   42) !     PGP(:,:,:)  - gridpoint fields
(   43) 
(   44) !                  The ordering of the output fields is as follows (all
(   45) !                  parts are optional depending on the input switches):
(   46) 
(   47) !       u             : KF_UV_G fields
(   48) !       v             : KF_UV_G fields
(   49) !       scalar fields : KF_SCALARS_G fields
(   50) 
(   51) !     Method.
(   52) !     -------
(   53) 
(   54) !     Externals.  SHUFFLE     - reshuffle fields for load balancing
(   55) !     ----------  FIELD_SPLIT - split fields in NPROMATR packets
(   56) !                 LTDIR_CTL   - control of Legendre transform
(   57) !                 FTDIR_CTL   - control of Fourier transform
(   58) 
(   59) !     Author.
(   60) !     -------
(   61) !        Mats Hamrud *ECMWF*
(   62) 
(   63) !     Modifications.
(   64) !     --------------
(   65) !        Original : 01-01-03
(   66) !        G. Radnoti 01-03-13 adaptation to aladin
(   67) !     01-08-28 : G. Radnoti & R. El Khatib Fix for NPROMATR /= 0
(   68) !     02-09-30 : P. Smolikova AUX_PROC for d4 in NH
(   69) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   70) !    ------------------------------------------------------------------
(   71) 
(   72) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   73) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   74) 
(   75) USE TPM_GEN         ,ONLY : NPROMATR
(   76) !USE TPM_TRANS
(   77) !USE TPM_DISTR
(   78) 
(   79) USE SHUFFLE_MOD     ,ONLY : SHUFFLE
(   80) USE FIELD_SPLIT_MOD ,ONLY : FIELD_SPLIT
(   81) USE ELTDIR_CTL_MOD  ,ONLY : ELTDIR_CTL
(   82) USE EFTDIR_CTL_MOD  ,ONLY : EFTDIR_CTL
(   83) 
(   84) IMPLICIT NONE
(   85) 
(   86) ! Declaration of arguments
(   87) 
(   88) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV_G
(   89) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS_G
(   90) INTEGER(KIND=JPIM), INTENT(IN) :: KF_GP
(   91) INTEGER(KIND=JPIM), INTENT(IN) :: KF_FS






NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 3

(   92) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV
(   93) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS
(   94) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPVOR(:,:)
(   95) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPDIV(:,:)
(   96) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSCALAR(:,:)
(   97) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3A(:,:,:)
(   98) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3B(:,:,:)
(   99) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC2(:,:)
(  100) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETUV(:)
(  101) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC(:)
(  102) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC3A(:)
(  103) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC3B(:)
(  104) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC2(:)
(  105) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP(:,:,:)
(  106) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGPUV(:,:,:,:)
(  107) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP3A(:,:,:,:)
(  108) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP3B(:,:,:,:)
(  109) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP2(:,:,:)
(  110) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PMEANU(:)
(  111) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PMEANV(:)
(  112) EXTERNAL AUX_PROC
(  113) OPTIONAL AUX_PROC
(  114) 
(  115) ! Local variables
(  116) 
(  117) INTEGER(KIND=JPIM) :: IPTRGP(KF_GP),IPTRSPUV(NPROMATR),IPTRSPSC(NPROMATR)
(  118) INTEGER(KIND=JPIM) :: ISHFUV_G(KF_GP),ISHFSC_G(KF_GP)
(  119) INTEGER(KIND=JPIM) :: IVSETUV(KF_GP),IVSETSC(KF_GP)
(  120) INTEGER(KIND=JPIM) :: IBLKS,JBLK,ISTUV_G,IENUV_G
(  121) INTEGER(KIND=JPIM) :: IF_UV_G,IF_UV,ISTUV,IF_SCALARS,IF_SCALARS_G,IF_FS,IF_GP
(  122) INTEGER(KIND=JPIM) :: JFLD,ISTSC_G,IENSC_G,ISTSC,IENSC,IENUV,IF_GPB
(  123) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  124) 
(  125) !     ------------------------------------------------------------------
(  126) 
(  127) ! Perform transform
(  128) 
(  129) IF (LHOOK) CALL DR_HOOK('EDIR_TRANS_CTL_MOD:EDIR_TRANS_CTL',0,ZHOOK_HANDLE)
(  130) IF_GPB = 2*KF_UV_G+KF_SCALARS_G
(  131) IF(NPROMATR > 0 .AND. IF_GPB > NPROMATR) THEN
(  132) 
(  133)   ! Fields to be split into packets
(  134) 
(  135)   CALL SHUFFLE(KF_UV_G,KF_SCALARS_G,ISHFUV_G,IVSETUV,ISHFSC_G,IVSETSC, &
(  136)    & KVSETUV,KVSETSC)
(  137) 
(  138)   IBLKS=(IF_GPB-1)/NPROMATR+1
(  139) 
(  140)   DO JBLK=1,IBLKS
(  141) 
(  142)     CALL FIELD_SPLIT(JBLK,KF_GP,KF_UV_G,IVSETUV,IVSETSC,&
(  143)      & ISTUV_G,IENUV_G,IF_UV_G,ISTSC_G,IENSC_G,IF_SCALARS_G,&
(  144)      & ISTUV,IENUV,IF_UV,ISTSC,IENSC,IF_SCALARS)
(  145) 
(  146)     IF_FS = 2*IF_UV + IF_SCALARS
(  147)     IF_GP = 2*IF_UV_G+IF_SCALARS_G
(  148)     DO JFLD=1,IF_UV_G
(  149)       IPTRGP(JFLD) = ISHFUV_G(ISTUV_G+JFLD-1)






NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 4

(  150)       IPTRGP(JFLD+IF_UV_G) = KF_UV_G+ISHFUV_G(ISTUV_G+JFLD-1)
(  151)     ENDDO
(  152)     DO JFLD=1,IF_SCALARS_G
(  153)       IPTRGP(JFLD+2*IF_UV_G) = 2*KF_UV_G+ISHFSC_G(ISTSC_G+JFLD-1)
(  154)     ENDDO
(  155)     DO JFLD=1,IF_UV
(  156)       IPTRSPUV(JFLD) = ISTUV+JFLD-1
(  157)     ENDDO
(  158)     DO JFLD=1,IF_SCALARS
(  159)       IPTRSPSC(JFLD) = ISTSC+JFLD-1
(  160)     ENDDO
(  161) 
(  162)     IF(IF_UV_G > 0 .AND. IF_SCALARS_G > 0) THEN
(  163)       CALL EFTDIR_CTL(IF_UV_G,IF_SCALARS_G,IF_GP,IF_FS,IF_GPB,&
(  164)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),&
(  165)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,PGP=PGP)
(  166)     ELSEIF(IF_UV_G > 0) THEN
(  167)       CALL EFTDIR_CTL(IF_UV_G,IF_SCALARS_G,IF_GP,IF_FS,IF_GPB,&
(  168)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),&
(  169)        & KPTRGP=IPTRGP,PGP=PGP)
(  170)     ELSEIF(IF_SCALARS_G > 0) THEN
(  171)       CALL EFTDIR_CTL(IF_UV_G,IF_SCALARS_G,IF_GP,IF_FS,IF_GPB,&
(  172)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,PGP=PGP,&
(  173)        & AUX_PROC=AUX_PROC)
(  174)     ENDIF
(  175)     CALL ELTDIR_CTL(IF_FS,IF_UV,IF_SCALARS, &
(  176)      & PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  177)      & KFLDPTRUV=IPTRSPUV,KFLDPTRSC=IPTRSPSC,&
(  178)      & PSPMEANU=PMEANU,PSPMEANV=PMEANV,AUX_PROC=AUX_PROC)
(  179)   ENDDO
(  180) ELSE
(  181) 
(  182)   ! No splitting of fields, transform done in one go
(  183) 
(  184)   CALL EFTDIR_CTL(KF_UV_G,KF_SCALARS_G,KF_GP,KF_FS,IF_GPB,&
(  185)    & KVSETUV=KVSETUV,KVSETSC=KVSETSC,&
(  186)    & KVSETSC3A=KVSETSC3A,KVSETSC3B=KVSETSC3B,KVSETSC2=KVSETSC2,&
(  187)    & PGP=PGP,PGPUV=PGPUV,PGP3A=PGP3A,PGP3B=PGP3B,PGP2=PGP2,&
(  188)    & AUX_PROC=AUX_PROC)
(  189) 
(  190)   CALL ELTDIR_CTL(KF_FS,KF_UV,KF_SCALARS, &
(  191)    & PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  192)    & PSPSC3A=PSPSC3A,PSPSC3B=PSPSC3B,PSPSC2=PSPSC2,&
(  193)    & PSPMEANU=PMEANU,PSPMEANV=PMEANV,&
(  194)    & AUX_PROC=AUX_PROC)
(  195) 
(  196) ENDIF
(  197) IF (LHOOK) CALL DR_HOOK('EDIR_TRANS_CTL_MOD:EDIR_TRANS_CTL',1,ZHOOK_HANDLE)
(  198) 
(  199) !     ------------------------------------------------------------------
(  200) 
(  201) END SUBROUTINE EDIR_TRANS_CTL
(  202) END MODULE EDIR_TRANS_CTL_MOD











NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 5

(    1) # 1 "edir_trans_ctl_mod.F90"
(    1) MODULE EDIR_TRANS_CTL_MOD
(    2) CONTAINS
(    3) SUBROUTINE EDIR_TRANS_CTL(KF_UV_G,KF_SCALARS_G,KF_GP,KF_FS,KF_UV,KF_SCALARS,&
(    4)  & PSPVOR,PSPDIV,PSPSCALAR,KVSETUV,KVSETSC,PGP,&
(    5)  & PSPSC3A,PSPSC3B,PSPSC2,KVSETSC3A,KVSETSC3B,KVSETSC2,PGPUV,PGP3A,PGP3B,PGP2,&
(    6)  & PMEANU,PMEANV,AUX_PROC)
(    7) # 8 "edir_trans_ctl_mod.F90"
(    8) !**** *EDIR_TRANS_CTL* - Control routine for direct spectral transform.
(    9) # 10 "edir_trans_ctl_mod.F90"
(   10) !     Purpose.
(   11) !     --------
(   12) !        Control routine for the direct spectral transform
(   13) # 14 "edir_trans_ctl_mod.F90"
(   14) !**   Interface.
(   15) !     ----------
(   16) !     CALL EDIR_TRANS_CTL(...)
(   17) # 18 "edir_trans_ctl_mod.F90"
(   18) !     Explicit arguments :
(   19) !     --------------------
(   20) !     KF_UV_G      - global number of spectral u-v fields
(   21) !     KF_SCALARS_G - global number of scalar spectral fields
(   22) !     KF_GP        - total number of output gridpoint fields
(   23) !     KF_FS        - total number of fields in fourier space
(   24) !     KF_UV        - local number of spectral u-v fields
(   25) !     KF_SCALARS   - local number of scalar spectral fields
(   26) !     PSPVOR(:,:)  - spectral vorticity
(   27) !     PSPDIV(:,:)  - spectral divergence
(   28) !     PSPSCALAR(:,:) - spectral scalarvalued fields
(   29) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a
(   30) !                   vor/div field. Equivalant to NBSETLEV in the IFS.
(   31) !                   The length of KVSETUV should be the GLOBAL number
(   32) !                   of u/v fields which is the dimension of u and v releated
(   33) !                   fields in grid-point space.
(   34) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   35) !                   scalar field. As for KVSETUV this argument is required
(   36) !                   if the total number of processors is greater than
(   37) !                   the number of processors used for distribution in
(   38) !                   spectral wave space.
(   39) !    PMEANU,PMEANV - mean winds
(   40) !    AUX_PROC        - optional external procedure for biperiodization of
(   41) !            aux.fields
(   42) !     PGP(:,:,:)  - gridpoint fields
(   43) # 44 "edir_trans_ctl_mod.F90"
(   44) !                  The ordering of the output fields is as follows (all
(   45) !                  parts are optional depending on the input switches):
(   46) # 47 "edir_trans_ctl_mod.F90"
(   47) !       u             : KF_UV_G fields
(   48) !       v             : KF_UV_G fields
(   49) !       scalar fields : KF_SCALARS_G fields
(   50) # 51 "edir_trans_ctl_mod.F90"
(   51) !     Method.
(   52) !     -------
(   53) # 54 "edir_trans_ctl_mod.F90"
(   54) !     Externals.  SHUFFLE     - reshuffle fields for load balancing
(   55) !     ----------  FIELD_SPLIT - split fields in NPROMATR packets
(   56) !                 LTDIR_CTL   - control of Legendre transform
(   57) !                 FTDIR_CTL   - control of Fourier transform






NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 6

(   58) # 59 "edir_trans_ctl_mod.F90"
(   59) !     Author.
(   60) !     -------
(   61) !        Mats Hamrud *ECMWF*
(   62) # 63 "edir_trans_ctl_mod.F90"
(   63) !     Modifications.
(   64) !     --------------
(   65) !        Original : 01-01-03
(   66) !        G. Radnoti 01-03-13 adaptation to aladin
(   67) !     01-08-28 : G. Radnoti & R. El Khatib Fix for NPROMATR /= 0
(   68) !     02-09-30 : P. Smolikova AUX_PROC for d4 in NH
(   69) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   70) !    ------------------------------------------------------------------
(   71) # 72 "edir_trans_ctl_mod.F90"
(   72) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   73) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   74) # 75 "edir_trans_ctl_mod.F90"
(   75) USE TPM_GEN         ,ONLY : NPROMATR
(   76) !USE TPM_TRANS
(   77) !USE TPM_DISTR
(   78) # 79 "edir_trans_ctl_mod.F90"
(   79) USE SHUFFLE_MOD     ,ONLY : SHUFFLE
(   80) USE FIELD_SPLIT_MOD ,ONLY : FIELD_SPLIT
(   81) USE ELTDIR_CTL_MOD  ,ONLY : ELTDIR_CTL
(   82) USE EFTDIR_CTL_MOD  ,ONLY : EFTDIR_CTL
(   83) # 84 "edir_trans_ctl_mod.F90"
(   84) IMPLICIT NONE
(   85) # 86 "edir_trans_ctl_mod.F90"
(   86) ! Declaration of arguments
(   87) # 88 "edir_trans_ctl_mod.F90"
(   88) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV_G
(   89) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS_G
(   90) INTEGER(KIND=JPIM), INTENT(IN) :: KF_GP
(   91) INTEGER(KIND=JPIM), INTENT(IN) :: KF_FS
(   92) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV
(   93) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS
(   94) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPVOR(:,:)
(   95) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPDIV(:,:)
(   96) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSCALAR(:,:)
(   97) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3A(:,:,:)
(   98) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3B(:,:,:)
(   99) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC2(:,:)
(  100) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETUV(:)
(  101) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC(:)
(  102) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC3A(:)
(  103) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC3B(:)
(  104) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KVSETSC2(:)
(  105) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP(:,:,:)
(  106) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGPUV(:,:,:,:)
(  107) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP3A(:,:,:,:)
(  108) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP3B(:,:,:,:)
(  109) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGP2(:,:,:)
(  110) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PMEANU(:)
(  111) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PMEANV(:)
(  112) EXTERNAL AUX_PROC
(  113) OPTIONAL AUX_PROC
(  114) # 115 "edir_trans_ctl_mod.F90"
(  115) ! Local variables






NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 7

(  116) # 117 "edir_trans_ctl_mod.F90"
(  117) INTEGER(KIND=JPIM) :: IPTRGP(KF_GP),IPTRSPUV(NPROMATR),IPTRSPSC(NPROMATR)
(  118) INTEGER(KIND=JPIM) :: ISHFUV_G(KF_GP),ISHFSC_G(KF_GP)
(  119) INTEGER(KIND=JPIM) :: IVSETUV(KF_GP),IVSETSC(KF_GP)
(  120) INTEGER(KIND=JPIM) :: IBLKS,JBLK,ISTUV_G,IENUV_G
(  121) INTEGER(KIND=JPIM) :: IF_UV_G,IF_UV,ISTUV,IF_SCALARS,IF_SCALARS_G,IF_FS,IF_GP
(  122) INTEGER(KIND=JPIM) :: JFLD,ISTSC_G,IENSC_G,ISTSC,IENSC,IENUV,IF_GPB
(  123) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  124) # 125 "edir_trans_ctl_mod.F90"
(  125) !     ------------------------------------------------------------------
(  126) # 127 "edir_trans_ctl_mod.F90"
(  127) ! Perform transform
(  128) # 129 "edir_trans_ctl_mod.F90"
(  129) IF (LHOOK) CALL DR_HOOK('EDIR_TRANS_CTL_MOD:EDIR_TRANS_CTL',0,ZHOOK_HANDLE)
(  130) IF_GPB = 2*KF_UV_G+KF_SCALARS_G
(  131) IF(NPROMATR > 0 .AND. IF_GPB > NPROMATR) THEN
(  132) # 133 "edir_trans_ctl_mod.F90"
(  133)   ! Fields to be split into packets
(  134) # 135 "edir_trans_ctl_mod.F90"
(  135)   CALL SHUFFLE(KF_UV_G,KF_SCALARS_G,ISHFUV_G,IVSETUV,ISHFSC_G,IVSETSC, &
(  136)    & KVSETUV,KVSETSC)
(  137) # 138 "edir_trans_ctl_mod.F90"
(  138)   IBLKS=(IF_GPB-1)/NPROMATR+1
(  139) # 140 "edir_trans_ctl_mod.F90"
(  140)   DO JBLK=1,IBLKS
(  141) # 142 "edir_trans_ctl_mod.F90"
(  142)     CALL FIELD_SPLIT(JBLK,KF_GP,KF_UV_G,IVSETUV,IVSETSC,&
(  143)      & ISTUV_G,IENUV_G,IF_UV_G,ISTSC_G,IENSC_G,IF_SCALARS_G,&
(  144)      & ISTUV,IENUV,IF_UV,ISTSC,IENSC,IF_SCALARS)
(  145) # 146 "edir_trans_ctl_mod.F90"
(  146)     IF_FS = 2*IF_UV + IF_SCALARS
(  147)     IF_GP = 2*IF_UV_G+IF_SCALARS_G
(  148)     DO JFLD=1,IF_UV_G
(  149)       IPTRGP(JFLD) = ISHFUV_G(ISTUV_G+JFLD-1)
(  150)       IPTRGP(JFLD+IF_UV_G) = KF_UV_G+ISHFUV_G(ISTUV_G+JFLD-1)
(  151)     ENDDO
(  152)     DO JFLD=1,IF_SCALARS_G
(  153)       IPTRGP(JFLD+2*IF_UV_G) = 2*KF_UV_G+ISHFSC_G(ISTSC_G+JFLD-1)
(  154)     ENDDO
(  155)     DO JFLD=1,IF_UV
(  156)       IPTRSPUV(JFLD) = ISTUV+JFLD-1
(  157)     ENDDO
(  158)     DO JFLD=1,IF_SCALARS
(  159)       IPTRSPSC(JFLD) = ISTSC+JFLD-1
(  160)     ENDDO
(  161) # 162 "edir_trans_ctl_mod.F90"
(  162)     IF(IF_UV_G > 0 .AND. IF_SCALARS_G > 0) THEN
(  163)       CALL EFTDIR_CTL(IF_UV_G,IF_SCALARS_G,IF_GP,IF_FS,IF_GPB,&
(  164)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),&
(  165)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,PGP=PGP)
(  166)     ELSEIF(IF_UV_G > 0) THEN
(  167)       CALL EFTDIR_CTL(IF_UV_G,IF_SCALARS_G,IF_GP,IF_FS,IF_GPB,&
(  168)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),&
(  169)        & KPTRGP=IPTRGP,PGP=PGP)
(  170)     ELSEIF(IF_SCALARS_G > 0) THEN
(  171)       CALL EFTDIR_CTL(IF_UV_G,IF_SCALARS_G,IF_GP,IF_FS,IF_GPB,&
(  172)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,PGP=PGP,&
(  173)        & AUX_PROC=AUX_PROC)






NVFORTRAN (Version    20.11)          02/16/2022  17:50:10      page 8

(  174)     ENDIF
(  175)     CALL ELTDIR_CTL(IF_FS,IF_UV,IF_SCALARS, &
(  176)      & PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  177)      & KFLDPTRUV=IPTRSPUV,KFLDPTRSC=IPTRSPSC,&
(  178)      & PSPMEANU=PMEANU,PSPMEANV=PMEANV,AUX_PROC=AUX_PROC)
(  179)   ENDDO
(  180) ELSE
(  181) # 182 "edir_trans_ctl_mod.F90"
(  182)   ! No splitting of fields, transform done in one go
(  183) # 184 "edir_trans_ctl_mod.F90"
(  184)   CALL EFTDIR_CTL(KF_UV_G,KF_SCALARS_G,KF_GP,KF_FS,IF_GPB,&
(  185)    & KVSETUV=KVSETUV,KVSETSC=KVSETSC,&
(  186)    & KVSETSC3A=KVSETSC3A,KVSETSC3B=KVSETSC3B,KVSETSC2=KVSETSC2,&
(  187)    & PGP=PGP,PGPUV=PGPUV,PGP3A=PGP3A,PGP3B=PGP3B,PGP2=PGP2,&
(  188)    & AUX_PROC=AUX_PROC)
(  189) # 190 "edir_trans_ctl_mod.F90"
(  190)   CALL ELTDIR_CTL(KF_FS,KF_UV,KF_SCALARS, &
(  191)    & PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  192)    & PSPSC3A=PSPSC3A,PSPSC3B=PSPSC3B,PSPSC2=PSPSC2,&
(  193)    & PSPMEANU=PMEANU,PSPMEANV=PMEANV,&
(  194)    & AUX_PROC=AUX_PROC)
(  195) # 196 "edir_trans_ctl_mod.F90"
(  196) ENDIF
(  197) IF (LHOOK) CALL DR_HOOK('EDIR_TRANS_CTL_MOD:EDIR_TRANS_CTL',1,ZHOOK_HANDLE)
(  198) # 199 "edir_trans_ctl_mod.F90"
(  199) !     ------------------------------------------------------------------
(  200) # 201 "edir_trans_ctl_mod.F90"
(  201) END SUBROUTINE EDIR_TRANS_CTL
(  202) END MODULE EDIR_TRANS_CTL_MOD
