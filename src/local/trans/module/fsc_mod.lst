


NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fsc_mod.F90

(    1) MODULE FSC_MOD
(    2) CONTAINS
(    3) SUBROUTINE FSC(KF_UV,KF_SCALARS,KF_SCDERS,&
(    4)  & KST_UV,KST_SC,KST_NSDERS,KST_EWDERS,KST_UVDERS)
(    5) 
(    6) !**** *FSC - Division by a*cos(theta), east-west derivatives
(    7) 
(    8) !     Purpose.
(    9) !     --------
(   10) !        In Fourier space divide u and v and all north-south
(   11) !        derivatives by a*cos(theta). Also compute east-west derivatives
(   12) !        of u,v,thermodynamic, passiv scalar variables and surface
(   13) !        pressure.
(   14) 
(   15) !**   Interface.
(   16) !     ----------
(   17) !        CALL FSC(..)
(   18) !        Explicit arguments :  PUV     - u and v
(   19) !        --------------------  PSCALAR - scalar valued varaibles
(   20) !                              PNSDERS - N-S derivative of S.V.V.
(   21) !                              PEWDERS - E-W derivative of S.V.V.
(   22) !                              PUVDERS - E-W derivative of u and v
(   23) !     Method.
(   24) !     -------
(   25) 
(   26) !     Externals.   None.
(   27) !     ----------
(   28) 
(   29) !     Author.
(   30) !     -------
(   31) !        Mats Hamrud *ECMWF*






NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 2

(   32) 
(   33) !     Modifications.
(   34) !     --------------
(   35) !        Original : 00-03-03 (From SC2FSC)
(   36) 
(   37) !     ------------------------------------------------------------------
(   38) 
(   39) USE PARKIND1  ,ONLY : JPIM     ,JPRBT
(   40) 
(   41) USE TPM_TRANS       ,ONLY : LUVDER, LATLON, ZGTF
(   42) USE TPM_DISTR       ,ONLY : D, MYSETW,  MYPROC, NPROC
(   43) USE TPM_FIELDS      ,ONLY : F
(   44) USE TPM_GEOMETRY    ,ONLY : G
(   45) USE TPM_FLT                ,ONLY: S
(   46) use tpm_gen, only: nout
(   47) !
(   48) 
(   49) IMPLICIT NONE
(   50) INTEGER(KIND=JPIM) :: KGL
(   51) INTEGER(KIND=JPIM) , INTENT(IN) :: KF_UV,KF_SCALARS,KF_SCDERS
(   52) INTEGER(KIND=JPIM) , INTENT(IN) :: KST_UV, KST_SC, KST_NSDERS, KST_EWDERS, KST_UVDERS
(   53) 
(   54) REAL(KIND=JPRBT) , POINTER :: PUV(:,:)
(   55) REAL(KIND=JPRBT) , POINTER :: PSCALAR(:,:)
(   56) REAL(KIND=JPRBT) , POINTER :: PNSDERS(:,:)
(   57) REAL(KIND=JPRBT) , POINTER :: PEWDERS(:,:)
(   58) REAL(KIND=JPRBT) , POINTER :: PUVDERS(:,:)
(   59) 
(   60) REAL(KIND=JPRBT) :: ZACHTE,ZMUL, ZACHTE2, ZSHIFT, ZPI
(   61) REAL(KIND=JPRBT) :: ZAMP, ZPHASE
(   62) INTEGER(KIND=JPIM) :: IMEN,ISTAGTF
(   63) 
(   64) 
(   65) INTEGER(KIND=JPIM) :: JLON,JF,IGLG,II,IR,JM
(   66) 
(   67) INTEGER(KIND=JPIM) :: IBEG,IEND,IINC
(   68) !DEBUGGING:
(   69) integer :: i,J,maxi,maxj
(   70) real :: maxv
(   71) 
(   72) !     ------------------------------------------------------------------
(   73) 
(   74) IF(MYPROC > NPROC/2)THEN
(   75)   IBEG=1
(   76)   IEND=D%NDGL_FS
(   77)   IINC=1
(   78) ELSE
(   79)   IBEG=D%NDGL_FS
(   80)   IEND=1
(   81)   IINC=-1
(   82) ENDIF
(   83) 
(   84) !write(301,*) ' nums ', KST_UV, KST_SC, KF_UV, KST_nsders, KST_ewders, KF_SCDERS, KST_uvders, D%NDGL_FS
(   85) IF( KF_UV > 0 ) THEN
(   86)   PUV     => ZGTF(2*KST_UV-1:2*(KST_UV+2*KF_UV-1),:)
(   87) ENDIF
(   88) PSCALAR => ZGTF(2*KST_SC-1:2*(KST_SC+KF_SCALARS-1),:)
(   89) IF( KF_SCDERS > 0 ) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 3

(   90)   PNSDERS => ZGTF(2*KST_nsders-1:2*(KST_nsders+KF_SCDERS-1),:)
(   91)   PEWDERS => ZGTF(2*KST_ewders-1:2*(KST_ewders+KF_SCDERS-1),:)
(   92) ENDIF
(   93) IF (LUVDER) THEN
(   94)   PUVDERS => ZGTF(2*KST_uvders-1:2*(KST_uvders+2*KF_UV-1),:)
(   95) ENDIF
(   96) 
(   97) !$ACC data present(ZGTF) &
(   98) !$ACC& COPY (D,G,F) &
(   99) !$ACC& COPY (D%NSTAGTF,D%NPTRLS,G%NMEN,G%NLOEN,F%RACTHE) &
(  100) !$ACC& present(PUV,PSCALAR,PNSDERS,PEWDERS,PUVDERS)
(  101) 
(  102) DO KGL=IBEG,IEND,IINC
(  103)   
(  104) IGLG    = D%NPTRLS(MYSETW)+KGL-1
(  105) ZACHTE  = F%RACTHE(IGLG)
(  106) IMEN    = G%NMEN(IGLG)
(  107) ISTAGTF = D%NSTAGTF(KGL)
(  108) ZACHTE2  = F%RACTHE(IGLG)
(  109) 
(  110) IF( LATLON.AND.S%LDLL ) THEN
(  111)   ZPI = 2.0_JPRBT*ASIN(1.0_JPRBT)
(  112)   ZACHTE2 = 1._JPRBT
(  113)   ZACHTE  = F%RACTHE2(IGLG)
(  114)   
(  115)   ! apply shift for (even) lat-lon output grid
(  116)   IF( S%LSHIFTLL ) THEN
(  117)     ZSHIFT = ZPI/REAL(G%NLOEN(IGLG),JPRBT)
(  118) 
(  119)     !$acc parallel loop
(  120)     DO JF=1,KF_SCALARS
(  121)       DO JM=0,IMEN
(  122)         IR = ISTAGTF+2*JM+1
(  123)         II = IR+1
(  124)         
(  125)         ! calculate amplitude and add phase shift then reconstruct A,B
(  126)         ZAMP = SQRT(PSCALAR(JF,IR)**2 + PSCALAR(JF,II)**2)
(  127)         ZPHASE = ATAN2(PSCALAR(JF,II),PSCALAR(JF,IR)) + REAL(JM,JPRBT)*ZSHIFT
(  128)         
(  129)         PSCALAR(2*JF-1,IR) =  ZAMP*COS(ZPHASE)
(  130)         PSCALAR(2*JF,  Ir) = ZAMP*SIN(ZPHASE)
(  131)       ENDDO
(  132)     ENDDO
(  133)     IF(KF_SCDERS > 0)THEN
(  134)       !$acc parallel loop
(  135)       DO JF=1,KF_SCALARS
(  136)         DO JM=0,IMEN
(  137)           IR = ISTAGTF+2*JM+1
(  138)           II = IR+1          
(  139)           ! calculate amplitude and phase shift and reconstruct A,B
(  140)           ZAMP = SQRT(PNSDERS(JF,IR)**2 + PNSDERS(JF,II)**2)
(  141)           ZPHASE = ATAN2(PNSDERS(JF,II),PNSDERS(JF,IR)) + REAL(JM,JPRBT)*ZSHIFT
(  142)           PNSDERS(2*JF-1,IR) =  ZAMP*COS(ZPHASE)
(  143)           PNSDERS(2*JF,  Ir) = ZAMP*SIN(ZPHASE)
(  144)         ENDDO
(  145)       ENDDO
(  146)     ENDIF
(  147)     !$acc parallel loop






NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 4

(  148)     DO JF=1,2*KF_UV
(  149)       DO JM=0,IMEN
(  150)         IR = ISTAGTF+2*JM+1
(  151)         II = IR+1
(  152)         ! calculate amplitude and phase shift and reconstruct A,B
(  153)         ZAMP = SQRT(PUV(JF,IR)**2 + PUV(JF,II)**2)
(  154)         ZPHASE = ATAN2(PUV(JF,II),PUV(JF,IR)) + REAL(JM,JPRBT)*ZSHIFT
(  155)         PUV(2*JF-1,IR) =  ZAMP*COS(ZPHASE)
(  156)         PUV(2*JF,  Ir) =  ZAMP*SIN(ZPHASE)
(  157)       ENDDO
(  158)     ENDDO
(  159)   ENDIF
(  160) ENDIF
(  161)   
(  162)   !     ------------------------------------------------------------------
(  163)   
(  164) !*       1.    DIVIDE U V AND N-S DERIVATIVES BY A*COS(THETA)
(  165) !              ----------------------------------------------
(  166) 
(  167)   
(  168) !*       1.1      U AND V.
(  169) 
(  170) IF(KF_UV > 0) THEN
(  171)   !$acc parallel loop
(  172)   DO JLON=ISTAGTF+1,ISTAGTF+2*(IMEN+1)
(  173)     DO JF=1,2*KF_UV
(  174)       PUV(2*JF-1,JLON) = PUV(2*JF-1,JLON)*ZACHTE2
(  175)       PUV(2*JF,  JLON) = PUV(2*JF  ,JLON)*ZACHTE2
(  176)     ENDDO
(  177)   ENDDO
(  178) ENDIF
(  179) 
(  180) !*      1.2      N-S DERIVATIVES
(  181) 
(  182) IF(KF_SCDERS > 0)THEN
(  183)   !$acc parallel loop
(  184)   DO JLON=ISTAGTF+1,ISTAGTF+2*(IMEN+1)
(  185)     DO JF=1,KF_SCALARS
(  186)       PNSDERS(2*JF-1,JLON) = PNSDERS(2*JF-1,JLON)*ZACHTE2
(  187)       PNSDERS(2*JF,  JLON) = PNSDERS(2*JF,  JLON)*ZACHTE2
(  188)     ENDDO
(  189)   ENDDO
(  190) ENDIF
(  191) 
(  192) !     ------------------------------------------------------------------
(  193) 
(  194) !*       2.    EAST-WEST DERIVATIVES
(  195) !              ---------------------
(  196) 
(  197) !*       2.1      U AND V.
(  198) 
(  199) IF(LUVDER)THEN
(  200)   !$acc parallel loop private(IR)
(  201)   DO JM=0,IMEN
(  202)     IR = ISTAGTF+2*JM+1
(  203)     DO JF=1,2*KF_UV
(  204)       PUVDERS(2*JF-1,IR) = -PUV(2*JF,IR)*ZACHTE2*REAL(JM,JPRBT)
(  205)       PUVDERS(2*JF,  IR) =  PUV(2*JF-1,IR)*ZACHTE2*REAL(JM,JPRBT)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 5

(  206)     ENDDO
(  207)   ENDDO
(  208) ENDIF
(  209) 
(  210) !*       2.2     SCALAR VARIABLES
(  211) 
(  212) IF(KF_SCDERS > 0)THEN
(  213)   !$acc parallel loop private(IR)
(  214)   DO JM=0,IMEN
(  215)     IR = ISTAGTF+2*JM+1
(  216)     DO JF=1,KF_SCALARS
(  217)       PEWDERS(2*JF-1,IR) = -PSCALAR(2*JF,IR)*ZACHTE2*REAL(JM,JPRBT)
(  218)       PEWDERS(2*JF,  IR) =  PSCALAR(2*JF-1,IR)*ZACHTE2*REAL(JM,JPRBT)
(  219)     ENDDO
(  220)   ENDDO
(  221) ENDIF
(  222) 
(  223) enddo
(  224) !$ACC end data
(  225) !     ------------------------------------------------------------------
(  226) 
(  227) END SUBROUTINE FSC
(  228) END MODULE FSC_MOD









































NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 6

(    1) # 1 "fsc_mod.F90"
(    1) MODULE FSC_MOD
(    2) CONTAINS
(    3) SUBROUTINE FSC(KF_UV,KF_SCALARS,KF_SCDERS,&
(    4)  & KST_UV,KST_SC,KST_NSDERS,KST_EWDERS,KST_UVDERS)
(    5) # 6 "fsc_mod.F90"
(    6) !**** *FSC - Division by a*cos(theta), east-west derivatives
(    7) # 8 "fsc_mod.F90"
(    8) !     Purpose.
(    9) !     --------
(   10) !        In Fourier space divide u and v and all north-south
(   11) !        derivatives by a*cos(theta). Also compute east-west derivatives
(   12) !        of u,v,thermodynamic, passiv scalar variables and surface
(   13) !        pressure.
(   14) # 15 "fsc_mod.F90"
(   15) !**   Interface.
(   16) !     ----------
(   17) !        CALL FSC(..)
(   18) !        Explicit arguments :  PUV     - u and v
(   19) !        --------------------  PSCALAR - scalar valued varaibles
(   20) !                              PNSDERS - N-S derivative of S.V.V.
(   21) !                              PEWDERS - E-W derivative of S.V.V.
(   22) !                              PUVDERS - E-W derivative of u and v
(   23) !     Method.
(   24) !     -------
(   25) # 26 "fsc_mod.F90"
(   26) !     Externals.   None.
(   27) !     ----------
(   28) # 29 "fsc_mod.F90"
(   29) !     Author.
(   30) !     -------
(   31) !        Mats Hamrud *ECMWF*
(   32) # 33 "fsc_mod.F90"
(   33) !     Modifications.
(   34) !     --------------
(   35) !        Original : 00-03-03 (From SC2FSC)
(   36) # 37 "fsc_mod.F90"
(   37) !     ------------------------------------------------------------------
(   38) # 39 "fsc_mod.F90"
(   39) USE PARKIND1  ,ONLY : JPIM     ,JPRBT
(   40) # 41 "fsc_mod.F90"
(   41) USE TPM_TRANS       ,ONLY : LUVDER, LATLON, ZGTF
(   42) USE TPM_DISTR       ,ONLY : D, MYSETW,  MYPROC, NPROC
(   43) USE TPM_FIELDS      ,ONLY : F
(   44) USE TPM_GEOMETRY    ,ONLY : G
(   45) USE TPM_FLT                ,ONLY: S
(   46) use tpm_gen, only: nout
(   47) !
(   48) # 49 "fsc_mod.F90"
(   49) IMPLICIT NONE
(   50) INTEGER(KIND=JPIM) :: KGL
(   51) INTEGER(KIND=JPIM) , INTENT(IN) :: KF_UV,KF_SCALARS,KF_SCDERS
(   52) INTEGER(KIND=JPIM) , INTENT(IN) :: KST_UV, KST_SC, KST_NSDERS, KST_EWDERS, KST_UVDERS
(   53) # 54 "fsc_mod.F90"
(   54) REAL(KIND=JPRBT) , POINTER :: PUV(:,:)
(   55) REAL(KIND=JPRBT) , POINTER :: PSCALAR(:,:)
(   56) REAL(KIND=JPRBT) , POINTER :: PNSDERS(:,:)
(   57) REAL(KIND=JPRBT) , POINTER :: PEWDERS(:,:)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 7

(   58) REAL(KIND=JPRBT) , POINTER :: PUVDERS(:,:)
(   59) # 60 "fsc_mod.F90"
(   60) REAL(KIND=JPRBT) :: ZACHTE,ZMUL, ZACHTE2, ZSHIFT, ZPI
(   61) REAL(KIND=JPRBT) :: ZAMP, ZPHASE
(   62) INTEGER(KIND=JPIM) :: IMEN,ISTAGTF
(   63) # 65 "fsc_mod.F90"
(   65) INTEGER(KIND=JPIM) :: JLON,JF,IGLG,II,IR,JM
(   66) # 67 "fsc_mod.F90"
(   67) INTEGER(KIND=JPIM) :: IBEG,IEND,IINC
(   68) !DEBUGGING:
(   69) integer :: i,J,maxi,maxj
(   70) real :: maxv
(   71) # 72 "fsc_mod.F90"
(   72) !     ------------------------------------------------------------------
(   73) # 74 "fsc_mod.F90"
(   74) IF(MYPROC > NPROC/2)THEN
(   75)   IBEG=1
(   76)   IEND=D%NDGL_FS
(   77)   IINC=1
(   78) ELSE
(   79)   IBEG=D%NDGL_FS
(   80)   IEND=1
(   81)   IINC=-1
(   82) ENDIF
(   83) # 84 "fsc_mod.F90"
(   84) !write(301,*) ' nums ', KST_UV, KST_SC, KF_UV, KST_nsders, KST_ewders, KF_SCDERS, KST_uvders, D%NDGL_FS
(   85) IF( KF_UV > 0 ) THEN
(   86)   PUV     => ZGTF(2*KST_UV-1:2*(KST_UV+2*KF_UV-1),:)
(   87) ENDIF
(   88) PSCALAR => ZGTF(2*KST_SC-1:2*(KST_SC+KF_SCALARS-1),:)
(   89) IF( KF_SCDERS > 0 ) THEN
(   90)   PNSDERS => ZGTF(2*KST_nsders-1:2*(KST_nsders+KF_SCDERS-1),:)
(   91)   PEWDERS => ZGTF(2*KST_ewders-1:2*(KST_ewders+KF_SCDERS-1),:)
(   92) ENDIF
(   93) IF (LUVDER) THEN
(   94)   PUVDERS => ZGTF(2*KST_uvders-1:2*(KST_uvders+2*KF_UV-1),:)
(   95) ENDIF
(   96) # 97 "fsc_mod.F90"
(   98) !$ACC& COPY (D,G,F) &
(   99) !$ACC& COPY (D%NSTAGTF,D%NPTRLS,G%NMEN,G%NLOEN,F%RACTHE) &
(  100) !$ACC& present(PUV,PSCALAR,PNSDERS,PEWDERS,PUVDERS)
(  101) # 102 "fsc_mod.F90"
(  102) DO KGL=IBEG,IEND,IINC
(  103)   
(  104) IGLG    = D%NPTRLS(MYSETW)+KGL-1
(  105) ZACHTE  = F%RACTHE(IGLG)
(  106) IMEN    = G%NMEN(IGLG)
(  107) ISTAGTF = D%NSTAGTF(KGL)
(  108) ZACHTE2  = F%RACTHE(IGLG)
(  109) # 110 "fsc_mod.F90"
(  110) IF( LATLON.AND.S%LDLL ) THEN
(  111)   ZPI = 2.0_JPRBT*ASIN(1.0_JPRBT)
(  112)   ZACHTE2 = 1._JPRBT
(  113)   ZACHTE  = F%RACTHE2(IGLG)
(  114)   
(  115)   ! apply shift for (even) lat-lon output grid
(  116)   IF( S%LSHIFTLL ) THEN
(  117)     ZSHIFT = ZPI/REAL(G%NLOEN(IGLG),JPRBT)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 8

(  118) # 119 "fsc_mod.F90"
(  119)     !$acc parallel loop
(  120)     DO JF=1,KF_SCALARS
(  121)       DO JM=0,IMEN
(  122)         IR = ISTAGTF+2*JM+1
(  123)         II = IR+1
(  124)         
(  125)         ! calculate amplitude and add phase shift then reconstruct A,B
(  126)         ZAMP = SQRT(PSCALAR(JF,IR)**2 + PSCALAR(JF,II)**2)
(  127)         ZPHASE = ATAN2(PSCALAR(JF,II),PSCALAR(JF,IR)) + REAL(JM,JPRBT)*ZSHIFT
(  128)         
(  129)         PSCALAR(2*JF-1,IR) =  ZAMP*COS(ZPHASE)
(  130)         PSCALAR(2*JF,  Ir) = ZAMP*SIN(ZPHASE)
(  131)       ENDDO
(  132)     ENDDO
(  133)     IF(KF_SCDERS > 0)THEN
(  134)       !$acc parallel loop
(  135)       DO JF=1,KF_SCALARS
(  136)         DO JM=0,IMEN
(  137)           IR = ISTAGTF+2*JM+1
(  138)           II = IR+1          
(  139)           ! calculate amplitude and phase shift and reconstruct A,B
(  140)           ZAMP = SQRT(PNSDERS(JF,IR)**2 + PNSDERS(JF,II)**2)
(  141)           ZPHASE = ATAN2(PNSDERS(JF,II),PNSDERS(JF,IR)) + REAL(JM,JPRBT)*ZSHIFT
(  142)           PNSDERS(2*JF-1,IR) =  ZAMP*COS(ZPHASE)
(  143)           PNSDERS(2*JF,  Ir) = ZAMP*SIN(ZPHASE)
(  144)         ENDDO
(  145)       ENDDO
(  146)     ENDIF
(  147)     !$acc parallel loop
(  148)     DO JF=1,2*KF_UV
(  149)       DO JM=0,IMEN
(  150)         IR = ISTAGTF+2*JM+1
(  151)         II = IR+1
(  152)         ! calculate amplitude and phase shift and reconstruct A,B
(  153)         ZAMP = SQRT(PUV(JF,IR)**2 + PUV(JF,II)**2)
(  154)         ZPHASE = ATAN2(PUV(JF,II),PUV(JF,IR)) + REAL(JM,JPRBT)*ZSHIFT
(  155)         PUV(2*JF-1,IR) =  ZAMP*COS(ZPHASE)
(  156)         PUV(2*JF,  Ir) =  ZAMP*SIN(ZPHASE)
(  157)       ENDDO
(  158)     ENDDO
(  159)   ENDIF
(  160) ENDIF
(  161)   
(  162)   !     ------------------------------------------------------------------
(  163)   
(  164) !*       1.    DIVIDE U V AND N-S DERIVATIVES BY A*COS(THETA)
(  165) !              ----------------------------------------------
(  166) # 167 "fsc_mod.F90"
(  167)   
(  168) !*       1.1      U AND V.
(  169) # 170 "fsc_mod.F90"
(  170) IF(KF_UV > 0) THEN
(  171)   !$acc parallel loop
(  172)   DO JLON=ISTAGTF+1,ISTAGTF+2*(IMEN+1)
(  173)     DO JF=1,2*KF_UV
(  174)       PUV(2*JF-1,JLON) = PUV(2*JF-1,JLON)*ZACHTE2
(  175)       PUV(2*JF,  JLON) = PUV(2*JF  ,JLON)*ZACHTE2






NVFORTRAN (Version    20.11)          02/16/2022  17:30:32      page 9

(  176)     ENDDO
(  177)   ENDDO
(  178) ENDIF
(  179) # 180 "fsc_mod.F90"
(  180) !*      1.2      N-S DERIVATIVES
(  181) # 182 "fsc_mod.F90"
(  182) IF(KF_SCDERS > 0)THEN
(  183)   !$acc parallel loop
(  184)   DO JLON=ISTAGTF+1,ISTAGTF+2*(IMEN+1)
(  185)     DO JF=1,KF_SCALARS
(  186)       PNSDERS(2*JF-1,JLON) = PNSDERS(2*JF-1,JLON)*ZACHTE2
(  187)       PNSDERS(2*JF,  JLON) = PNSDERS(2*JF,  JLON)*ZACHTE2
(  188)     ENDDO
(  189)   ENDDO
(  190) ENDIF
(  191) # 192 "fsc_mod.F90"
(  192) !     ------------------------------------------------------------------
(  193) # 194 "fsc_mod.F90"
(  194) !*       2.    EAST-WEST DERIVATIVES
(  195) !              ---------------------
(  196) # 197 "fsc_mod.F90"
(  197) !*       2.1      U AND V.
(  198) # 199 "fsc_mod.F90"
(  199) IF(LUVDER)THEN
(  200)   !$acc parallel loop private(IR)
(  201)   DO JM=0,IMEN
(  202)     IR = ISTAGTF+2*JM+1
(  203)     DO JF=1,2*KF_UV
(  204)       PUVDERS(2*JF-1,IR) = -PUV(2*JF,IR)*ZACHTE2*REAL(JM,JPRBT)
(  205)       PUVDERS(2*JF,  IR) =  PUV(2*JF-1,IR)*ZACHTE2*REAL(JM,JPRBT)
(  206)     ENDDO
(  207)   ENDDO
(  208) ENDIF
(  209) # 210 "fsc_mod.F90"
(  210) !*       2.2     SCALAR VARIABLES
(  211) # 212 "fsc_mod.F90"
(  212) IF(KF_SCDERS > 0)THEN
(  213)   !$acc parallel loop private(IR)
(  214)   DO JM=0,IMEN
(  215)     IR = ISTAGTF+2*JM+1
(  216)     DO JF=1,KF_SCALARS
(  217)       PEWDERS(2*JF-1,IR) = -PSCALAR(2*JF,IR)*ZACHTE2*REAL(JM,JPRBT)
(  218)       PEWDERS(2*JF,  IR) =  PSCALAR(2*JF-1,IR)*ZACHTE2*REAL(JM,JPRBT)
(  219)     ENDDO
(  220)   ENDDO
(  221) ENDIF
(  222) # 223 "fsc_mod.F90"
(  223) enddo
(  224) !$ACC end data
(  225) !     ------------------------------------------------------------------
(  226) # 227 "fsc_mod.F90"
(  227) END SUBROUTINE FSC
(  228) END MODULE FSC_MOD
