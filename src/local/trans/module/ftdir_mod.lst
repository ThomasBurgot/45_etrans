


NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: ftdir_mod.F90

(    1) MODULE FTDIR_MOD
(    2) CONTAINS
(    3) SUBROUTINE FTDIR(KFIELDS)
(    4) 
(    5) 
(    6) !**** *FTDIR - Direct Fourier transform
(    7) 
(    8) !     Purpose. Routine for Grid-point to Fourier transform
(    9) !     --------
(   10) 
(   11) !**   Interface.
(   12) !     ----------
(   13) !        CALL FTDIR(..)
(   14) 
(   15) !        Explicit arguments :  PREEL   - Fourier/grid-point array
(   16) !        --------------------  KFIELDS - number of fields
(   17) 
(   18) !     Method.
(   19) !     -------
(   20) 
(   21) !     Externals.  FFT992 - FFT routine
(   22) !     ----------
(   23) !
(   24) 
(   25) !     Author.
(   26) !     -------
(   27) !        Mats Hamrud *ECMWF*
(   28) 
(   29) !     Modifications.
(   30) !     --------------
(   31) !        Original : 00-03-03






NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 2

(   32) !        G. Radnoti 01-04-24 2D model (NLOEN=1)
(   33) !        D. Degrauwe  (Feb 2012): Alternative extension zone (E')
(   34) !        G. Mozdzynski (Oct 2014): support for FFTW transforms
(   35) !        G. Mozdzynski (Jun 2015): Support alternative FFTs to FFTW
(   36) 
(   37) !     ------------------------------------------------------------------
(   38) 
(   39) USE PARKIND1  ,ONLY : JPIM, JPIB, JPRBT
(   40) 
(   41) USE TPM_DISTR       ,ONLY : D, MYSETW, MYPROC, NPROC,D_NSTAGTF,D_NPTRLS
(   42) USE TPM_TRANS       ,ONLY : ZGTF
(   43) USE TPM_GEOMETRY    ,ONLY : G,G_NMEN,G_NMEN_MAX,G_NLOEN,G_NLOEN_MAX
(   44) USE TPM_FFT         ,ONLY : T, TB
(   45) #ifdef WITH_FFTW
(   46) USE TPM_FFTW        ,ONLY : TW, EXEC_FFTW
(   47) #endif
(   48) USE TPM_FFTC        ,ONLY : CREATE_PLAN_FFT
(   49) USE TPM_DIM         ,ONLY : R,R_NNOEXTZL
(   50) USE CUDA_DEVICE_MOD
(   51) !
(   52) 
(   53) IMPLICIT NONE
(   54) 
(   55) INTEGER(KIND=JPIM),INTENT(IN)  :: KFIELDS
(   56) INTEGER(KIND=JPIM)  :: KGL
(   57) !REAL(KIND=JPRBT), INTENT(INOUT) :: PREEL(:,:)
(   58) 
(   59) INTEGER(KIND=JPIM) :: IGLG,IST,ILEN,IJUMP,JJ,JF,IST1
(   60) INTEGER(KIND=JPIM) :: IOFF,IRLEN,ICLEN, ITYPE
(   61) INTEGER(KIND=JPIM) :: IPLAN_R2C
(   62) INTEGER(KIND=JPIM) :: JMAX
(   63) REAL(KIND=JPRBT)    :: SCAL
(   64) LOGICAL :: LL_ALL=.FALSE. ! T=do kfields ffts in one batch, F=do kfields ffts one at a time
(   65) 
(   66) INTEGER(KIND=JPIM) :: IBEG,IEND,IINC,ISCAL
(   67) INTEGER(KIND=JPIM) :: OFFSET_VAR, IUNIT, ISIZE
(   68) integer :: istat
(   69) 
(   70) !     ------------------------------------------------------------------
(   71) 
(   72) IF(MYPROC > NPROC/2)THEN
(   73)   IBEG=1
(   74)   IEND=D%NDGL_FS
(   75)   IINC=1
(   76) ELSE
(   77)   IBEG=D%NDGL_FS
(   78)   IEND=1
(   79)   IINC=-1
(   80) ENDIF
(   81) 
(   82) OFFSET_VAR=D_NPTRLS(MYSETW)
(   83) 
(   84) ! debug
(   85) !iunit=myproc+300
(   86) !!$ACC update host(ZGTF)
(   87) !!$ACC wait
(   88) !DO IGLG=IBEG+OFFSET_VAR-1,IEND+OFFSET_VAR-1,IINC
(   89) !  DO JJ=1, G_NLOEN_MAX+2






NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 3

(   90) !    JMAX = G_NLOEN(IGLG)+2
(   91) !    if (JJ .le. JMAX) then
(   92) !      IF (G_NLOEN(IGLG)>1) THEN
(   93) !      KGL=IGLG-OFFSET_VAR+1
(   94) !      IOFF=D_NSTAGTF(KGL)+1
(   95) !      !JF=41+137-1
(   96) !      !if( IGLG .EQ. 41 .and. JJ.LE.10 ) write(iunit,*) 'fft_in ',JJ,G_NLOEN(IGLG),IGLG,ZGTF(JF,IOFF+JJ-1)
(   97) !!      !if( IGLG .EQ. 41 ) write(iunit,*) 'fft_in ',JJ,G_NLOEN(IGLG),IGLG,ZGTF(1,IOFF+JJ-1)
(   98) !!      !if( IGLG .EQ. 43 ) write(iunit,*) 'fft_in ',JJ,G_NLOEN(IGLG),IGLG,ZGTF(1,IOFF+JJ-1)
(   99) !      endif
(  100) !    endif
(  101) !  ENDDO
(  102) !ENDDO
(  103) 
(  104) !istat = cuda_Synchronize()
(  105) DO KGL=IBEG,IEND,IINC
(  106) 
(  107)    !IF( T%LUSEFFT992(KGL) )THEN
(  108)    !   stop 'Error: code path not (yet) supported in GPU version'
(  109)    !END IF
(  110)    
(  111)   ITYPE=-1
(  112)   IJUMP= 1
(  113)   IGLG = D_NPTRLS(MYSETW)+KGL-1
(  114)   IST  = 2*(G_NMEN(IGLG)+1)+1
(  115)   !ILEN = G_NLOEN(IGLG)+R_NNOEXTZL+3-IST
(  116) 
(  117)   !IF (G_NLOEN(IGLG)>1) THEN
(  118)     IOFF=D_NSTAGTF(KGL)+1
(  119)     !IRLEN=G_NLOEN(IGLG)+R_NNOEXTZL
(  120)     !ICLEN=(IRLEN/2+1)*2
(  121) 
(  122)     CALL CREATE_PLAN_FFT(IPLAN_R2C,-1,KN=G_NLOEN(IGLG),KLOT=KFIELDS)
(  123)     !$ACC host_data use_device(ZGTF)
(  124)     CALL EXECUTE_PLAN_FFTC(IPLAN_R2C,-1,ZGTF(1, IOFF))
(  125)     !$ACC end host_data
(  126) 
(  127)    !ENDIF
(  128) END DO
(  129) 
(  130) istat = cuda_Synchronize()
(  131) 
(  132) !$ACC data &
(  133) !$ACC& COPY(D,D_NSTAGTF,D_NPTRLS,G_NMEN,G_NMEN_MAX,G_NLOEN,G_NLOEN_MAX,R_NNOEXTZL) &
(  134) !$ACC& present(ZGTF)
(  135) 
(  136) !$ACC parallel loop collapse(3) private(JMAX,KGL,IOFF,SCAL)
(  137) DO IGLG=IBEG+OFFSET_VAR-1,IEND+OFFSET_VAR-1,IINC
(  138)    DO JJ=1, G_NLOEN_MAX+2
(  139)       DO JF=1,KFIELDS
(  140)          JMAX = G_NLOEN(IGLG)
(  141)          if (JJ .le. JMAX) then
(  142)            KGL=IGLG-OFFSET_VAR+1
(  143)            IOFF=D_NSTAGTF(KGL)+1
(  144)            SCAL = 1._JPRBT/REAL(G_NLOEN(IGLG),JPRBT)
(  145)            ZGTF(JF,IOFF+JJ-1)= SCAL * ZGTF(JF, IOFF+JJ-1)
(  146)          end if
(  147)       ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 4

(  148)    ENDDO
(  149) END DO
(  150) 
(  151) ! debug
(  152) !iunit=myproc+300
(  153) !!$ACC update host(ZGTF)
(  154) !!$ACC wait
(  155) !DO IGLG=IBEG+OFFSET_VAR-1,IEND+OFFSET_VAR-1,IINC
(  156) !  DO JJ=1, G_NLOEN_MAX+2
(  157) !      DO JF=1,KFIELDS
(  158) !!
(  159) !    JMAX = G_NLOEN(IGLG)+2
(  160) !    if (JJ .le. JMAX) then
(  161) !      IF (G_NLOEN(IGLG)>1) THEN
(  162) !      KGL=IGLG-OFFSET_VAR+1
(  163) !      IOFF=D_NSTAGTF(KGL)+1
(  164) !      !if( JF.eq.(41+137-1) .and. JJ .LT. 10 ) write(iunit,*) 'fft_01 ',JF,IGLG,KGL,IOFF+JJ-1,G_NLOEN(IGLG),G_NMEN(IGLG),ZG
(  165) !      endif
(  166) !    endif
(  167) !  ENDDO
(  168) !  ENDDO
(  169) !ENDDO
(  170) 
(  171) !$ACC parallel loop !collapse(3) private(IGLG,IST,ILEN,IST1)
(  172) DO KGL=IBEG,IEND,IINC
(  173) 
(  174)    IGLG = D_NPTRLS(MYSETW)+KGL-1
(  175)    IST  = 2*(G_NMEN(IGLG)+1)+1
(  176)    ILEN = G_NLOEN(IGLG)+R_NNOEXTZL+3-IST
(  177)    
(  178)    IST1=1
(  179)    IF (G_NLOEN(IGLG)==1) IST1=0
(  180) 
(  181)    !$ACC loop collapse(2)
(  182)    DO JJ=IST1, ILEN
(  183)       DO JF=1,KFIELDS
(  184)                ZGTF(JF,IST+D_NSTAGTF(KGL)+JJ-1) = 0.0_JPRBT
(  185)       ENDDO
(  186)    ENDDO
(  187) END DO
(  188) 
(  189) !$ACC end data
(  190) 
(  191) !     ------------------------------------------------------------------
(  192) 
(  193) END SUBROUTINE FTDIR
(  194) END MODULE FTDIR_MOD

















NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 5

(    1) # 1 "ftdir_mod.F90"
(    1) MODULE FTDIR_MOD
(    2) CONTAINS
(    3) SUBROUTINE FTDIR(KFIELDS)
(    4) # 6 "ftdir_mod.F90"
(    6) !**** *FTDIR - Direct Fourier transform
(    7) # 8 "ftdir_mod.F90"
(    8) !     Purpose. Routine for Grid-point to Fourier transform
(    9) !     --------
(   10) # 11 "ftdir_mod.F90"
(   11) !**   Interface.
(   12) !     ----------
(   13) !        CALL FTDIR(..)
(   14) # 15 "ftdir_mod.F90"
(   15) !        Explicit arguments :  PREEL   - Fourier/grid-point array
(   16) !        --------------------  KFIELDS - number of fields
(   17) # 18 "ftdir_mod.F90"
(   18) !     Method.
(   19) !     -------
(   20) # 21 "ftdir_mod.F90"
(   21) !     Externals.  FFT992 - FFT routine
(   22) !     ----------
(   23) !
(   24) # 25 "ftdir_mod.F90"
(   25) !     Author.
(   26) !     -------
(   27) !        Mats Hamrud *ECMWF*
(   28) # 29 "ftdir_mod.F90"
(   29) !     Modifications.
(   30) !     --------------
(   31) !        Original : 00-03-03
(   32) !        G. Radnoti 01-04-24 2D model (NLOEN=1)
(   33) !        D. Degrauwe  (Feb 2012): Alternative extension zone (E')
(   34) !        G. Mozdzynski (Oct 2014): support for FFTW transforms
(   35) !        G. Mozdzynski (Jun 2015): Support alternative FFTs to FFTW
(   36) # 37 "ftdir_mod.F90"
(   37) !     ------------------------------------------------------------------
(   38) # 39 "ftdir_mod.F90"
(   39) USE PARKIND1  ,ONLY : JPIM, JPIB, JPRBT
(   40) # 41 "ftdir_mod.F90"
(   41) USE TPM_DISTR       ,ONLY : D, MYSETW, MYPROC, NPROC,D_NSTAGTF,D_NPTRLS
(   42) USE TPM_TRANS       ,ONLY : ZGTF
(   43) USE TPM_GEOMETRY    ,ONLY : G,G_NMEN,G_NMEN_MAX,G_NLOEN,G_NLOEN_MAX
(   44) USE TPM_FFT         ,ONLY : T, TB
(   45) # 48 "ftdir_mod.F90"
(   48) USE TPM_FFTC        ,ONLY : CREATE_PLAN_FFT
(   49) USE TPM_DIM         ,ONLY : R,R_NNOEXTZL
(   50) USE CUDA_DEVICE_MOD
(   51) !
(   52) # 53 "ftdir_mod.F90"
(   53) IMPLICIT NONE
(   54) # 55 "ftdir_mod.F90"
(   55) INTEGER(KIND=JPIM),INTENT(IN)  :: KFIELDS
(   56) INTEGER(KIND=JPIM)  :: KGL
(   57) !REAL(KIND=JPRBT), INTENT(INOUT) :: PREEL(:,:)
(   58) # 59 "ftdir_mod.F90"
(   59) INTEGER(KIND=JPIM) :: IGLG,IST,ILEN,IJUMP,JJ,JF,IST1
(   60) INTEGER(KIND=JPIM) :: IOFF,IRLEN,ICLEN, ITYPE






NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 6

(   61) INTEGER(KIND=JPIM) :: IPLAN_R2C
(   62) INTEGER(KIND=JPIM) :: JMAX
(   63) REAL(KIND=JPRBT)    :: SCAL
(   64) LOGICAL :: LL_ALL=.FALSE. ! T=do kfields ffts in one batch, F=do kfields ffts one at a time
(   65) # 66 "ftdir_mod.F90"
(   66) INTEGER(KIND=JPIM) :: IBEG,IEND,IINC,ISCAL
(   67) INTEGER(KIND=JPIM) :: OFFSET_VAR, IUNIT, ISIZE
(   68) integer :: istat
(   69) # 70 "ftdir_mod.F90"
(   70) !     ------------------------------------------------------------------
(   71) # 72 "ftdir_mod.F90"
(   72) IF(MYPROC > NPROC/2)THEN
(   73)   IBEG=1
(   74)   IEND=D%NDGL_FS
(   75)   IINC=1
(   76) ELSE
(   77)   IBEG=D%NDGL_FS
(   78)   IEND=1
(   79)   IINC=-1
(   80) ENDIF
(   81) # 82 "ftdir_mod.F90"
(   82) OFFSET_VAR=D_NPTRLS(MYSETW)
(   83) # 84 "ftdir_mod.F90"
(   84) ! debug
(   85) !iunit=myproc+300
(   86) !!$ACC update host(ZGTF)
(   87) !!$ACC wait
(   88) !DO IGLG=IBEG+OFFSET_VAR-1,IEND+OFFSET_VAR-1,IINC
(   89) !  DO JJ=1, G_NLOEN_MAX+2
(   90) !    JMAX = G_NLOEN(IGLG)+2
(   91) !    if (JJ .le. JMAX) then
(   92) !      IF (G_NLOEN(IGLG)>1) THEN
(   93) !      KGL=IGLG-OFFSET_VAR+1
(   94) !      IOFF=D_NSTAGTF(KGL)+1
(   95) !      !JF=41+137-1
(   96) !      !if( IGLG .EQ. 41 .and. JJ.LE.10 ) write(iunit,*) 'fft_in ',JJ,G_NLOEN(IGLG),IGLG,ZGTF(JF,IOFF+JJ-1)
(   97) !!      !if( IGLG .EQ. 41 ) write(iunit,*) 'fft_in ',JJ,G_NLOEN(IGLG),IGLG,ZGTF(1,IOFF+JJ-1)
(   98) !!      !if( IGLG .EQ. 43 ) write(iunit,*) 'fft_in ',JJ,G_NLOEN(IGLG),IGLG,ZGTF(1,IOFF+JJ-1)
(   99) !      endif
(  100) !    endif
(  101) !  ENDDO
(  102) !ENDDO
(  103) # 104 "ftdir_mod.F90"
(  104) !istat = cuda_Synchronize()
(  105) DO KGL=IBEG,IEND,IINC
(  106) # 107 "ftdir_mod.F90"
(  107)    !IF( T%LUSEFFT992(KGL) )THEN
(  108)    !   stop 'Error: code path not (yet) supported in GPU version'
(  109)    !END IF
(  110)    
(  111)   ITYPE=-1
(  112)   IJUMP= 1
(  113)   IGLG = D_NPTRLS(MYSETW)+KGL-1
(  114)   IST  = 2*(G_NMEN(IGLG)+1)+1
(  115)   !ILEN = G_NLOEN(IGLG)+R_NNOEXTZL+3-IST
(  116) # 117 "ftdir_mod.F90"
(  117)   !IF (G_NLOEN(IGLG)>1) THEN
(  118)     IOFF=D_NSTAGTF(KGL)+1






NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 7

(  119)     !IRLEN=G_NLOEN(IGLG)+R_NNOEXTZL
(  120)     !ICLEN=(IRLEN/2+1)*2
(  121) # 122 "ftdir_mod.F90"
(  122)     CALL CREATE_PLAN_FFT(IPLAN_R2C,-1,KN=G_NLOEN(IGLG),KLOT=KFIELDS)
(  123)     !$ACC host_data use_device(ZGTF)
(  124)     CALL EXECUTE_PLAN_FFTC(IPLAN_R2C,-1,ZGTF(1, IOFF))
(  125)     !$ACC end host_data
(  126) # 127 "ftdir_mod.F90"
(  127)    !ENDIF
(  128) END DO
(  129) # 130 "ftdir_mod.F90"
(  130) istat = cuda_Synchronize()
(  131) # 132 "ftdir_mod.F90"
(  133) !$ACC& COPY(D,D_NSTAGTF,D_NPTRLS,G_NMEN,G_NMEN_MAX,G_NLOEN,G_NLOEN_MAX,R_NNOEXTZL) &
(  134) !$ACC& present(ZGTF)
(  135) # 136 "ftdir_mod.F90"
(  136) !$ACC parallel loop collapse(3) private(JMAX,KGL,IOFF,SCAL)
(  137) DO IGLG=IBEG+OFFSET_VAR-1,IEND+OFFSET_VAR-1,IINC
(  138)    DO JJ=1, G_NLOEN_MAX+2
(  139)       DO JF=1,KFIELDS
(  140)          JMAX = G_NLOEN(IGLG)
(  141)          if (JJ .le. JMAX) then
(  142)            KGL=IGLG-OFFSET_VAR+1
(  143)            IOFF=D_NSTAGTF(KGL)+1
(  144)            SCAL = 1._JPRBT/REAL(G_NLOEN(IGLG),JPRBT)
(  145)            ZGTF(JF,IOFF+JJ-1)= SCAL * ZGTF(JF, IOFF+JJ-1)
(  146)          end if
(  147)       ENDDO
(  148)    ENDDO
(  149) END DO
(  150) # 151 "ftdir_mod.F90"
(  151) ! debug
(  152) !iunit=myproc+300
(  153) !!$ACC update host(ZGTF)
(  154) !!$ACC wait
(  155) !DO IGLG=IBEG+OFFSET_VAR-1,IEND+OFFSET_VAR-1,IINC
(  156) !  DO JJ=1, G_NLOEN_MAX+2
(  157) !      DO JF=1,KFIELDS
(  158) !!
(  159) !    JMAX = G_NLOEN(IGLG)+2
(  160) !    if (JJ .le. JMAX) then
(  161) !      IF (G_NLOEN(IGLG)>1) THEN
(  162) !      KGL=IGLG-OFFSET_VAR+1
(  163) !      IOFF=D_NSTAGTF(KGL)+1
(  164) !      !if( JF.eq.(41+137-1) .and. JJ .LT. 10 ) write(iunit,*) 'fft_01 ',JF,IGLG,KGL,IOFF+JJ-1,G_NLOEN(IGLG),G_NMEN(IGLG),ZGTF(JF,IOFF+JJ-1)
(  165) !      endif
(  166) !    endif
(  167) !  ENDDO
(  168) !  ENDDO
(  169) !ENDDO
(  170) # 171 "ftdir_mod.F90"
(  171) !$ACC parallel loop !collapse(3) private(IGLG,IST,ILEN,IST1)
(  172) DO KGL=IBEG,IEND,IINC
(  173) # 174 "ftdir_mod.F90"
(  174)    IGLG = D_NPTRLS(MYSETW)+KGL-1
(  175)    IST  = 2*(G_NMEN(IGLG)+1)+1
(  176)    ILEN = G_NLOEN(IGLG)+R_NNOEXTZL+3-IST
(  177)    






NVFORTRAN (Version    20.11)          02/16/2022  17:29:10      page 8

(  178)    IST1=1
(  179)    IF (G_NLOEN(IGLG)==1) IST1=0
(  180) # 181 "ftdir_mod.F90"
(  181)    !$ACC loop collapse(2)
(  182)    DO JJ=IST1, ILEN
(  183)       DO JF=1,KFIELDS
(  184)                ZGTF(JF,IST+D_NSTAGTF(KGL)+JJ-1) = 0.0_JPRBT
(  185)       ENDDO
(  186)    ENDDO
(  187) END DO
(  188) # 189 "ftdir_mod.F90"
(  189) !$ACC end data
(  190) # 191 "ftdir_mod.F90"
(  191) !     ------------------------------------------------------------------
(  192) # 193 "ftdir_mod.F90"
(  193) END SUBROUTINE FTDIR
(  194) END MODULE FTDIR_MOD
