


NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: sustaonl_mod.F90

(    1) MODULE SUSTAONL_MOD
(    2) CONTAINS
(    3) SUBROUTINE SUSTAONL(KMEDIAP,KRESTM,LDWEIGHTED_DISTR,PWEIGHT,PMEDIAP,KPROCAGP)
(    4) 
(    5) !**** *SUSTAONL * - Routine to initialize parallel environment
(    6) 
(    7) !     Purpose.
(    8) !     --------
(    9) !           Initialize D%NSTA and D%NONL.
(   10) !           Calculation of distribution of grid points to processors :
(   11) !           Splitting of grid in B direction
(   12) 
(   13) !**   Interface.
(   14) !     ----------
(   15) !        *CALL* *SUSTAONL *
(   16) 
(   17) !        Explicit arguments :
(   18) !        --------------------
(   19) !                     KMEDIAP    - mean number of grid points per PE
(   20) !                     KRESTM     - number of PEs with one extra point
(   21) !                     LDWEIGHTED_DISTR -true if weighted distribution
(   22) !                     PWEIGHT    -weight per grid-point if weighted distribution
(   23) !                     PMEDIAP    -mean weight per PE if weighted distribution
(   24) !                     KPROCAGP   -number of grid points per A set
(   25) 
(   26) !        Implicit arguments :
(   27) !        --------------------
(   28) 
(   29) 
(   30) !     Method.
(   31) !     -------






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 2

(   32) !        See documentation
(   33) 
(   34) !     Externals.   NONE.
(   35) !     ----------
(   36) 
(   37) !     Reference.
(   38) !     ----------
(   39) !        ECMWF Research Department documentation of the IFS
(   40) 
(   41) !     Author.
(   42) !     -------
(   43) !        MPP Group *ECMWF*
(   44) 
(   45) !     Modifications.
(   46) !     --------------
(   47) !        Original : 95-10-01
(   48) !        Modified 98-08-10 by K. YESSAD: removal of LRPOLE option.
(   49) !          - removal of LRPOLE in YOMCT0.
(   50) !          - removal of code under LRPOLE.
(   51) !        Modified 98-12-04 C. Fischer: merge with SUESTAONL (Aladin)
(   52) !        R. El Khatib 05-Apr-2007 Enable back vectorization on NEC
(   53) !        R. El Khatib 30-Apr-2013 Optimization
(   54) !     ------------------------------------------------------------------
(   55) 
(   56) USE PARKIND1  ,ONLY : JPIM     ,JPRBT, JPRD
(   57) USE MPL_MODULE  ,ONLY : MPL_ALLGATHERV, MPL_RECV, MPL_SEND
(   58) 
(   59) USE TPM_GEN         ,ONLY : NOUT, NPRINTLEV
(   60) USE TPM_DIM         ,ONLY : R
(   61) USE TPM_GEOMETRY    ,ONLY : G
(   62) USE TPM_DISTR       ,ONLY : D, LEQ_REGIONS, MTAGPART, NPRCIDS, MYPROC, NPROC
(   63) 
(   64) USE SET2PE_MOD      ,ONLY : SET2PE
(   65) USE ABORT_TRANS_MOD ,ONLY : ABORT_TRANS
(   66) USE EQ_REGIONS_MOD  ,ONLY : MY_REGION_NS, MY_REGION_EW,           &
(   67)      &                      N_REGIONS, N_REGIONS_EW, N_REGIONS_NS
(   68) !
(   69) 
(   70) IMPLICIT NONE
(   71) 
(   72) !     DUMMY
(   73) INTEGER(KIND=JPIM),INTENT(IN) :: KMEDIAP
(   74) INTEGER(KIND=JPIM),INTENT(IN) :: KRESTM
(   75) REAL(KIND=JPRBT),INTENT(IN)    :: PWEIGHT(:)
(   76) LOGICAL,INTENT(IN)            :: LDWEIGHTED_DISTR
(   77) REAL(KIND=JPRBT),INTENT(IN)    :: PMEDIAP
(   78) INTEGER(KIND=JPIM),INTENT(IN) :: KPROCAGP(:)
(   79) 
(   80) !     LOCAL
(   81) 
(   82) INTEGER(KIND=JPIM) :: IXPTLAT(R%NDGL), ILSTPTLAT(R%NDGL),ISENDREQ(NPROC)
(   83) INTEGER(KIND=JPIM) :: ICHK(R%NDLON,R%NDGL), ICOMBUF(R%NDGL*N_REGIONS_EW*2)
(   84) INTEGER(KIND=JPIM) :: I1, I2, IBUFLEN, IDGLG, IDWIDE,&
(   85)              &IGL, IGL1, IGL2, IGLOFF, IGPTA, &
(   86)              &IGPTPRSETS, IGPTS, IGPTSP, ILEN, ILRECV, &
(   87)              &ILSEND, INPLAT, INXLAT, IPOS, &
(   88)              &IPROCB, IPTSRE, IRECV, IPE, &
(   89)              &IREST, ISEND, ITAG, JA, JB, JGL, JL, JNPTSRE, &






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 3

(   90)              &ILAT, ILON, ILOEN
(   91) INTEGER(KIND=JPIM),ALLOCATABLE :: ICOMBUFG(:)
(   92) REAL(KIND=JPRBT),ALLOCATABLE :: ZWEIGHT(:,:)
(   93) INTEGER(KIND=JPIM) :: JJ, ILENG(NPROC), IOFF(NPROC)
(   94) REAL(KIND=JPRD)    :: ZTIME0,ZTIME1,ZTIME2
(   95) 
(   96) LOGICAL :: LLABORT
(   97) LOGICAL :: LLP1,LLP2
(   98) 
(   99) REAL(KIND=JPRBT) ::  ZCOMP,ZPI,ZLON
(  100) INTEGER(KIND=JPIM) :: IDIVID(R%NDGL),ILATMD,ILATMD1
(  101) 
(  102) !      -----------------------------------------------------------------
(  103) 
(  104) ZPI  = 2.0_JPRBT*ASIN(1.0_JPRBT)
(  105) 
(  106) IXPTLAT  (:)=999999
(  107) ILSTPTLAT(:)=999999
(  108) 
(  109) LLP1 = NPRINTLEV>0
(  110) LLP2 = NPRINTLEV>1
(  111) 
(  112) IDWIDE  = R%NDGL/2
(  113) IBUFLEN = R%NDGL*N_REGIONS_EW*2
(  114) IDGLG   = R%NDGL
(  115) 
(  116) I1 = MAX(   1,D%NFRSTLAT(MY_REGION_NS)-D%NFRSTLOFF)
(  117) I2 = MIN(IDGLG,D%NLSTLAT (MY_REGION_NS)-D%NFRSTLOFF)
(  118) 
(  119) ILEN = D%NLSTLAT(MY_REGION_NS) - D%NFRSTLAT(MY_REGION_NS)+1
(  120) 
(  121) IGPTPRSETS = SUM(G%NLOEN(1:D%NFRSTLAT(MY_REGION_NS)-1))
(  122) 
(  123) IF (D%LSPLIT) THEN
(  124)   IF( LEQ_REGIONS )THEN
(  125)     IGPTA=0
(  126)     DO JA=1,MY_REGION_NS-1
(  127)       IGPTA = IGPTA + KPROCAGP(JA)
(  128)     ENDDO
(  129)     IGPTS = KPROCAGP(MY_REGION_NS)
(  130)   ELSE
(  131)     IF (MY_REGION_NS <= KRESTM.OR.KRESTM == 0) THEN
(  132)       IGPTS = KMEDIAP
(  133)       IGPTA = KMEDIAP*(MY_REGION_NS-1)
(  134)     ELSE
(  135)       IGPTS = KMEDIAP-1
(  136)       IGPTA = KMEDIAP*KRESTM+IGPTS*(MY_REGION_NS-1-KRESTM)
(  137)     ENDIF
(  138)   ENDIF
(  139) ELSE
(  140)   IGPTA = IGPTPRSETS
(  141)   IGPTS = SUM(G%NLOEN(D%NFRSTLAT(MY_REGION_NS):D%NLSTLAT(MY_REGION_NS)))
(  142) ENDIF
(  143) 
(  144) IGPTSP = IGPTS/N_REGIONS(MY_REGION_NS)
(  145) IREST = IGPTS-N_REGIONS(MY_REGION_NS)*IGPTSP
(  146) IXPTLAT(1) = IGPTA-IGPTPRSETS+1
(  147) ILSTPTLAT(1) = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 4

(  148) INPLAT = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))-IXPTLAT(1)+1
(  149) DO JGL=2,ILEN
(  150)   IXPTLAT(JGL) = 1
(  151)   ILSTPTLAT(JGL) =  G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  152)   INPLAT = INPLAT+G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  153) ENDDO
(  154) ILSTPTLAT(ILEN) = G%NLOEN(D%NLSTLAT(MY_REGION_NS))-INPLAT+IGPTS
(  155) 
(  156) DO JB=1,N_REGIONS_EW
(  157)   DO JGL=1,R%NDGL+N_REGIONS_NS-1
(  158)     D%NSTA(JGL,JB) = 0
(  159)     D%NONL(JGL,JB) = 0
(  160)   ENDDO
(  161) ENDDO
(  162) 
(  163) 
(  164) !  grid point decomposition
(  165) !  ---------------------------------------
(  166) IF( NPROC > 1 )THEN
(  167)   DO JGL=1,ILEN
(  168)     IDIVID(JGL) = NINT(360000.0_JPRBT/REAL( G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRBT))
(  169)   ENDDO
(  170)   IF( LDWEIGHTED_DISTR )THEN
(  171)     ALLOCATE(ZWEIGHT(G%NLOEN(R%NDGL/2),R%NDGL))
(  172)     IGL=0
(  173)     DO JGL=1,R%NDGL
(  174)       DO JL=1,G%NLOEN(JGL)
(  175)         IGL=IGL+1
(  176)         ZWEIGHT(JL,JGL)=PWEIGHT(IGL)
(  177)       ENDDO
(  178)     ENDDO
(  179)     ZCOMP=0
(  180)     IGPTS=0
(  181)   ENDIF
(  182) 
(  183) 
(  184)   DO JB=1,N_REGIONS(MY_REGION_NS)
(  185)     
(  186)     IF( .NOT.LDWEIGHTED_DISTR )THEN
(  187)       
(  188)       IF (JB <= IREST) THEN
(  189)         IPTSRE = IGPTSP+1
(  190)       ELSE
(  191)         IPTSRE = IGPTSP
(  192)       ENDIF
(  193)       DO JNPTSRE=1,IPTSRE
(  194) 
(  195)         ILATMD = 360*1000
(  196)         
(  197)         DO JGL=1,ILEN
(  198)           IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  199)             ZLON = REAL(IXPTLAT(JGL)-1,JPRBT)*2.0*ZPI/REAL(G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRBT)
(  200)             ILATMD1 = NINT(ZLON*180000.0_JPRBT/ZPI)
(  201)             IF(ILATMD1 < ILATMD) THEN
(  202)               ILATMD = ILATMD1
(  203)               INXLAT = JGL
(  204)             ENDIF
(  205)           ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 5

(  206)         ENDDO
(  207)         
(  208)         IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  209)           IGL=D%NPTRFLOFF+INXLAT
(  210)           IF (D%NSTA(IGL,JB) == 0) THEN
(  211)             D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  212)           ENDIF
(  213)           D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  214)         ENDIF
(  215)         IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  216)       ENDDO
(  217)       
(  218)     ELSE
(  219)       
(  220)       DO WHILE ( (JB <  N_REGIONS(MY_REGION_NS) .AND. ZCOMP < PMEDIAP) &
(  221)        & .OR. (JB == N_REGIONS(MY_REGION_NS) .AND. IGPTS < KPROCAGP(MY_REGION_NS)) )
(  222)         
(  223)         IGPTS = IGPTS + 1
(  224)         ILATMD = 360*1000
(  225)         
(  226)         DO JGL=1,ILEN
(  227)           IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  228)             ZLON = REAL(IXPTLAT(JGL)-1,JPRBT)*2.0*ZPI/REAL(G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRBT)
(  229)             ILATMD1 = NINT(ZLON*180000.0_JPRBT/ZPI)
(  230)             IF(ILATMD1 < ILATMD) THEN
(  231)               ILATMD = ILATMD1
(  232)               INXLAT = JGL
(  233)             ENDIF
(  234)           ENDIF
(  235)         ENDDO
(  236)         
(  237)         IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  238)           IGL=D%NPTRFLOFF+INXLAT
(  239)           IF (D%NSTA(IGL,JB) == 0) THEN
(  240)             D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  241)           ENDIF
(  242)           D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  243)           IF(IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1)THEN
(  244)             CALL ABORT_TRANS(' SUSTAONL: IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1')
(  245)           ENDIF
(  246)           ILON=D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  247)           ILAT=D%NFRSTLAT(MY_REGION_NS)+INXLAT-1
(  248)           ILOEN=G%NLOEN(ILAT)
(  249)           IF(ILON<1.OR.ILON>ILOEN)THEN
(  250)             CALL ABORT_TRANS(' SUSTAONL: ILON<1.OR.ILON>ILOEN')
(  251)           ENDIF
(  252)           ZCOMP = ZCOMP + ZWEIGHT(ILON,ILAT)
(  253)         ENDIF
(  254)         IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  255)       ENDDO
(  256)       
(  257)       ZCOMP = ZCOMP - PMEDIAP
(  258)       
(  259)     ENDIF
(  260)     
(  261)   ENDDO
(  262)   
(  263)   IF( LDWEIGHTED_DISTR )THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 6

(  264)     DEALLOCATE(ZWEIGHT)
(  265)   ENDIF
(  266)   
(  267)   ! Exchange local partitioning info to produce global view
(  268)   !
(  269)   
(  270)   CALL GSTATS_BARRIER(795)
(  271)   CALL GSTATS(814,0)
(  272)   IF( LEQ_REGIONS )THEN
(  273) 
(  274)     ITAG = MTAGPART
(  275)     IPOS = 0
(  276)     DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  277)       IPOS = IPOS+1
(  278)       ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  279)       IPOS = IPOS+1
(  280)       ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  281)     ENDDO
(  282)     IF( IPOS > IBUFLEN )THEN
(  283)       CALL ABORT_TRANS(' SUSTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  284)     ENDIF
(  285)     ILSEND = IPOS
(  286) 
(  287)     DO JA=1,N_REGIONS_NS
(  288)       DO JB=1,N_REGIONS(JA)
(  289)         CALL SET2PE(IRECV,JA,JB,0,0)
(  290)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  291)         ILENG(NPRCIDS(IRECV))=ILEN
(  292)       ENDDO
(  293)     ENDDO
(  294)     IOFF(1)=0
(  295)     DO JJ=2,NPROC
(  296)       IOFF(JJ)=IOFF(JJ-1)+ILENG(JJ-1)
(  297)     ENDDO
(  298)     ALLOCATE(ICOMBUFG(SUM(ILENG(:))))
(  299)     CALL MPL_ALLGATHERV(ICOMBUF(1:ILSEND),ICOMBUFG,ILENG,CDSTRING='SUSTAONL')
(  300)     DO JA=1,N_REGIONS_NS
(  301)       IGL1 = D%NFRSTLAT(JA)
(  302)       IGL2 = D%NLSTLAT(JA)
(  303)       DO JB=1,N_REGIONS(JA)
(  304)         CALL SET2PE(IRECV,JA,JB,0,0)
(  305)         IF(IRECV /= MYPROC) THEN
(  306)           ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  307)           IPOS = IOFF(NPRCIDS(IRECV))
(  308)           DO JGL=IGL1,IGL2
(  309)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  310)             IPOS = IPOS+1
(  311)             D%NSTA(IGL,JB) = ICOMBUFG(IPOS)
(  312)             IPOS = IPOS+1
(  313)             D%NONL(IGL,JB) = ICOMBUFG(IPOS)
(  314)           ENDDO
(  315)         ENDIF
(  316)       ENDDO
(  317)     ENDDO
(  318)     DEALLOCATE(ICOMBUFG)
(  319) 
(  320)   ELSE
(  321) 






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 7

(  322)     ITAG = MTAGPART
(  323)     IPOS = 0
(  324)     DO JB=1,N_REGIONS(MY_REGION_NS)
(  325)       DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  326)         IPOS = IPOS+1
(  327)         ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,JB)
(  328)         IPOS = IPOS+1
(  329)         ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,JB)
(  330)       ENDDO
(  331)     ENDDO
(  332)     IF( IPOS > IBUFLEN )THEN
(  333)       CALL ABORT_TRANS(' SUSTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  334)     ENDIF
(  335)     ILSEND = IPOS
(  336)     DO JA=1,N_REGIONS_NS
(  337)       CALL SET2PE(ISEND,JA,MY_REGION_EW,0,0)
(  338)       IF(ISEND /= MYPROC) THEN
(  339)         CALL MPL_SEND(ICOMBUF(1:ILSEND),KDEST=NPRCIDS(ISEND),KTAG=ITAG, &
(  340)          &   CDSTRING='SUSTAONL:')
(  341)       ENDIF
(  342)     ENDDO
(  343) 
(  344)     DO JA=1,N_REGIONS_NS
(  345)       CALL SET2PE(IRECV,JA,MY_REGION_EW,0,0)
(  346)       IF(IRECV /= MYPROC) THEN
(  347)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*N_REGIONS(JA)*2
(  348)         CALL MPL_RECV(ICOMBUF(1:ILEN),KSOURCE=NPRCIDS(IRECV),KTAG=ITAG, &
(  349)          & KOUNT=ILRECV,CDSTRING='SUSTAONL:')
(  350)         IGL1 = D%NFRSTLAT(JA)
(  351)         IGL2 = D%NLSTLAT(JA)
(  352)         IPOS = 0
(  353)         DO JB=1,N_REGIONS(JA)
(  354)           DO JGL=IGL1,IGL2
(  355)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  356)             IPOS = IPOS+1
(  357)             D%NSTA(IGL,JB) = ICOMBUF(IPOS)
(  358)             IPOS = IPOS+1
(  359)             D%NONL(IGL,JB) = ICOMBUF(IPOS)
(  360)           ENDDO
(  361)         ENDDO
(  362)       ENDIF
(  363)     ENDDO
(  364) 
(  365)   ENDIF
(  366)   CALL GSTATS(814,1)
(  367)   CALL GSTATS_BARRIER2(795)
(  368) ELSE
(  369)   DO JGL=1,R%NDGL
(  370)     D%NSTA(JGL,1) = 1
(  371)     D%NONL(JGL,1) = G%NLOEN(JGL)
(  372)   ENDDO
(  373) ENDIF
(  374) 
(  375) ! Confirm consistency of global partitioning, specifically testing for
(  376) ! multiple assignments of same grid point and unassigned grid points
(  377) 
(  378) LLABORT = .FALSE.
(  379) DO JGL=1,R%NDGL






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 8

(  380)   DO JL=1,G%NLOEN(JGL)
(  381)     ICHK(JL,JGL) = 1
(  382)   ENDDO
(  383) ENDDO
(  384) DO JA=1,N_REGIONS_NS
(  385)   IGLOFF = D%NPTRFRSTLAT(JA)
(  386)   DO JB=1,N_REGIONS(JA)
(  387)     IGL1 = D%NFRSTLAT(JA)
(  388)     IGL2 = D%NLSTLAT(JA)
(  389)     DO JGL=IGL1,IGL2
(  390)       IGL = IGLOFF+JGL-IGL1
(  391)       DO JL=D%NSTA(IGL,JB),D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  392)         IF( ICHK(JL,JGL) /= 1 )THEN
(  393)           WRITE(NOUT,'(" SUSTAONL : seta=",i4," setb=",i4,&
(  394)            &" row=",I4," sta=",I4," INVALID GRID POINT")')&
(  395)            &JA,JB,JGL,JL
(  396)           WRITE(0,'(" SUSTAONL : seta=",i4," setb=",i4,&
(  397)            &" ROW=",I4," sta=",I4," INVALID GRID POINT")')&
(  398)            &JA,JB,JGL,JL
(  399)           LLABORT = .TRUE.
(  400)         ENDIF
(  401)         ICHK(JL,JGL) = 2
(  402)       ENDDO
(  403)     ENDDO
(  404)   ENDDO
(  405) ENDDO
(  406) DO JGL=1,R%NDGL
(  407)   DO JL=1,G%NLOEN(JGL)
(  408)     IF( ICHK(JL,JGL) /= 2 )THEN
(  409)       WRITE(NOUT,'(" SUSTAONL : row=",i4," sta=",i4,&
(  410)        &" GRID POINT NOT ASSIGNED")') JGL,JL
(  411)       LLABORT = .TRUE.
(  412)     ENDIF
(  413)   ENDDO
(  414) ENDDO
(  415) IF( LLABORT )THEN
(  416)   WRITE(NOUT,'(" SUSTAONL : inconsistent partitioning")')
(  417)   CALL ABORT_TRANS(' SUSTAONL: inconsistent partitioning')
(  418) ENDIF
(  419) 
(  420) 
(  421) IF (LLP1) THEN
(  422)   WRITE(UNIT=NOUT,FMT='('' OUTPUT FROM ROUTINE SUSTAONL '')')
(  423)   WRITE(UNIT=NOUT,FMT='('' '')')
(  424)   WRITE(UNIT=NOUT,FMT='('' PARTITIONING INFORMATION '')')
(  425)   WRITE(UNIT=NOUT,FMT='('' '')')
(  426)   IPROCB = MIN(32,N_REGIONS_EW)
(  427)   WRITE(UNIT=NOUT,FMT='(17X," SETB=",32(1X,I5))') (JB,JB=1,IPROCB)
(  428)   DO JA=1,N_REGIONS_NS
(  429)     IPROCB = MIN(32,N_REGIONS(JA))
(  430)     WRITE(UNIT=NOUT,FMT='('' '')')
(  431)     IGLOFF = D%NPTRFRSTLAT(JA)
(  432)     IGL1 = D%NFRSTLAT(JA)
(  433)     IGL2 = D%NLSTLAT(JA)
(  434)     DO JGL=IGL1,IGL2
(  435)       IGL=IGLOFF+JGL-IGL1
(  436)       WRITE(UNIT=NOUT,FMT='(" SETA=",I5," LAT=",I5," NSTA=",&
(  437)        &32(1X,I5))') JA,JGL,(D%NSTA(IGL,JB),JB=1,IPROCB)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 9

(  438)       WRITE(UNIT=NOUT,FMT='(" SETA=",I5," LAT=",I5," D%NONL=",&
(  439)        &32(1X,I5))') JA,JGL,(D%NONL(IGL,JB),JB=1,IPROCB)
(  440)     ENDDO
(  441)     WRITE(UNIT=NOUT,FMT='('' '')')
(  442)   ENDDO
(  443)   WRITE(UNIT=NOUT,FMT='('' '')')
(  444)   WRITE(UNIT=NOUT,FMT='('' '')')
(  445) ENDIF
(  446) 
(  447) !     ------------------------------------------------------------------
(  448) 
(  449) END SUBROUTINE SUSTAONL
(  450) END MODULE SUSTAONL_MOD
(  451) 


















































NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 10

(    1) # 1 "sustaonl_mod.F90"
(    1) MODULE SUSTAONL_MOD
(    2) CONTAINS
(    3) SUBROUTINE SUSTAONL(KMEDIAP,KRESTM,LDWEIGHTED_DISTR,PWEIGHT,PMEDIAP,KPROCAGP)
(    4) # 5 "sustaonl_mod.F90"
(    5) !**** *SUSTAONL * - Routine to initialize parallel environment
(    6) # 7 "sustaonl_mod.F90"
(    7) !     Purpose.
(    8) !     --------
(    9) !           Initialize D%NSTA and D%NONL.
(   10) !           Calculation of distribution of grid points to processors :
(   11) !           Splitting of grid in B direction
(   12) # 13 "sustaonl_mod.F90"
(   13) !**   Interface.
(   14) !     ----------
(   15) !        *CALL* *SUSTAONL *
(   16) # 17 "sustaonl_mod.F90"
(   17) !        Explicit arguments :
(   18) !        --------------------
(   19) !                     KMEDIAP    - mean number of grid points per PE
(   20) !                     KRESTM     - number of PEs with one extra point
(   21) !                     LDWEIGHTED_DISTR -true if weighted distribution
(   22) !                     PWEIGHT    -weight per grid-point if weighted distribution
(   23) !                     PMEDIAP    -mean weight per PE if weighted distribution
(   24) !                     KPROCAGP   -number of grid points per A set
(   25) # 26 "sustaonl_mod.F90"
(   26) !        Implicit arguments :
(   27) !        --------------------
(   28) # 30 "sustaonl_mod.F90"
(   30) !     Method.
(   31) !     -------
(   32) !        See documentation
(   33) # 34 "sustaonl_mod.F90"
(   34) !     Externals.   NONE.
(   35) !     ----------
(   36) # 37 "sustaonl_mod.F90"
(   37) !     Reference.
(   38) !     ----------
(   39) !        ECMWF Research Department documentation of the IFS
(   40) # 41 "sustaonl_mod.F90"
(   41) !     Author.
(   42) !     -------
(   43) !        MPP Group *ECMWF*
(   44) # 45 "sustaonl_mod.F90"
(   45) !     Modifications.
(   46) !     --------------
(   47) !        Original : 95-10-01
(   48) !        Modified 98-08-10 by K. YESSAD: removal of LRPOLE option.
(   49) !          - removal of LRPOLE in YOMCT0.
(   50) !          - removal of code under LRPOLE.
(   51) !        Modified 98-12-04 C. Fischer: merge with SUESTAONL (Aladin)
(   52) !        R. El Khatib 05-Apr-2007 Enable back vectorization on NEC
(   53) !        R. El Khatib 30-Apr-2013 Optimization
(   54) !     ------------------------------------------------------------------
(   55) # 56 "sustaonl_mod.F90"
(   56) USE PARKIND1  ,ONLY : JPIM     ,JPRBT, JPRD
(   57) USE MPL_MODULE  ,ONLY : MPL_ALLGATHERV, MPL_RECV, MPL_SEND
(   58) # 59 "sustaonl_mod.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 11

(   59) USE TPM_GEN         ,ONLY : NOUT, NPRINTLEV
(   60) USE TPM_DIM         ,ONLY : R
(   61) USE TPM_GEOMETRY    ,ONLY : G
(   62) USE TPM_DISTR       ,ONLY : D, LEQ_REGIONS, MTAGPART, NPRCIDS, MYPROC, NPROC
(   63) # 64 "sustaonl_mod.F90"
(   64) USE SET2PE_MOD      ,ONLY : SET2PE
(   65) USE ABORT_TRANS_MOD ,ONLY : ABORT_TRANS
(   66) USE EQ_REGIONS_MOD  ,ONLY : MY_REGION_NS, MY_REGION_EW,           &
(   67)      &                      N_REGIONS, N_REGIONS_EW, N_REGIONS_NS
(   68) !
(   69) # 70 "sustaonl_mod.F90"
(   70) IMPLICIT NONE
(   71) # 72 "sustaonl_mod.F90"
(   72) !     DUMMY
(   73) INTEGER(KIND=JPIM),INTENT(IN) :: KMEDIAP
(   74) INTEGER(KIND=JPIM),INTENT(IN) :: KRESTM
(   75) REAL(KIND=JPRBT),INTENT(IN)    :: PWEIGHT(:)
(   76) LOGICAL,INTENT(IN)            :: LDWEIGHTED_DISTR
(   77) REAL(KIND=JPRBT),INTENT(IN)    :: PMEDIAP
(   78) INTEGER(KIND=JPIM),INTENT(IN) :: KPROCAGP(:)
(   79) # 80 "sustaonl_mod.F90"
(   80) !     LOCAL
(   81) # 82 "sustaonl_mod.F90"
(   82) INTEGER(KIND=JPIM) :: IXPTLAT(R%NDGL), ILSTPTLAT(R%NDGL),ISENDREQ(NPROC)
(   83) INTEGER(KIND=JPIM) :: ICHK(R%NDLON,R%NDGL), ICOMBUF(R%NDGL*N_REGIONS_EW*2)
(   84) INTEGER(KIND=JPIM) :: I1, I2, IBUFLEN, IDGLG, IDWIDE,&
(   85)              &IGL, IGL1, IGL2, IGLOFF, IGPTA, &
(   86)              &IGPTPRSETS, IGPTS, IGPTSP, ILEN, ILRECV, &
(   87)              &ILSEND, INPLAT, INXLAT, IPOS, &
(   88)              &IPROCB, IPTSRE, IRECV, IPE, &
(   89)              &IREST, ISEND, ITAG, JA, JB, JGL, JL, JNPTSRE, &
(   90)              &ILAT, ILON, ILOEN
(   91) INTEGER(KIND=JPIM),ALLOCATABLE :: ICOMBUFG(:)
(   92) REAL(KIND=JPRBT),ALLOCATABLE :: ZWEIGHT(:,:)
(   93) INTEGER(KIND=JPIM) :: JJ, ILENG(NPROC), IOFF(NPROC)
(   94) REAL(KIND=JPRD)    :: ZTIME0,ZTIME1,ZTIME2
(   95) # 96 "sustaonl_mod.F90"
(   96) LOGICAL :: LLABORT
(   97) LOGICAL :: LLP1,LLP2
(   98) # 99 "sustaonl_mod.F90"
(   99) REAL(KIND=JPRBT) ::  ZCOMP,ZPI,ZLON
(  100) INTEGER(KIND=JPIM) :: IDIVID(R%NDGL),ILATMD,ILATMD1
(  101) # 102 "sustaonl_mod.F90"
(  102) !      -----------------------------------------------------------------
(  103) # 104 "sustaonl_mod.F90"
(  104) ZPI  = 2.0_JPRBT*ASIN(1.0_JPRBT)
(  105) # 106 "sustaonl_mod.F90"
(  106) IXPTLAT  (:)=999999
(  107) ILSTPTLAT(:)=999999
(  108) # 109 "sustaonl_mod.F90"
(  109) LLP1 = NPRINTLEV>0
(  110) LLP2 = NPRINTLEV>1
(  111) # 112 "sustaonl_mod.F90"
(  112) IDWIDE  = R%NDGL/2
(  113) IBUFLEN = R%NDGL*N_REGIONS_EW*2
(  114) IDGLG   = R%NDGL
(  115) # 116 "sustaonl_mod.F90"
(  116) I1 = MAX(   1,D%NFRSTLAT(MY_REGION_NS)-D%NFRSTLOFF)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 12

(  117) I2 = MIN(IDGLG,D%NLSTLAT (MY_REGION_NS)-D%NFRSTLOFF)
(  118) # 119 "sustaonl_mod.F90"
(  119) ILEN = D%NLSTLAT(MY_REGION_NS) - D%NFRSTLAT(MY_REGION_NS)+1
(  120) # 121 "sustaonl_mod.F90"
(  121) IGPTPRSETS = SUM(G%NLOEN(1:D%NFRSTLAT(MY_REGION_NS)-1))
(  122) # 123 "sustaonl_mod.F90"
(  123) IF (D%LSPLIT) THEN
(  124)   IF( LEQ_REGIONS )THEN
(  125)     IGPTA=0
(  126)     DO JA=1,MY_REGION_NS-1
(  127)       IGPTA = IGPTA + KPROCAGP(JA)
(  128)     ENDDO
(  129)     IGPTS = KPROCAGP(MY_REGION_NS)
(  130)   ELSE
(  131)     IF (MY_REGION_NS <= KRESTM.OR.KRESTM == 0) THEN
(  132)       IGPTS = KMEDIAP
(  133)       IGPTA = KMEDIAP*(MY_REGION_NS-1)
(  134)     ELSE
(  135)       IGPTS = KMEDIAP-1
(  136)       IGPTA = KMEDIAP*KRESTM+IGPTS*(MY_REGION_NS-1-KRESTM)
(  137)     ENDIF
(  138)   ENDIF
(  139) ELSE
(  140)   IGPTA = IGPTPRSETS
(  141)   IGPTS = SUM(G%NLOEN(D%NFRSTLAT(MY_REGION_NS):D%NLSTLAT(MY_REGION_NS)))
(  142) ENDIF
(  143) # 144 "sustaonl_mod.F90"
(  144) IGPTSP = IGPTS/N_REGIONS(MY_REGION_NS)
(  145) IREST = IGPTS-N_REGIONS(MY_REGION_NS)*IGPTSP
(  146) IXPTLAT(1) = IGPTA-IGPTPRSETS+1
(  147) ILSTPTLAT(1) = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))
(  148) INPLAT = G%NLOEN(D%NFRSTLAT(MY_REGION_NS))-IXPTLAT(1)+1
(  149) DO JGL=2,ILEN
(  150)   IXPTLAT(JGL) = 1
(  151)   ILSTPTLAT(JGL) =  G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  152)   INPLAT = INPLAT+G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1)
(  153) ENDDO
(  154) ILSTPTLAT(ILEN) = G%NLOEN(D%NLSTLAT(MY_REGION_NS))-INPLAT+IGPTS
(  155) # 156 "sustaonl_mod.F90"
(  156) DO JB=1,N_REGIONS_EW
(  157)   DO JGL=1,R%NDGL+N_REGIONS_NS-1
(  158)     D%NSTA(JGL,JB) = 0
(  159)     D%NONL(JGL,JB) = 0
(  160)   ENDDO
(  161) ENDDO
(  162) # 164 "sustaonl_mod.F90"
(  164) !  grid point decomposition
(  165) !  ---------------------------------------
(  166) IF( NPROC > 1 )THEN
(  167)   DO JGL=1,ILEN
(  168)     IDIVID(JGL) = NINT(360000.0_JPRBT/REAL( G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRBT))
(  169)   ENDDO
(  170)   IF( LDWEIGHTED_DISTR )THEN
(  171)     ALLOCATE(ZWEIGHT(G%NLOEN(R%NDGL/2),R%NDGL))
(  172)     IGL=0
(  173)     DO JGL=1,R%NDGL
(  174)       DO JL=1,G%NLOEN(JGL)
(  175)         IGL=IGL+1






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 13

(  176)         ZWEIGHT(JL,JGL)=PWEIGHT(IGL)
(  177)       ENDDO
(  178)     ENDDO
(  179)     ZCOMP=0
(  180)     IGPTS=0
(  181)   ENDIF
(  182) # 184 "sustaonl_mod.F90"
(  184)   DO JB=1,N_REGIONS(MY_REGION_NS)
(  185)     
(  186)     IF( .NOT.LDWEIGHTED_DISTR )THEN
(  187)       
(  188)       IF (JB <= IREST) THEN
(  189)         IPTSRE = IGPTSP+1
(  190)       ELSE
(  191)         IPTSRE = IGPTSP
(  192)       ENDIF
(  193)       DO JNPTSRE=1,IPTSRE
(  194) # 195 "sustaonl_mod.F90"
(  195)         ILATMD = 360*1000
(  196)         
(  197)         DO JGL=1,ILEN
(  198)           IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  199)             ZLON = REAL(IXPTLAT(JGL)-1,JPRBT)*2.0*ZPI/REAL(G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRBT)
(  200)             ILATMD1 = NINT(ZLON*180000.0_JPRBT/ZPI)
(  201)             IF(ILATMD1 < ILATMD) THEN
(  202)               ILATMD = ILATMD1
(  203)               INXLAT = JGL
(  204)             ENDIF
(  205)           ENDIF
(  206)         ENDDO
(  207)         
(  208)         IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  209)           IGL=D%NPTRFLOFF+INXLAT
(  210)           IF (D%NSTA(IGL,JB) == 0) THEN
(  211)             D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  212)           ENDIF
(  213)           D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  214)         ENDIF
(  215)         IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  216)       ENDDO
(  217)       
(  218)     ELSE
(  219)       
(  220)       DO WHILE ( (JB <  N_REGIONS(MY_REGION_NS) .AND. ZCOMP < PMEDIAP) &
(  221)        & .OR. (JB == N_REGIONS(MY_REGION_NS) .AND. IGPTS < KPROCAGP(MY_REGION_NS)) )
(  222)         
(  223)         IGPTS = IGPTS + 1
(  224)         ILATMD = 360*1000
(  225)         
(  226)         DO JGL=1,ILEN
(  227)           IF (IXPTLAT(JGL)  <=  ILSTPTLAT(JGL)) THEN
(  228)             ZLON = REAL(IXPTLAT(JGL)-1,JPRBT)*2.0*ZPI/REAL(G%NLOEN(D%NFRSTLAT(MY_REGION_NS)+JGL-1),JPRBT)
(  229)             ILATMD1 = NINT(ZLON*180000.0_JPRBT/ZPI)
(  230)             IF(ILATMD1 < ILATMD) THEN
(  231)               ILATMD = ILATMD1
(  232)               INXLAT = JGL
(  233)             ENDIF
(  234)           ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 14

(  235)         ENDDO
(  236)         
(  237)         IF (INXLAT >= I1 .AND. INXLAT <= I2) THEN
(  238)           IGL=D%NPTRFLOFF+INXLAT
(  239)           IF (D%NSTA(IGL,JB) == 0) THEN
(  240)             D%NSTA(IGL,JB) = IXPTLAT(INXLAT)
(  241)           ENDIF
(  242)           D%NONL(IGL,JB) = D%NONL(IGL,JB)+1
(  243)           IF(IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1)THEN
(  244)             CALL ABORT_TRANS(' SUSTAONL: IGL<1.OR.IGL>R%NDGL+N_REGIONS_NS-1')
(  245)           ENDIF
(  246)           ILON=D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  247)           ILAT=D%NFRSTLAT(MY_REGION_NS)+INXLAT-1
(  248)           ILOEN=G%NLOEN(ILAT)
(  249)           IF(ILON<1.OR.ILON>ILOEN)THEN
(  250)             CALL ABORT_TRANS(' SUSTAONL: ILON<1.OR.ILON>ILOEN')
(  251)           ENDIF
(  252)           ZCOMP = ZCOMP + ZWEIGHT(ILON,ILAT)
(  253)         ENDIF
(  254)         IXPTLAT(INXLAT) = IXPTLAT(INXLAT)+1
(  255)       ENDDO
(  256)       
(  257)       ZCOMP = ZCOMP - PMEDIAP
(  258)       
(  259)     ENDIF
(  260)     
(  261)   ENDDO
(  262)   
(  263)   IF( LDWEIGHTED_DISTR )THEN
(  264)     DEALLOCATE(ZWEIGHT)
(  265)   ENDIF
(  266)   
(  267)   ! Exchange local partitioning info to produce global view
(  268)   !
(  269)   
(  270)   CALL GSTATS_BARRIER(795)
(  271)   CALL GSTATS(814,0)
(  272)   IF( LEQ_REGIONS )THEN
(  273) # 274 "sustaonl_mod.F90"
(  274)     ITAG = MTAGPART
(  275)     IPOS = 0
(  276)     DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  277)       IPOS = IPOS+1
(  278)       ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  279)       IPOS = IPOS+1
(  280)       ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,MY_REGION_EW)
(  281)     ENDDO
(  282)     IF( IPOS > IBUFLEN )THEN
(  283)       CALL ABORT_TRANS(' SUSTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  284)     ENDIF
(  285)     ILSEND = IPOS
(  286) # 287 "sustaonl_mod.F90"
(  287)     DO JA=1,N_REGIONS_NS
(  288)       DO JB=1,N_REGIONS(JA)
(  289)         CALL SET2PE(IRECV,JA,JB,0,0)
(  290)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  291)         ILENG(NPRCIDS(IRECV))=ILEN
(  292)       ENDDO






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 15

(  293)     ENDDO
(  294)     IOFF(1)=0
(  295)     DO JJ=2,NPROC
(  296)       IOFF(JJ)=IOFF(JJ-1)+ILENG(JJ-1)
(  297)     ENDDO
(  298)     ALLOCATE(ICOMBUFG(SUM(ILENG(:))))
(  299)     CALL MPL_ALLGATHERV(ICOMBUF(1:ILSEND),ICOMBUFG,ILENG,CDSTRING='SUSTAONL')
(  300)     DO JA=1,N_REGIONS_NS
(  301)       IGL1 = D%NFRSTLAT(JA)
(  302)       IGL2 = D%NLSTLAT(JA)
(  303)       DO JB=1,N_REGIONS(JA)
(  304)         CALL SET2PE(IRECV,JA,JB,0,0)
(  305)         IF(IRECV /= MYPROC) THEN
(  306)           ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*2
(  307)           IPOS = IOFF(NPRCIDS(IRECV))
(  308)           DO JGL=IGL1,IGL2
(  309)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  310)             IPOS = IPOS+1
(  311)             D%NSTA(IGL,JB) = ICOMBUFG(IPOS)
(  312)             IPOS = IPOS+1
(  313)             D%NONL(IGL,JB) = ICOMBUFG(IPOS)
(  314)           ENDDO
(  315)         ENDIF
(  316)       ENDDO
(  317)     ENDDO
(  318)     DEALLOCATE(ICOMBUFG)
(  319) # 320 "sustaonl_mod.F90"
(  320)   ELSE
(  321) # 322 "sustaonl_mod.F90"
(  322)     ITAG = MTAGPART
(  323)     IPOS = 0
(  324)     DO JB=1,N_REGIONS(MY_REGION_NS)
(  325)       DO JGL=1,D%NLSTLAT(MY_REGION_NS)-D%NFRSTLAT(MY_REGION_NS)+1
(  326)         IPOS = IPOS+1
(  327)         ICOMBUF(IPOS) = D%NSTA(D%NPTRFLOFF+JGL,JB)
(  328)         IPOS = IPOS+1
(  329)         ICOMBUF(IPOS) = D%NONL(D%NPTRFLOFF+JGL,JB)
(  330)       ENDDO
(  331)     ENDDO
(  332)     IF( IPOS > IBUFLEN )THEN
(  333)       CALL ABORT_TRANS(' SUSTAONL: SEND BUFFER TOO SMALL FOR GLOBAL INFO')
(  334)     ENDIF
(  335)     ILSEND = IPOS
(  336)     DO JA=1,N_REGIONS_NS
(  337)       CALL SET2PE(ISEND,JA,MY_REGION_EW,0,0)
(  338)       IF(ISEND /= MYPROC) THEN
(  339)         CALL MPL_SEND(ICOMBUF(1:ILSEND),KDEST=NPRCIDS(ISEND),KTAG=ITAG, &
(  340)          &   CDSTRING='SUSTAONL:')
(  341)       ENDIF
(  342)     ENDDO
(  343) # 344 "sustaonl_mod.F90"
(  344)     DO JA=1,N_REGIONS_NS
(  345)       CALL SET2PE(IRECV,JA,MY_REGION_EW,0,0)
(  346)       IF(IRECV /= MYPROC) THEN
(  347)         ILEN = (D%NLSTLAT(JA)-D%NFRSTLAT(JA)+1)*N_REGIONS(JA)*2
(  348)         CALL MPL_RECV(ICOMBUF(1:ILEN),KSOURCE=NPRCIDS(IRECV),KTAG=ITAG, &
(  349)          & KOUNT=ILRECV,CDSTRING='SUSTAONL:')
(  350)         IGL1 = D%NFRSTLAT(JA)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 16

(  351)         IGL2 = D%NLSTLAT(JA)
(  352)         IPOS = 0
(  353)         DO JB=1,N_REGIONS(JA)
(  354)           DO JGL=IGL1,IGL2
(  355)             IGL = D%NPTRFRSTLAT(JA)+JGL-IGL1
(  356)             IPOS = IPOS+1
(  357)             D%NSTA(IGL,JB) = ICOMBUF(IPOS)
(  358)             IPOS = IPOS+1
(  359)             D%NONL(IGL,JB) = ICOMBUF(IPOS)
(  360)           ENDDO
(  361)         ENDDO
(  362)       ENDIF
(  363)     ENDDO
(  364) # 365 "sustaonl_mod.F90"
(  365)   ENDIF
(  366)   CALL GSTATS(814,1)
(  367)   CALL GSTATS_BARRIER2(795)
(  368) ELSE
(  369)   DO JGL=1,R%NDGL
(  370)     D%NSTA(JGL,1) = 1
(  371)     D%NONL(JGL,1) = G%NLOEN(JGL)
(  372)   ENDDO
(  373) ENDIF
(  374) # 375 "sustaonl_mod.F90"
(  375) ! Confirm consistency of global partitioning, specifically testing for
(  376) ! multiple assignments of same grid point and unassigned grid points
(  377) # 378 "sustaonl_mod.F90"
(  378) LLABORT = .FALSE.
(  379) DO JGL=1,R%NDGL
(  380)   DO JL=1,G%NLOEN(JGL)
(  381)     ICHK(JL,JGL) = 1
(  382)   ENDDO
(  383) ENDDO
(  384) DO JA=1,N_REGIONS_NS
(  385)   IGLOFF = D%NPTRFRSTLAT(JA)
(  386)   DO JB=1,N_REGIONS(JA)
(  387)     IGL1 = D%NFRSTLAT(JA)
(  388)     IGL2 = D%NLSTLAT(JA)
(  389)     DO JGL=IGL1,IGL2
(  390)       IGL = IGLOFF+JGL-IGL1
(  391)       DO JL=D%NSTA(IGL,JB),D%NSTA(IGL,JB)+D%NONL(IGL,JB)-1
(  392)         IF( ICHK(JL,JGL) /= 1 )THEN
(  393)           WRITE(NOUT,'(" SUSTAONL : seta=",i4," setb=",i4,&
(  394)            &" row=",I4," sta=",I4," INVALID GRID POINT")')&
(  395)            &JA,JB,JGL,JL
(  396)           WRITE(0,'(" SUSTAONL : seta=",i4," setb=",i4,&
(  397)            &" ROW=",I4," sta=",I4," INVALID GRID POINT")')&
(  398)            &JA,JB,JGL,JL
(  399)           LLABORT = .TRUE.
(  400)         ENDIF
(  401)         ICHK(JL,JGL) = 2
(  402)       ENDDO
(  403)     ENDDO
(  404)   ENDDO
(  405) ENDDO
(  406) DO JGL=1,R%NDGL
(  407)   DO JL=1,G%NLOEN(JGL)
(  408)     IF( ICHK(JL,JGL) /= 2 )THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:30:08      page 17

(  409)       WRITE(NOUT,'(" SUSTAONL : row=",i4," sta=",i4,&
(  410)        &" GRID POINT NOT ASSIGNED")') JGL,JL
(  411)       LLABORT = .TRUE.
(  412)     ENDIF
(  413)   ENDDO
(  414) ENDDO
(  415) IF( LLABORT )THEN
(  416)   WRITE(NOUT,'(" SUSTAONL : inconsistent partitioning")')
(  417)   CALL ABORT_TRANS(' SUSTAONL: inconsistent partitioning')
(  418) ENDIF
(  419) # 421 "sustaonl_mod.F90"
(  421) IF (LLP1) THEN
(  422)   WRITE(UNIT=NOUT,FMT='('' OUTPUT FROM ROUTINE SUSTAONL '')')
(  423)   WRITE(UNIT=NOUT,FMT='('' '')')
(  424)   WRITE(UNIT=NOUT,FMT='('' PARTITIONING INFORMATION '')')
(  425)   WRITE(UNIT=NOUT,FMT='('' '')')
(  426)   IPROCB = MIN(32,N_REGIONS_EW)
(  427)   WRITE(UNIT=NOUT,FMT='(17X," SETB=",32(1X,I5))') (JB,JB=1,IPROCB)
(  428)   DO JA=1,N_REGIONS_NS
(  429)     IPROCB = MIN(32,N_REGIONS(JA))
(  430)     WRITE(UNIT=NOUT,FMT='('' '')')
(  431)     IGLOFF = D%NPTRFRSTLAT(JA)
(  432)     IGL1 = D%NFRSTLAT(JA)
(  433)     IGL2 = D%NLSTLAT(JA)
(  434)     DO JGL=IGL1,IGL2
(  435)       IGL=IGLOFF+JGL-IGL1
(  436)       WRITE(UNIT=NOUT,FMT='(" SETA=",I5," LAT=",I5," NSTA=",&
(  437)        &32(1X,I5))') JA,JGL,(D%NSTA(IGL,JB),JB=1,IPROCB)
(  438)       WRITE(UNIT=NOUT,FMT='(" SETA=",I5," LAT=",I5," D%NONL=",&
(  439)        &32(1X,I5))') JA,JGL,(D%NONL(IGL,JB),JB=1,IPROCB)
(  440)     ENDDO
(  441)     WRITE(UNIT=NOUT,FMT='('' '')')
(  442)   ENDDO
(  443)   WRITE(UNIT=NOUT,FMT='('' '')')
(  444)   WRITE(UNIT=NOUT,FMT='('' '')')
(  445) ENDIF
(  446) # 447 "sustaonl_mod.F90"
(  447) !     ------------------------------------------------------------------
(  448) # 449 "sustaonl_mod.F90"
(  449) END SUBROUTINE SUSTAONL
(  450) END MODULE SUSTAONL_MOD
