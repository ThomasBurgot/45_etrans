


NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: gath_grid_32_ctl_mod.F90

(    1) MODULE GATH_GRID_32_CTL_MOD
(    2) CONTAINS
(    3) SUBROUTINE GATH_GRID_32_CTL(PGPG,KFGATHG,KPROMA,KTO,PGP)
(    4) 
(    5) !**** *GATH_GRID_32_CTL* - Gather global gridpoint array from processors
(    6) 
(    7) !     Purpose.
(    8) !     --------
(    9) !        Routine for gathering gridpoint array
(   10) 
(   11) !**   Interface.
(   12) !     ----------
(   13) !     CALL GATH_GRID_32_CTL(...)
(   14) 
(   15) !     Explicit arguments : 
(   16) !     -------------------- 
(   17) !     PGPG(:,:)   - Global gridpoint array
(   18) !     KFGATHG     - Global number of fields to be gathered
(   19) !     KPROMA      - blocking factor for gridpoint input
(   20) !     KTO(:)      - Processor responsible for gathering each field
(   21) !     PGP(:,:,:)  - Local spectral array
(   22) !
(   23) !     ------------------------------------------------------------------
(   24) 
(   25) 
(   26) USE PARKIND1  ,ONLY : JPIM     ,JPRM
(   27) USE MPL_MODULE
(   28) 
(   29) USE TPM_GEN
(   30) USE TPM_DIM
(   31) USE TPM_GEOMETRY






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 2

(   32) USE TPM_DISTR
(   33) 
(   34) USE SET2PE_MOD
(   35) USE EQ_REGIONS_MOD
(   36) 
(   37) IMPLICIT NONE
(   38) 
(   39) ! Declaration of arguments
(   40) 
(   41) REAL(KIND=JPRM)    ,OPTIONAL, INTENT(OUT) :: PGPG(:,:)
(   42) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFGATHG
(   43) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KPROMA
(   44) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KTO(:)
(   45) REAL(KIND=JPRM)             , INTENT(IN)  :: PGP(:,:,:)
(   46) 
(   47) ! Declaration of local variables
(   48) 
(   49) REAL(KIND=JPRM)    :: ZFLD(D%NGPTOTMX*KFGATHG),ZDUM(D%NGPTOTMX)
(   50) REAL(KIND=JPRM),ALLOCATABLE :: ZBUF(:)
(   51) INTEGER(KIND=JPIM) :: IFLDR,JFLD,ITAG,ILEN,JA,JB,ISND,JGL,JLON,ILOFF,ILENB,IST
(   52) INTEGER(KIND=JPIM) :: IRCV,IOFF,ILAST,IGL1,IGL2,IGLOFF
(   53) INTEGER(KIND=JPIM) :: JKGLO,JROF,IEND,J,IBL,IPROC,JROC,IMYFIELDS,ILRECV
(   54) INTEGER(KIND=JPIM) :: ISENDREQ(NPROC),IOUNT,ITO
(   55) INTEGER(KIND=JPIM) :: ILENS(NPROC),IOFFS(NPROC),ILENR(NPROC),IOFFR(NPROC)
(   56) INTEGER(KIND=JPIM) :: IFLDL,IFLDS
(   57) LOGICAL :: LLSAME
(   58) !     ------------------------------------------------------------------
(   59) 
(   60) 
(   61) !GATHER SPECTRAL ARRAY
(   62) 
(   63) IF( NPROC == 1 ) THEN
(   64)   CALL GSTATS(1643,0)
(   65) !$OMP PARALLEL DO SCHEDULE(STATIC) PRIVATE(JKGLO,IEND,IOFF,IBL,JFLD,JROF)
(   66)   DO JKGLO=1,D%NGPTOT,KPROMA
(   67)     IEND = MIN(KPROMA,D%NGPTOT-JKGLO+1)
(   68)     IOFF = JKGLO-1
(   69)     IBL  = (JKGLO-1)/KPROMA+1
(   70)     DO JFLD=1,KFGATHG
(   71)       DO JROF=1,IEND
(   72)         PGPG(IOFF+JROF,JFLD) = PGP(JROF,JFLD,IBL)
(   73)       ENDDO
(   74)     ENDDO
(   75)   ENDDO
(   76) !$OMP END PARALLEL DO
(   77)   CALL GSTATS(1643,1)
(   78) 
(   79) ELSE
(   80) ! test if values in KTO are all the same
(   81)   LLSAME=.TRUE.
(   82)   ITO=KTO(1)
(   83)   DO JFLD=2,KFGATHG
(   84)     IF(KTO(JFLD) /= ITO) THEN
(   85)       LLSAME=.FALSE.
(   86)       EXIT
(   87)     ENDIF
(   88)   ENDDO
(   89)   IFLDL=D%NGPTOTMX






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 3

(   90)   IF(LLSAME) THEN
(   91)     CALL GSTATS(1643,0)
(   92)     !$OMP PARALLEL DO SCHEDULE(STATIC) PRIVATE(JKGLO,IEND,IOFF,IBL,JFLD,JROF)
(   93)     DO JFLD=1,KFGATHG
(   94)       DO JKGLO=1,D%NGPTOT,KPROMA
(   95)         IEND = MIN(KPROMA,D%NGPTOT-JKGLO+1)
(   96)         IOFF = JKGLO-1
(   97)         IBL  = (JKGLO-1)/KPROMA+1
(   98)         DO JROF=1,IEND
(   99)           ZFLD(IOFF+JROF+(JFLD-1)*IFLDL) = PGP(JROF,JFLD,IBL) 
(  100)         ENDDO
(  101)       ENDDO
(  102)     ENDDO
(  103)     !$OMP END PARALLEL DO
(  104)     CALL GSTATS(1643,1)
(  105)   ELSE
(  106)     ILENS(:)=0
(  107)     IOFFS(:)=0
(  108)     ILENR(:)=0
(  109)     IOFFR(:)=0
(  110)     DO JFLD=1,KFGATHG
(  111)       ILENS(KTO(JFLD))=ILENS(KTO(JFLD))+IFLDL
(  112)       IF(KTO(JFLD) == MYPROC) THEN
(  113)         ILENR(:)=ILENR(:)+IFLDL
(  114)       ENDIF
(  115)     ENDDO
(  116)     DO JROC=2,NPROC
(  117)       IOFFR(JROC)=IOFFR(JROC-1)+ ILENR(JROC-1)
(  118)       IOFFS(JROC)=IOFFS(JROC-1)+ ILENS(JROC-1)
(  119)     ENDDO
(  120)     IFLDS=0
(  121)     DO JROC=1,NPROC
(  122)       IF(ILENS(JROC) > 0) THEN
(  123)         DO JFLD=1,KFGATHG
(  124)           IF(KTO(JFLD) == JROC) THEN
(  125)             DO JKGLO=1,D%NGPTOT,KPROMA
(  126)               IEND = MIN(KPROMA,D%NGPTOT-JKGLO+1)
(  127)               IOFF = JKGLO-1
(  128)               IBL  = (JKGLO-1)/KPROMA+1
(  129)               DO JROF=1,IEND
(  130)                 ZFLD(IOFF+JROF+IFLDS*IFLDL) = PGP(JROF,JFLD,IBL) 
(  131)               ENDDO
(  132)             ENDDO
(  133)             IFLDS=IFLDS+1
(  134)           ENDIF
(  135)         ENDDO
(  136)       ENDIF
(  137)     ENDDO
(  138)   ENDIF
(  139)           
(  140)   IMYFIELDS = 0
(  141)   DO JFLD=1,KFGATHG
(  142)     IF(KTO(JFLD) == MYPROC) THEN
(  143)       IMYFIELDS = IMYFIELDS+1
(  144)     ENDIF
(  145)   ENDDO
(  146) 
(  147)   IF(IMYFIELDS > 0) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 4

(  148)     ALLOCATE(ZBUF(D%NGPTOTMX*IMYFIELDS*NPROC))
(  149)   ELSE
(  150)     ALLOCATE(ZBUF(1))
(  151)   ENDIF
(  152)   IFLDR = 0
(  153)   CALL GSTATS_BARRIER(789)
(  154)   CALL GSTATS(809,0)
(  155) 
(  156)   IF( LLSAME )THEN
(  157)     !Send
(  158)     ISND  = KTO(1)
(  159)     ITAG  = MTAGDISTSP+1+17
(  160)     CALL MPL_SEND(ZFLD,KDEST=NPRCIDS(ISND),KTAG=ITAG,&
(  161)      &KMP_TYPE=JP_NON_BLOCKING_STANDARD,KREQUEST=ISENDREQ(1),&
(  162)      &CDSTRING='GATH_GRID_32_CTL:')
(  163) 
(  164)     ! RECIEVE
(  165)     IF(KTO(1) == MYPROC) THEN
(  166)       IFLDR = KFGATHG
(  167)       DO JROC=1,NPROC
(  168)         ITAG  = MTAGDISTSP+1+17
(  169)         IRCV  = JROC
(  170)         IOFF=IFLDL*KFGATHG*(JROC-1)
(  171)         CALL MPL_RECV(ZBUF(IOFF+1:IOFF+IFLDL*KFGATHG),KSOURCE=NPRCIDS(IRCV),&
(  172)          &KMP_TYPE=JP_BLOCKING_STANDARD,KOUNT=ILRECV,&
(  173)          &KTAG=ITAG,CDSTRING='GATH_GRID_32_CTL:')
(  174)       ENDDO
(  175)     ENDIF
(  176)     CALL MPL_WAIT(KREQUEST=ISENDREQ(1), &
(  177)      & CDSTRING='GATH_GRID_32_CTL: WAIT')
(  178)   ELSE
(  179)     IFLDR=IMYFIELDS
(  180)     CALL MPL_ALLTOALLV(PSENDBUF=ZFLD,KSENDCOUNTS=ILENS,&
(  181)      & PRECVBUF=ZBUF,KRECVCOUNTS=ILENR,KSENDDISPL=IOFFS,KRECVDISPL=IOFFR,&
(  182)      & CDSTRING='GATH_GRID_32_CTL:')
(  183) !!$    ITAG  = MTAGDISTSP+1+17
(  184) !!$    DO JROC=1,NPROC
(  185) !!$      ISND=JROC
(  186) !!$      IOFF=IOFFS(JROC)
(  187) !!$      ILEN=ILENS(JROC)
(  188) !!$      IF(ILEN > 0 ) THEN
(  189) !!$        CALL MPL_SEND(ZFLD(IOFF+1:IOFF+ILEN),KDEST=NPRCIDS(ISND),KTAG=ITAG,&
(  190) !!$         &KMP_TYPE=JP_NON_BLOCKING_STANDARD,KREQUEST=ISENDREQ(ISND),&
(  191) !!$         &CDSTRING='GATH_GRID_32_CTL:')
(  192) !!$      ENDIF
(  193) !!$    ENDDO
(  194) !!$    DO JROC=1,NPROC
(  195) !!$      IRCV  = JROC
(  196) !!$      IOFF = IOFFR(JROC)
(  197) !!$      ILEN = ILENR(JROC)
(  198) !!$      IF(ILEN > 0 ) THEN
(  199) !!$        CALL MPL_RECV(ZBUF(IOFF+1:IOFF+ILEN),KSOURCE=NPRCIDS(IRCV),&
(  200) !!$         &KMP_TYPE=JP_BLOCKING_STANDARD,KOUNT=ILRECV,&
(  201) !!$         &KTAG=ITAG,CDSTRING='GATH_GRID_32_CTL:')
(  202) !!$      ENDIF
(  203) !!$    ENDDO
(  204) !!$    DO JROC=1,NPROC
(  205) !!$      ISND=JROC






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 5

(  206) !!$      ILEN=ILENS(JROC)
(  207) !!$      IF(ILEN > 0 ) THEN
(  208) !!$        CALL MPL_WAIT(KREQUEST=ISENDREQ(JROC), &
(  209) !!$         & CDSTRING='GATH_GRID_32_CTL: WAIT')
(  210) !!$      ENDIF
(  211) !!$    ENDDO
(  212)   ENDIF
(  213)   
(  214)   CALL GSTATS(809,1)
(  215)   CALL GSTATS_BARRIER2(789) 
(  216)   CALL GSTATS(1643,0)
(  217) !$OMP PARALLEL DO SCHEDULE(DYNAMIC,1)&
(  218) !$OMP&PRIVATE(JA,JB,IPROC,IGLOFF,IGL1,IGL2,IOFF,ILAST,J,&
(  219) !$OMP&ILEN,ILOFF,JGL,JLON,JFLD)
(  220)   DO JFLD=1,IFLDR
(  221)     DO JA=1,N_REGIONS_NS
(  222)       DO JB=1,N_REGIONS(JA)
(  223)         CALL SET2PE(IPROC,JA,JB,0,0)
(  224)         IGLOFF = D%NPTRFRSTLAT(JA)
(  225)         IGL1 = D%NFRSTLAT(JA)
(  226)         IGL2 = D%NLSTLAT(JA)
(  227)         IOFF = 0
(  228)         IF(JA > 1) THEN
(  229)           IF( D%NLSTLAT(JA-1) == D%NFRSTLAT(JA) )THEN
(  230)             ILAST = D%NLSTLAT(JA-1)-1
(  231)           ELSE
(  232)             ILAST = D%NLSTLAT(JA-1)
(  233)           ENDIF
(  234)           DO J=D%NFRSTLAT(1),ILAST
(  235)             IOFF = IOFF+G%NLOEN(J)
(  236)           ENDDO
(  237)         ENDIF
(  238) 
(  239)         ILEN = 0
(  240)         ILOFF = 0
(  241)         DO JGL=IGL1,IGL2
(  242)           DO JLON=1,D%NONL(IGLOFF+JGL-IGL1,JB)
(  243)             PGPG(IOFF+ILOFF+D%NSTA(IGLOFF+JGL-IGL1,JB)+JLON-1,JFLD) = &
(  244)              & ZBUF(ILEN+JLON+(JFLD-1)*IFLDL+(IPROC-1)*IFLDL*IMYFIELDS)
(  245)           ENDDO
(  246)           ILEN = ILEN + D%NONL(IGLOFF+JGL-IGL1,JB)
(  247)           ILOFF = ILOFF + G%NLOEN(JGL)
(  248)         ENDDO
(  249)       ENDDO
(  250)     ENDDO
(  251)   ENDDO
(  252) !$OMP END PARALLEL DO
(  253) 
(  254)   CALL GSTATS(1643,1)
(  255) ! Synhronize processors 
(  256) ! Should not be necessary
(  257) !!$  CALL GSTATS(784,0)
(  258) !!$  CALL MPL_BARRIER(CDSTRING='GATH_GRID_32_CTL:')
(  259) !!$  CALL GSTATS(784,1)
(  260)   IF(ALLOCATED(ZBUF)) DEALLOCATE(ZBUF)
(  261) ENDIF
(  262) 
(  263) !     ------------------------------------------------------------------






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 6

(  264) 
(  265) END SUBROUTINE GATH_GRID_32_CTL
(  266) END MODULE GATH_GRID_32_CTL_MOD
(  267) 
(  268) 



























































NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 7

(    1) # 1 "gath_grid_32_ctl_mod.F90"
(    1) MODULE GATH_GRID_32_CTL_MOD
(    2) CONTAINS
(    3) SUBROUTINE GATH_GRID_32_CTL(PGPG,KFGATHG,KPROMA,KTO,PGP)
(    4) # 5 "gath_grid_32_ctl_mod.F90"
(    5) !**** *GATH_GRID_32_CTL* - Gather global gridpoint array from processors
(    6) # 7 "gath_grid_32_ctl_mod.F90"
(    7) !     Purpose.
(    8) !     --------
(    9) !        Routine for gathering gridpoint array
(   10) # 11 "gath_grid_32_ctl_mod.F90"
(   11) !**   Interface.
(   12) !     ----------
(   13) !     CALL GATH_GRID_32_CTL(...)
(   14) # 15 "gath_grid_32_ctl_mod.F90"
(   15) !     Explicit arguments : 
(   16) !     -------------------- 
(   17) !     PGPG(:,:)   - Global gridpoint array
(   18) !     KFGATHG     - Global number of fields to be gathered
(   19) !     KPROMA      - blocking factor for gridpoint input
(   20) !     KTO(:)      - Processor responsible for gathering each field
(   21) !     PGP(:,:,:)  - Local spectral array
(   22) !
(   23) !     ------------------------------------------------------------------
(   24) # 26 "gath_grid_32_ctl_mod.F90"
(   26) USE PARKIND1  ,ONLY : JPIM     ,JPRM
(   27) USE MPL_MODULE
(   28) # 29 "gath_grid_32_ctl_mod.F90"
(   29) USE TPM_GEN
(   30) USE TPM_DIM
(   31) USE TPM_GEOMETRY
(   32) USE TPM_DISTR
(   33) # 34 "gath_grid_32_ctl_mod.F90"
(   34) USE SET2PE_MOD
(   35) USE EQ_REGIONS_MOD
(   36) # 37 "gath_grid_32_ctl_mod.F90"
(   37) IMPLICIT NONE
(   38) # 39 "gath_grid_32_ctl_mod.F90"
(   39) ! Declaration of arguments
(   40) # 41 "gath_grid_32_ctl_mod.F90"
(   41) REAL(KIND=JPRM)    ,OPTIONAL, INTENT(OUT) :: PGPG(:,:)
(   42) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFGATHG
(   43) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KPROMA
(   44) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KTO(:)
(   45) REAL(KIND=JPRM)             , INTENT(IN)  :: PGP(:,:,:)
(   46) # 47 "gath_grid_32_ctl_mod.F90"
(   47) ! Declaration of local variables
(   48) # 49 "gath_grid_32_ctl_mod.F90"
(   49) REAL(KIND=JPRM)    :: ZFLD(D%NGPTOTMX*KFGATHG),ZDUM(D%NGPTOTMX)
(   50) REAL(KIND=JPRM),ALLOCATABLE :: ZBUF(:)
(   51) INTEGER(KIND=JPIM) :: IFLDR,JFLD,ITAG,ILEN,JA,JB,ISND,JGL,JLON,ILOFF,ILENB,IST
(   52) INTEGER(KIND=JPIM) :: IRCV,IOFF,ILAST,IGL1,IGL2,IGLOFF
(   53) INTEGER(KIND=JPIM) :: JKGLO,JROF,IEND,J,IBL,IPROC,JROC,IMYFIELDS,ILRECV
(   54) INTEGER(KIND=JPIM) :: ISENDREQ(NPROC),IOUNT,ITO
(   55) INTEGER(KIND=JPIM) :: ILENS(NPROC),IOFFS(NPROC),ILENR(NPROC),IOFFR(NPROC)
(   56) INTEGER(KIND=JPIM) :: IFLDL,IFLDS
(   57) LOGICAL :: LLSAME
(   58) !     ------------------------------------------------------------------






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 8

(   59) # 61 "gath_grid_32_ctl_mod.F90"
(   61) !GATHER SPECTRAL ARRAY
(   62) # 63 "gath_grid_32_ctl_mod.F90"
(   63) IF( NPROC == 1 ) THEN
(   64)   CALL GSTATS(1643,0)
(   65) !$OMP PARALLEL DO SCHEDULE(STATIC) PRIVATE(JKGLO,IEND,IOFF,IBL,JFLD,JROF)
(   66)   DO JKGLO=1,D%NGPTOT,KPROMA
(   67)     IEND = MIN(KPROMA,D%NGPTOT-JKGLO+1)
(   68)     IOFF = JKGLO-1
(   69)     IBL  = (JKGLO-1)/KPROMA+1
(   70)     DO JFLD=1,KFGATHG
(   71)       DO JROF=1,IEND
(   72)         PGPG(IOFF+JROF,JFLD) = PGP(JROF,JFLD,IBL)
(   73)       ENDDO
(   74)     ENDDO
(   75)   ENDDO
(   76) !$OMP END PARALLEL DO
(   77)   CALL GSTATS(1643,1)
(   78) # 79 "gath_grid_32_ctl_mod.F90"
(   79) ELSE
(   80) ! test if values in KTO are all the same
(   81)   LLSAME=.TRUE.
(   82)   ITO=KTO(1)
(   83)   DO JFLD=2,KFGATHG
(   84)     IF(KTO(JFLD) /= ITO) THEN
(   85)       LLSAME=.FALSE.
(   86)       EXIT
(   87)     ENDIF
(   88)   ENDDO
(   89)   IFLDL=D%NGPTOTMX
(   90)   IF(LLSAME) THEN
(   91)     CALL GSTATS(1643,0)
(   92)     !$OMP PARALLEL DO SCHEDULE(STATIC) PRIVATE(JKGLO,IEND,IOFF,IBL,JFLD,JROF)
(   93)     DO JFLD=1,KFGATHG
(   94)       DO JKGLO=1,D%NGPTOT,KPROMA
(   95)         IEND = MIN(KPROMA,D%NGPTOT-JKGLO+1)
(   96)         IOFF = JKGLO-1
(   97)         IBL  = (JKGLO-1)/KPROMA+1
(   98)         DO JROF=1,IEND
(   99)           ZFLD(IOFF+JROF+(JFLD-1)*IFLDL) = PGP(JROF,JFLD,IBL) 
(  100)         ENDDO
(  101)       ENDDO
(  102)     ENDDO
(  103)     !$OMP END PARALLEL DO
(  104)     CALL GSTATS(1643,1)
(  105)   ELSE
(  106)     ILENS(:)=0
(  107)     IOFFS(:)=0
(  108)     ILENR(:)=0
(  109)     IOFFR(:)=0
(  110)     DO JFLD=1,KFGATHG
(  111)       ILENS(KTO(JFLD))=ILENS(KTO(JFLD))+IFLDL
(  112)       IF(KTO(JFLD) == MYPROC) THEN
(  113)         ILENR(:)=ILENR(:)+IFLDL
(  114)       ENDIF
(  115)     ENDDO
(  116)     DO JROC=2,NPROC
(  117)       IOFFR(JROC)=IOFFR(JROC-1)+ ILENR(JROC-1)






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 9

(  118)       IOFFS(JROC)=IOFFS(JROC-1)+ ILENS(JROC-1)
(  119)     ENDDO
(  120)     IFLDS=0
(  121)     DO JROC=1,NPROC
(  122)       IF(ILENS(JROC) > 0) THEN
(  123)         DO JFLD=1,KFGATHG
(  124)           IF(KTO(JFLD) == JROC) THEN
(  125)             DO JKGLO=1,D%NGPTOT,KPROMA
(  126)               IEND = MIN(KPROMA,D%NGPTOT-JKGLO+1)
(  127)               IOFF = JKGLO-1
(  128)               IBL  = (JKGLO-1)/KPROMA+1
(  129)               DO JROF=1,IEND
(  130)                 ZFLD(IOFF+JROF+IFLDS*IFLDL) = PGP(JROF,JFLD,IBL) 
(  131)               ENDDO
(  132)             ENDDO
(  133)             IFLDS=IFLDS+1
(  134)           ENDIF
(  135)         ENDDO
(  136)       ENDIF
(  137)     ENDDO
(  138)   ENDIF
(  139)           
(  140)   IMYFIELDS = 0
(  141)   DO JFLD=1,KFGATHG
(  142)     IF(KTO(JFLD) == MYPROC) THEN
(  143)       IMYFIELDS = IMYFIELDS+1
(  144)     ENDIF
(  145)   ENDDO
(  146) # 147 "gath_grid_32_ctl_mod.F90"
(  147)   IF(IMYFIELDS > 0) THEN
(  148)     ALLOCATE(ZBUF(D%NGPTOTMX*IMYFIELDS*NPROC))
(  149)   ELSE
(  150)     ALLOCATE(ZBUF(1))
(  151)   ENDIF
(  152)   IFLDR = 0
(  153)   CALL GSTATS_BARRIER(789)
(  154)   CALL GSTATS(809,0)
(  155) # 156 "gath_grid_32_ctl_mod.F90"
(  156)   IF( LLSAME )THEN
(  157)     !Send
(  158)     ISND  = KTO(1)
(  159)     ITAG  = MTAGDISTSP+1+17
(  160)     CALL MPL_SEND(ZFLD,KDEST=NPRCIDS(ISND),KTAG=ITAG,&
(  161)      &KMP_TYPE=JP_NON_BLOCKING_STANDARD,KREQUEST=ISENDREQ(1),&
(  162)      &CDSTRING='GATH_GRID_32_CTL:')
(  163) # 164 "gath_grid_32_ctl_mod.F90"
(  164)     ! RECIEVE
(  165)     IF(KTO(1) == MYPROC) THEN
(  166)       IFLDR = KFGATHG
(  167)       DO JROC=1,NPROC
(  168)         ITAG  = MTAGDISTSP+1+17
(  169)         IRCV  = JROC
(  170)         IOFF=IFLDL*KFGATHG*(JROC-1)
(  171)         CALL MPL_RECV(ZBUF(IOFF+1:IOFF+IFLDL*KFGATHG),KSOURCE=NPRCIDS(IRCV),&
(  172)          &KMP_TYPE=JP_BLOCKING_STANDARD,KOUNT=ILRECV,&
(  173)          &KTAG=ITAG,CDSTRING='GATH_GRID_32_CTL:')
(  174)       ENDDO
(  175)     ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 10

(  176)     CALL MPL_WAIT(KREQUEST=ISENDREQ(1), &
(  177)      & CDSTRING='GATH_GRID_32_CTL: WAIT')
(  178)   ELSE
(  179)     IFLDR=IMYFIELDS
(  180)     CALL MPL_ALLTOALLV(PSENDBUF=ZFLD,KSENDCOUNTS=ILENS,&
(  181)      & PRECVBUF=ZBUF,KRECVCOUNTS=ILENR,KSENDDISPL=IOFFS,KRECVDISPL=IOFFR,&
(  182)      & CDSTRING='GATH_GRID_32_CTL:')
(  183) !!$    ITAG  = MTAGDISTSP+1+17
(  184) !!$    DO JROC=1,NPROC
(  185) !!$      ISND=JROC
(  186) !!$      IOFF=IOFFS(JROC)
(  187) !!$      ILEN=ILENS(JROC)
(  188) !!$      IF(ILEN > 0 ) THEN
(  189) !!$        CALL MPL_SEND(ZFLD(IOFF+1:IOFF+ILEN),KDEST=NPRCIDS(ISND),KTAG=ITAG,&
(  190) !!$         &KMP_TYPE=JP_NON_BLOCKING_STANDARD,KREQUEST=ISENDREQ(ISND),&
(  191) !!$         &CDSTRING='GATH_GRID_32_CTL:')
(  192) !!$      ENDIF
(  193) !!$    ENDDO
(  194) !!$    DO JROC=1,NPROC
(  195) !!$      IRCV  = JROC
(  196) !!$      IOFF = IOFFR(JROC)
(  197) !!$      ILEN = ILENR(JROC)
(  198) !!$      IF(ILEN > 0 ) THEN
(  199) !!$        CALL MPL_RECV(ZBUF(IOFF+1:IOFF+ILEN),KSOURCE=NPRCIDS(IRCV),&
(  200) !!$         &KMP_TYPE=JP_BLOCKING_STANDARD,KOUNT=ILRECV,&
(  201) !!$         &KTAG=ITAG,CDSTRING='GATH_GRID_32_CTL:')
(  202) !!$      ENDIF
(  203) !!$    ENDDO
(  204) !!$    DO JROC=1,NPROC
(  205) !!$      ISND=JROC
(  206) !!$      ILEN=ILENS(JROC)
(  207) !!$      IF(ILEN > 0 ) THEN
(  208) !!$        CALL MPL_WAIT(KREQUEST=ISENDREQ(JROC), &
(  209) !!$         & CDSTRING='GATH_GRID_32_CTL: WAIT')
(  210) !!$      ENDIF
(  211) !!$    ENDDO
(  212)   ENDIF
(  213)   
(  214)   CALL GSTATS(809,1)
(  215)   CALL GSTATS_BARRIER2(789) 
(  216)   CALL GSTATS(1643,0)
(  217) !$OMP PARALLEL DO SCHEDULE(DYNAMIC,1)&
(  218) !$OMP&PRIVATE(JA,JB,IPROC,IGLOFF,IGL1,IGL2,IOFF,ILAST,J,&
(  219) !$OMP&ILEN,ILOFF,JGL,JLON,JFLD)
(  220)   DO JFLD=1,IFLDR
(  221)     DO JA=1,N_REGIONS_NS
(  222)       DO JB=1,N_REGIONS(JA)
(  223)         CALL SET2PE(IPROC,JA,JB,0,0)
(  224)         IGLOFF = D%NPTRFRSTLAT(JA)
(  225)         IGL1 = D%NFRSTLAT(JA)
(  226)         IGL2 = D%NLSTLAT(JA)
(  227)         IOFF = 0
(  228)         IF(JA > 1) THEN
(  229)           IF( D%NLSTLAT(JA-1) == D%NFRSTLAT(JA) )THEN
(  230)             ILAST = D%NLSTLAT(JA-1)-1
(  231)           ELSE
(  232)             ILAST = D%NLSTLAT(JA-1)
(  233)           ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:30:03      page 11

(  234)           DO J=D%NFRSTLAT(1),ILAST
(  235)             IOFF = IOFF+G%NLOEN(J)
(  236)           ENDDO
(  237)         ENDIF
(  238) # 239 "gath_grid_32_ctl_mod.F90"
(  239)         ILEN = 0
(  240)         ILOFF = 0
(  241)         DO JGL=IGL1,IGL2
(  242)           DO JLON=1,D%NONL(IGLOFF+JGL-IGL1,JB)
(  243)             PGPG(IOFF+ILOFF+D%NSTA(IGLOFF+JGL-IGL1,JB)+JLON-1,JFLD) = &
(  244)              & ZBUF(ILEN+JLON+(JFLD-1)*IFLDL+(IPROC-1)*IFLDL*IMYFIELDS)
(  245)           ENDDO
(  246)           ILEN = ILEN + D%NONL(IGLOFF+JGL-IGL1,JB)
(  247)           ILOFF = ILOFF + G%NLOEN(JGL)
(  248)         ENDDO
(  249)       ENDDO
(  250)     ENDDO
(  251)   ENDDO
(  252) !$OMP END PARALLEL DO
(  253) # 254 "gath_grid_32_ctl_mod.F90"
(  254)   CALL GSTATS(1643,1)
(  255) ! Synhronize processors 
(  256) ! Should not be necessary
(  257) !!$  CALL GSTATS(784,0)
(  258) !!$  CALL MPL_BARRIER(CDSTRING='GATH_GRID_32_CTL:')
(  259) !!$  CALL GSTATS(784,1)
(  260)   IF(ALLOCATED(ZBUF)) DEALLOCATE(ZBUF)
(  261) ENDIF
(  262) # 263 "gath_grid_32_ctl_mod.F90"
(  263) !     ------------------------------------------------------------------
(  264) # 265 "gath_grid_32_ctl_mod.F90"
(  265) END SUBROUTINE GATH_GRID_32_CTL
(  266) END MODULE GATH_GRID_32_CTL_MOD
