


NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: inv_trans_ctl_mod.F90

(    1) MODULE INV_TRANS_CTL_MOD
(    2) CONTAINS
(    3) SUBROUTINE INV_TRANS_CTL(KF_UV_G,KF_SCALARS_G,KF_GP,KF_FS,KF_OUT_LT,&
(    4)  & KF_UV,KF_SCALARS,KF_SCDERS,&
(    5)  & PSPVOR,PSPDIV,PSPSCALAR,KVSETUV,KVSETSC,PGP,FSPGL_PROC,&
(    6)  & PSPSC3A,PSPSC3B,PSPSC2,KVSETSC3A,KVSETSC3B,KVSETSC2,PGPUV,PGP3A,PGP3B,PGP2)
(    7) 
(    8) !**** *INV_TRANS_CTL* - Control routine for inverse spectral transform.
(    9) 
(   10) !     Purpose.
(   11) !     --------
(   12) !        Control routine for the inverse spectral transform
(   13) 
(   14) !**   Interface.
(   15) !     ----------
(   16) !     CALL INV_TRANS_CTL(...)
(   17) 
(   18) !     Explicit arguments :
(   19) !     --------------------
(   20) !     KF_UV_G      - global number of spectral u-v fields
(   21) !     KF_SCALARS_G - global number of scalar spectral fields
(   22) !     KF_GP        - total number of output gridpoint fields
(   23) !     KF_FS        - total number of fields in fourier space
(   24) !     KF_OUT_LT    - total number of fields coming out from inverse LT
(   25) !     KF_UV        - local number of spectral u-v fields
(   26) !     KF_SCALARS   - local number of scalar spectral fields
(   27) !     KF_SCDERS    - local number of derivatives of scalar spectral fields
(   28) !     PSPVOR(:,:)  - spectral vorticity (input)
(   29) !     PSPDIV(:,:)  - spectral divergence (input)
(   30) !     PSPSCALAR(:,:) - spectral scalarvalued fields (input)
(   31) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a
(   32) !                   vor/div field. Equivalant to NBSETLEV in the IFS.
(   33) !                   The length of KVSETUV should be the GLOBAL number






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 2

(   34) !                   of u/v fields which is the dimension of u and v releated
(   35) !                   fields in grid-point space.
(   36) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   37) !                   scalar field. As for KVSETUV this argument is required
(   38) !                   if the total number of processors is greater than
(   39) !                   the number of processors used for distribution in
(   40) !                   spectral wave space.
(   41) !     FSPGL_PROC  - external procedure to be executed in fourier space
(   42) !                   before transposition
(   43) !     PGP(:,:,:)  - gridpoint fields (output)
(   44) 
(   45) !                  The ordering of the output fields is as follows (all
(   46) !                  parts are optional depending on the input switches):
(   47) 
(   48) !       vorticity     : KF_UV_G fields
(   49) !       divergence    : KF_UV_G fields
(   50) !       u             : KF_UV_G fields
(   51) !       v             : KF_UV_G fields
(   52) !       scalar fields : KF_SCALARS_G fields
(   53) !       N-S derivative of scalar fields : KF_SCALARS_G fields
(   54) !       E-W derivative of u : KF_UV_G fields
(   55) !       E-W derivative of v : KF_UV_G fields
(   56) !       E-W derivative of scalar fields : KF_SCALARS_G fields
(   57) 
(   58) !     Method.
(   59) !     -------
(   60) 
(   61) !     Externals.  SHUFFLE     - reshuffle fields for load balancing
(   62) !     ----------  FIELD_SPLIT - split fields in NPROMATR packets
(   63) !                 LTINV_CTL   - control of Legendre transform
(   64) !                 FTINV_CTL   - control of Fourier transform
(   65) 
(   66) !     Author.
(   67) !     -------
(   68) !        Mats Hamrud *ECMWF*
(   69) 
(   70) !     Modifications.
(   71) !     --------------
(   72) !        Original : 01-01-03
(   73) 
(   74) !     ------------------------------------------------------------------
(   75) 
(   76) 
(   77) USE PARKIND1  ,ONLY : JPIM     ,JPRBT ,JPRB , jprd, jprm
(   78) 
(   79) USE TPM_GEN         ,ONLY : NPROMATR
(   80) USE TPM_TRANS       ,ONLY : LDIVGP, LSCDERS, LUVDER, LVORGP
(   81) !USE TPM_DISTR
(   82) 
(   83) USE SHUFFLE_MOD     ,ONLY : SHUFFLE
(   84) USE FIELD_SPLIT_MOD ,ONLY : FIELD_SPLIT
(   85) USE LTINV_CTL_MOD   ,ONLY : LTINV_CTL
(   86) USE FTINV_CTL_MOD   ,ONLY : FTINV_CTL
(   87) !
(   88) 
(   89) IMPLICIT NONE
(   90) 
(   91) ! Declaration of arguments






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 3

(   92) 
(   93) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV_G
(   94) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS_G
(   95) INTEGER(KIND=JPIM), INTENT(IN) :: KF_GP
(   96) INTEGER(KIND=JPIM), INTENT(IN) :: KF_FS
(   97) INTEGER(KIND=JPIM), INTENT(IN) :: KF_OUT_LT
(   98) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV
(   99) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS
(  100) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCDERS
(  101) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPVOR(:,:)
(  102) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPDIV(:,:)
(  103) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSCALAR(:,:)
(  104) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3A(:,:,:)
(  105) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3B(:,:,:)
(  106) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC2(:,:)
(  107) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETUV(:)
(  108) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC(:)
(  109) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3A(:)
(  110) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3B(:)
(  111) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC2(:)
(  112) REAL(KIND=JPRB) ,OPTIONAL   ,INTENT(OUT) :: PGP(:,:,:)
(  113) EXTERNAL  FSPGL_PROC
(  114) OPTIONAL  FSPGL_PROC
(  115) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGPUV(:,:,:,:)
(  116) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3A(:,:,:,:)
(  117) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3B(:,:,:,:)
(  118) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP2(:,:,:)
(  119) 
(  120) ! Local variables
(  121) 
(  122) INTEGER(KIND=JPIM) :: IPTRGP(KF_GP),IPTRSPUV(NPROMATR),IPTRSPSC(NPROMATR)
(  123) INTEGER(KIND=JPIM) :: ISHFUV_G(KF_GP),ISHFSC_G(KF_GP)
(  124) INTEGER(KIND=JPIM) :: IVSETUV(KF_GP),IVSETSC(KF_GP)
(  125) INTEGER(KIND=JPIM) :: IBLKS,JBLK,ISTUV_G,IENUV_G
(  126) INTEGER(KIND=JPIM) :: IF_UV_G,IF_UV,ISTUV,IF_SCALARS,IF_SCALARS_G,IF_FS,IF_GP
(  127) INTEGER(KIND=JPIM) :: JFLD,ISTSC_G,IENSC_G,ISTSC,IENSC,IENUV,IF_SCDERS,IF_OUT_LT
(  128) INTEGER(KIND=JPIM) :: IOFFD,IOFFU,IOFFV,IOFFUVD,IOFFSC,IOFFSCNS,IOFFSCEW,IOFF,IF_GPB
(  129) 
(  130) !     ------------------------------------------------------------------
(  131) 
(  132) ! Perform transform
(  133) 
(  134) print *,'inv_trans_ctl: precision: jprm=',jprm,' JPRBT=',JPRBT,' jprd=',jprd
(  135) 
(  136) IF_GPB = 2*KF_UV_G+KF_SCALARS_G
(  137) IF(NPROMATR > 0 .AND. IF_GPB > NPROMATR) THEN
(  138) 
(  139)   ! Fields to be split into packets
(  140) 
(  141)   CALL SHUFFLE(KF_UV_G,KF_SCALARS_G,ISHFUV_G,IVSETUV,ISHFSC_G,IVSETSC,&
(  142)  & KVSETUV,KVSETSC)
(  143) 
(  144)   IBLKS=(IF_GPB-1)/NPROMATR+1
(  145) 
(  146)   DO JBLK=1,IBLKS
(  147)   
(  148)     CALL FIELD_SPLIT(JBLK,IF_GPB,KF_UV_G,IVSETUV,IVSETSC,&
(  149)      & ISTUV_G,IENUV_G,IF_UV_G,ISTSC_G,IENSC_G,IF_SCALARS_G,&






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 4

(  150)      & ISTUV,IENUV,IF_UV,ISTSC,IENSC,IF_SCALARS)
(  151) 
(  152)     IF(LSCDERS) THEN
(  153)       IF_SCDERS = IF_SCALARS
(  154)     ELSE
(  155)       IF_SCDERS = 0
(  156)     ENDIF
(  157)         
(  158)     IF_OUT_LT = 2*IF_UV + IF_SCALARS+IF_SCDERS
(  159)     IF(LVORGP) THEN
(  160)       IF_OUT_LT = IF_OUT_LT+IF_UV
(  161)     ENDIF
(  162)     IF(LDIVGP) THEN
(  163)       IF_OUT_LT = IF_OUT_LT+IF_UV
(  164)     ENDIF
(  165)     IF_FS = IF_OUT_LT+IF_SCDERS
(  166)     IF(LUVDER) THEN
(  167)       IF_FS = IF_FS+2*IF_UV
(  168)     ENDIF
(  169) 
(  170)     IF_GP = 2*IF_UV_G+IF_SCALARS_G
(  171)     IOFFD = 0
(  172)     IOFFU = 0
(  173)     IOFFV = KF_UV_G
(  174)     IOFFUVD = 2*KF_UV_G+KF_SCALARS_G
(  175)     IOFFSC = 2*KF_UV_G
(  176)     IF(LVORGP) THEN
(  177)       IF_GP = IF_GP+IF_UV_G
(  178)       IOFFD = KF_UV_G
(  179)       IOFFU = IOFFU+KF_UV_G
(  180)       IOFFV = IOFFV+KF_UV_G
(  181)       IOFFUVD =IOFFUVD+KF_UV_G
(  182)       IOFFSC = IOFFSC+KF_UV_G
(  183)     ENDIF
(  184)     IF(LDIVGP) THEN
(  185)       IF_GP = IF_GP+IF_UV_G
(  186)       IOFFU = IOFFU+KF_UV_G
(  187)       IOFFV = IOFFV+KF_UV_G
(  188)       IOFFUVD =IOFFUVD+KF_UV_G
(  189)       IOFFSC = IOFFSC+KF_UV_G
(  190)     ENDIF
(  191)     IF(LSCDERS) THEN
(  192)       IF_GP  = IF_GP+2*IF_SCALARS_G
(  193)       IOFFUVD =IOFFUVD+KF_SCALARS_G
(  194)       IOFFSCNS = IOFFSC+KF_SCALARS_G
(  195)       IOFFSCEW = IOFFSC+2*KF_SCALARS_G
(  196)     ENDIF
(  197)     IF(LUVDER) THEN
(  198)       IF_GP = IF_GP+2*IF_UV_G
(  199)       IOFFSCEW = IOFFSCEW+2*KF_UV_G
(  200)     ENDIF
(  201) 
(  202)     DO JFLD=1,IF_UV_G
(  203)       IOFF = 0
(  204)       IF(LVORGP) THEN
(  205)         IPTRGP(JFLD+IOFF) = ISHFUV_G(ISTUV_G+JFLD-1)
(  206)         IOFF = IOFF+IF_UV_G
(  207)       ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 5

(  208)       IF(LDIVGP) THEN
(  209)         IPTRGP(JFLD+IOFF) = IOFFD+ISHFUV_G(ISTUV_G+JFLD-1)
(  210)         IOFF = IOFF+IF_UV_G
(  211)       ENDIF
(  212)       IPTRGP(JFLD+IOFF) = IOFFU+ISHFUV_G(ISTUV_G+JFLD-1)
(  213)       IOFF = IOFF+IF_UV_G
(  214)       IPTRGP(JFLD+IOFF) = IOFFV+ISHFUV_G(ISTUV_G+JFLD-1)
(  215)       IOFF = IOFF+IF_UV_G+IF_SCALARS_G
(  216)       IF(LSCDERS) THEN
(  217)         IOFF  = IOFF+IF_SCALARS_G
(  218)       ENDIF
(  219)       IF(LUVDER) THEN
(  220)         IPTRGP(JFLD+IOFF) = IOFFUVD+ISHFUV_G(ISTUV_G+JFLD-1)
(  221)         IOFF = IOFF+IF_UV_G
(  222)         IPTRGP(JFLD+IOFF) = IOFFUVD+KF_UV_G+ISHFUV_G(ISTUV_G+JFLD-1)
(  223)       ENDIF
(  224)     ENDDO
(  225) 
(  226)     DO JFLD=1,IF_SCALARS_G
(  227)       IOFF = 2*IF_UV_G
(  228)       IF (LVORGP) IOFF = IOFF+IF_UV_G
(  229)       IF (LDIVGP) IOFF = IOFF+IF_UV_G
(  230)       IPTRGP(JFLD+IOFF) = IOFFSC+ISHFSC_G(ISTSC_G+JFLD-1)
(  231)       IOFF = IOFF+IF_SCALARS_G
(  232)       IF(LSCDERS) THEN
(  233)         IPTRGP(JFLD+IOFF) = IOFFSCNS+ISHFSC_G(ISTSC_G+JFLD-1)
(  234)         IOFF  = IOFF+IF_SCALARS_G
(  235)         IF(LUVDER) THEN
(  236)           IOFF  = IOFF+2*IF_UV_G
(  237)         ENDIF
(  238)         IPTRGP(JFLD+IOFF) = IOFFSCEW+ISHFSC_G(ISTSC_G+JFLD-1)
(  239)       ENDIF
(  240)     ENDDO
(  241)     DO JFLD=1,IF_UV
(  242)       IPTRSPUV(JFLD) = ISTUV+JFLD-1
(  243)     ENDDO
(  244)     DO JFLD=1,IF_SCALARS
(  245)       IPTRSPSC(JFLD) = ISTSC+JFLD-1
(  246)     ENDDO
(  247) 
(  248)     CALL LTINV_CTL(IF_OUT_LT,IF_UV,IF_SCALARS,IF_SCDERS, &
(  249)      & PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  250)      & KFLDPTRUV=IPTRSPUV,KFLDPTRSC=IPTRSPSC,FSPGL_PROC=FSPGL_PROC)
(  251) 
(  252)     IF(IF_UV_G > 0 .AND. IF_SCALARS_G > 0) THEN
(  253)       CALL FTINV_CTL(IF_UV_G,IF_SCALARS_G,&
(  254)        & IF_UV,IF_SCALARS,IF_SCDERS,IF_GP,IF_FS,IF_OUT_LT,&
(  255)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),&
(  256)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,&
(  257)        & PGP=PGP)
(  258)     ELSEIF(IF_UV_G > 0) THEN
(  259)       CALL FTINV_CTL(IF_UV_G,IF_SCALARS_G,&
(  260)        & IF_UV,IF_SCALARS,IF_SCDERS,IF_GP,IF_FS,IF_OUT_LT,&
(  261)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),KPTRGP=IPTRGP,&
(  262)        & PGP=PGP)
(  263)     ELSEIF(IF_SCALARS_G > 0) THEN
(  264)       CALL FTINV_CTL(IF_UV_G,IF_SCALARS_G,&
(  265)        & IF_UV,IF_SCALARS,IF_SCDERS,IF_GP,IF_FS,IF_OUT_LT,&






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 6

(  266)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,&
(  267)        & PGP=PGP)
(  268)     ENDIF
(  269)   ENDDO
(  270) 
(  271) ELSE
(  272) 
(  273)   ! No splitting of fields, transform done in one go
(  274)   CALL LTINV_CTL(KF_OUT_LT,KF_UV,KF_SCALARS,KF_SCDERS, &
(  275)    &PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  276)    &PSPSC3A=PSPSC3A,PSPSC3B=PSPSC3B,PSPSC2=PSPSC2,&
(  277)    &FSPGL_PROC=FSPGL_PROC)
(  278) 
(  279)   CALL FTINV_CTL(KF_UV_G,KF_SCALARS_G,&
(  280)    & KF_UV,KF_SCALARS,KF_SCDERS,KF_GP,KF_FS,KF_OUT_LT,&
(  281)    & KVSETUV=KVSETUV,KVSETSC=KVSETSC,&
(  282)    & KVSETSC3A=KVSETSC3A,KVSETSC3B=KVSETSC3B,KVSETSC2=KVSETSC2,&
(  283)    & PGP=PGP,PGPUV=PGPUV,PGP3A=PGP3A,PGP3B=PGP3B,PGP2=PGP2)
(  284) 
(  285) ENDIF
(  286) 
(  287) !     ------------------------------------------------------------------
(  288) 
(  289) END SUBROUTINE INV_TRANS_CTL
(  290) END MODULE INV_TRANS_CTL_MOD







































NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 7

(    1) # 1 "inv_trans_ctl_mod.F90"
(    1) MODULE INV_TRANS_CTL_MOD
(    2) CONTAINS
(    3) SUBROUTINE INV_TRANS_CTL(KF_UV_G,KF_SCALARS_G,KF_GP,KF_FS,KF_OUT_LT,&
(    4)  & KF_UV,KF_SCALARS,KF_SCDERS,&
(    5)  & PSPVOR,PSPDIV,PSPSCALAR,KVSETUV,KVSETSC,PGP,FSPGL_PROC,&
(    6)  & PSPSC3A,PSPSC3B,PSPSC2,KVSETSC3A,KVSETSC3B,KVSETSC2,PGPUV,PGP3A,PGP3B,PGP2)
(    7) # 8 "inv_trans_ctl_mod.F90"
(    8) !**** *INV_TRANS_CTL* - Control routine for inverse spectral transform.
(    9) # 10 "inv_trans_ctl_mod.F90"
(   10) !     Purpose.
(   11) !     --------
(   12) !        Control routine for the inverse spectral transform
(   13) # 14 "inv_trans_ctl_mod.F90"
(   14) !**   Interface.
(   15) !     ----------
(   16) !     CALL INV_TRANS_CTL(...)
(   17) # 18 "inv_trans_ctl_mod.F90"
(   18) !     Explicit arguments :
(   19) !     --------------------
(   20) !     KF_UV_G      - global number of spectral u-v fields
(   21) !     KF_SCALARS_G - global number of scalar spectral fields
(   22) !     KF_GP        - total number of output gridpoint fields
(   23) !     KF_FS        - total number of fields in fourier space
(   24) !     KF_OUT_LT    - total number of fields coming out from inverse LT
(   25) !     KF_UV        - local number of spectral u-v fields
(   26) !     KF_SCALARS   - local number of scalar spectral fields
(   27) !     KF_SCDERS    - local number of derivatives of scalar spectral fields
(   28) !     PSPVOR(:,:)  - spectral vorticity (input)
(   29) !     PSPDIV(:,:)  - spectral divergence (input)
(   30) !     PSPSCALAR(:,:) - spectral scalarvalued fields (input)
(   31) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a
(   32) !                   vor/div field. Equivalant to NBSETLEV in the IFS.
(   33) !                   The length of KVSETUV should be the GLOBAL number
(   34) !                   of u/v fields which is the dimension of u and v releated
(   35) !                   fields in grid-point space.
(   36) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   37) !                   scalar field. As for KVSETUV this argument is required
(   38) !                   if the total number of processors is greater than
(   39) !                   the number of processors used for distribution in
(   40) !                   spectral wave space.
(   41) !     FSPGL_PROC  - external procedure to be executed in fourier space
(   42) !                   before transposition
(   43) !     PGP(:,:,:)  - gridpoint fields (output)
(   44) # 45 "inv_trans_ctl_mod.F90"
(   45) !                  The ordering of the output fields is as follows (all
(   46) !                  parts are optional depending on the input switches):
(   47) # 48 "inv_trans_ctl_mod.F90"
(   48) !       vorticity     : KF_UV_G fields
(   49) !       divergence    : KF_UV_G fields
(   50) !       u             : KF_UV_G fields
(   51) !       v             : KF_UV_G fields
(   52) !       scalar fields : KF_SCALARS_G fields
(   53) !       N-S derivative of scalar fields : KF_SCALARS_G fields
(   54) !       E-W derivative of u : KF_UV_G fields
(   55) !       E-W derivative of v : KF_UV_G fields
(   56) !       E-W derivative of scalar fields : KF_SCALARS_G fields
(   57) # 58 "inv_trans_ctl_mod.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 8

(   58) !     Method.
(   59) !     -------
(   60) # 61 "inv_trans_ctl_mod.F90"
(   61) !     Externals.  SHUFFLE     - reshuffle fields for load balancing
(   62) !     ----------  FIELD_SPLIT - split fields in NPROMATR packets
(   63) !                 LTINV_CTL   - control of Legendre transform
(   64) !                 FTINV_CTL   - control of Fourier transform
(   65) # 66 "inv_trans_ctl_mod.F90"
(   66) !     Author.
(   67) !     -------
(   68) !        Mats Hamrud *ECMWF*
(   69) # 70 "inv_trans_ctl_mod.F90"
(   70) !     Modifications.
(   71) !     --------------
(   72) !        Original : 01-01-03
(   73) # 74 "inv_trans_ctl_mod.F90"
(   74) !     ------------------------------------------------------------------
(   75) # 77 "inv_trans_ctl_mod.F90"
(   77) USE PARKIND1  ,ONLY : JPIM     ,JPRBT ,JPRB , jprd, jprm
(   78) # 79 "inv_trans_ctl_mod.F90"
(   79) USE TPM_GEN         ,ONLY : NPROMATR
(   80) USE TPM_TRANS       ,ONLY : LDIVGP, LSCDERS, LUVDER, LVORGP
(   81) !USE TPM_DISTR
(   82) # 83 "inv_trans_ctl_mod.F90"
(   83) USE SHUFFLE_MOD     ,ONLY : SHUFFLE
(   84) USE FIELD_SPLIT_MOD ,ONLY : FIELD_SPLIT
(   85) USE LTINV_CTL_MOD   ,ONLY : LTINV_CTL
(   86) USE FTINV_CTL_MOD   ,ONLY : FTINV_CTL
(   87) !
(   88) # 89 "inv_trans_ctl_mod.F90"
(   89) IMPLICIT NONE
(   90) # 91 "inv_trans_ctl_mod.F90"
(   91) ! Declaration of arguments
(   92) # 93 "inv_trans_ctl_mod.F90"
(   93) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV_G
(   94) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS_G
(   95) INTEGER(KIND=JPIM), INTENT(IN) :: KF_GP
(   96) INTEGER(KIND=JPIM), INTENT(IN) :: KF_FS
(   97) INTEGER(KIND=JPIM), INTENT(IN) :: KF_OUT_LT
(   98) INTEGER(KIND=JPIM), INTENT(IN) :: KF_UV
(   99) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCALARS
(  100) INTEGER(KIND=JPIM), INTENT(IN) :: KF_SCDERS
(  101) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPVOR(:,:)
(  102) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPDIV(:,:)
(  103) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSCALAR(:,:)
(  104) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3A(:,:,:)
(  105) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3B(:,:,:)
(  106) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC2(:,:)
(  107) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETUV(:)
(  108) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC(:)
(  109) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3A(:)
(  110) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3B(:)
(  111) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC2(:)
(  112) REAL(KIND=JPRB) ,OPTIONAL   ,INTENT(OUT) :: PGP(:,:,:)
(  113) EXTERNAL  FSPGL_PROC
(  114) OPTIONAL  FSPGL_PROC
(  115) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGPUV(:,:,:,:)
(  116) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3A(:,:,:,:)






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 9

(  117) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3B(:,:,:,:)
(  118) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP2(:,:,:)
(  119) # 120 "inv_trans_ctl_mod.F90"
(  120) ! Local variables
(  121) # 122 "inv_trans_ctl_mod.F90"
(  122) INTEGER(KIND=JPIM) :: IPTRGP(KF_GP),IPTRSPUV(NPROMATR),IPTRSPSC(NPROMATR)
(  123) INTEGER(KIND=JPIM) :: ISHFUV_G(KF_GP),ISHFSC_G(KF_GP)
(  124) INTEGER(KIND=JPIM) :: IVSETUV(KF_GP),IVSETSC(KF_GP)
(  125) INTEGER(KIND=JPIM) :: IBLKS,JBLK,ISTUV_G,IENUV_G
(  126) INTEGER(KIND=JPIM) :: IF_UV_G,IF_UV,ISTUV,IF_SCALARS,IF_SCALARS_G,IF_FS,IF_GP
(  127) INTEGER(KIND=JPIM) :: JFLD,ISTSC_G,IENSC_G,ISTSC,IENSC,IENUV,IF_SCDERS,IF_OUT_LT
(  128) INTEGER(KIND=JPIM) :: IOFFD,IOFFU,IOFFV,IOFFUVD,IOFFSC,IOFFSCNS,IOFFSCEW,IOFF,IF_GPB
(  129) # 130 "inv_trans_ctl_mod.F90"
(  130) !     ------------------------------------------------------------------
(  131) # 132 "inv_trans_ctl_mod.F90"
(  132) ! Perform transform
(  133) # 134 "inv_trans_ctl_mod.F90"
(  134) print *,'inv_trans_ctl: precision: jprm=',jprm,' JPRBT=',JPRBT,' jprd=',jprd
(  135) # 136 "inv_trans_ctl_mod.F90"
(  136) IF_GPB = 2*KF_UV_G+KF_SCALARS_G
(  137) IF(NPROMATR > 0 .AND. IF_GPB > NPROMATR) THEN
(  138) # 139 "inv_trans_ctl_mod.F90"
(  139)   ! Fields to be split into packets
(  140) # 141 "inv_trans_ctl_mod.F90"
(  141)   CALL SHUFFLE(KF_UV_G,KF_SCALARS_G,ISHFUV_G,IVSETUV,ISHFSC_G,IVSETSC,&
(  142)  & KVSETUV,KVSETSC)
(  143) # 144 "inv_trans_ctl_mod.F90"
(  144)   IBLKS=(IF_GPB-1)/NPROMATR+1
(  145) # 146 "inv_trans_ctl_mod.F90"
(  146)   DO JBLK=1,IBLKS
(  147)   
(  148)     CALL FIELD_SPLIT(JBLK,IF_GPB,KF_UV_G,IVSETUV,IVSETSC,&
(  149)      & ISTUV_G,IENUV_G,IF_UV_G,ISTSC_G,IENSC_G,IF_SCALARS_G,&
(  150)      & ISTUV,IENUV,IF_UV,ISTSC,IENSC,IF_SCALARS)
(  151) # 152 "inv_trans_ctl_mod.F90"
(  152)     IF(LSCDERS) THEN
(  153)       IF_SCDERS = IF_SCALARS
(  154)     ELSE
(  155)       IF_SCDERS = 0
(  156)     ENDIF
(  157)         
(  158)     IF_OUT_LT = 2*IF_UV + IF_SCALARS+IF_SCDERS
(  159)     IF(LVORGP) THEN
(  160)       IF_OUT_LT = IF_OUT_LT+IF_UV
(  161)     ENDIF
(  162)     IF(LDIVGP) THEN
(  163)       IF_OUT_LT = IF_OUT_LT+IF_UV
(  164)     ENDIF
(  165)     IF_FS = IF_OUT_LT+IF_SCDERS
(  166)     IF(LUVDER) THEN
(  167)       IF_FS = IF_FS+2*IF_UV
(  168)     ENDIF
(  169) # 170 "inv_trans_ctl_mod.F90"
(  170)     IF_GP = 2*IF_UV_G+IF_SCALARS_G
(  171)     IOFFD = 0
(  172)     IOFFU = 0
(  173)     IOFFV = KF_UV_G
(  174)     IOFFUVD = 2*KF_UV_G+KF_SCALARS_G






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 10

(  175)     IOFFSC = 2*KF_UV_G
(  176)     IF(LVORGP) THEN
(  177)       IF_GP = IF_GP+IF_UV_G
(  178)       IOFFD = KF_UV_G
(  179)       IOFFU = IOFFU+KF_UV_G
(  180)       IOFFV = IOFFV+KF_UV_G
(  181)       IOFFUVD =IOFFUVD+KF_UV_G
(  182)       IOFFSC = IOFFSC+KF_UV_G
(  183)     ENDIF
(  184)     IF(LDIVGP) THEN
(  185)       IF_GP = IF_GP+IF_UV_G
(  186)       IOFFU = IOFFU+KF_UV_G
(  187)       IOFFV = IOFFV+KF_UV_G
(  188)       IOFFUVD =IOFFUVD+KF_UV_G
(  189)       IOFFSC = IOFFSC+KF_UV_G
(  190)     ENDIF
(  191)     IF(LSCDERS) THEN
(  192)       IF_GP  = IF_GP+2*IF_SCALARS_G
(  193)       IOFFUVD =IOFFUVD+KF_SCALARS_G
(  194)       IOFFSCNS = IOFFSC+KF_SCALARS_G
(  195)       IOFFSCEW = IOFFSC+2*KF_SCALARS_G
(  196)     ENDIF
(  197)     IF(LUVDER) THEN
(  198)       IF_GP = IF_GP+2*IF_UV_G
(  199)       IOFFSCEW = IOFFSCEW+2*KF_UV_G
(  200)     ENDIF
(  201) # 202 "inv_trans_ctl_mod.F90"
(  202)     DO JFLD=1,IF_UV_G
(  203)       IOFF = 0
(  204)       IF(LVORGP) THEN
(  205)         IPTRGP(JFLD+IOFF) = ISHFUV_G(ISTUV_G+JFLD-1)
(  206)         IOFF = IOFF+IF_UV_G
(  207)       ENDIF
(  208)       IF(LDIVGP) THEN
(  209)         IPTRGP(JFLD+IOFF) = IOFFD+ISHFUV_G(ISTUV_G+JFLD-1)
(  210)         IOFF = IOFF+IF_UV_G
(  211)       ENDIF
(  212)       IPTRGP(JFLD+IOFF) = IOFFU+ISHFUV_G(ISTUV_G+JFLD-1)
(  213)       IOFF = IOFF+IF_UV_G
(  214)       IPTRGP(JFLD+IOFF) = IOFFV+ISHFUV_G(ISTUV_G+JFLD-1)
(  215)       IOFF = IOFF+IF_UV_G+IF_SCALARS_G
(  216)       IF(LSCDERS) THEN
(  217)         IOFF  = IOFF+IF_SCALARS_G
(  218)       ENDIF
(  219)       IF(LUVDER) THEN
(  220)         IPTRGP(JFLD+IOFF) = IOFFUVD+ISHFUV_G(ISTUV_G+JFLD-1)
(  221)         IOFF = IOFF+IF_UV_G
(  222)         IPTRGP(JFLD+IOFF) = IOFFUVD+KF_UV_G+ISHFUV_G(ISTUV_G+JFLD-1)
(  223)       ENDIF
(  224)     ENDDO
(  225) # 226 "inv_trans_ctl_mod.F90"
(  226)     DO JFLD=1,IF_SCALARS_G
(  227)       IOFF = 2*IF_UV_G
(  228)       IF (LVORGP) IOFF = IOFF+IF_UV_G
(  229)       IF (LDIVGP) IOFF = IOFF+IF_UV_G
(  230)       IPTRGP(JFLD+IOFF) = IOFFSC+ISHFSC_G(ISTSC_G+JFLD-1)
(  231)       IOFF = IOFF+IF_SCALARS_G
(  232)       IF(LSCDERS) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:46:25      page 11

(  233)         IPTRGP(JFLD+IOFF) = IOFFSCNS+ISHFSC_G(ISTSC_G+JFLD-1)
(  234)         IOFF  = IOFF+IF_SCALARS_G
(  235)         IF(LUVDER) THEN
(  236)           IOFF  = IOFF+2*IF_UV_G
(  237)         ENDIF
(  238)         IPTRGP(JFLD+IOFF) = IOFFSCEW+ISHFSC_G(ISTSC_G+JFLD-1)
(  239)       ENDIF
(  240)     ENDDO
(  241)     DO JFLD=1,IF_UV
(  242)       IPTRSPUV(JFLD) = ISTUV+JFLD-1
(  243)     ENDDO
(  244)     DO JFLD=1,IF_SCALARS
(  245)       IPTRSPSC(JFLD) = ISTSC+JFLD-1
(  246)     ENDDO
(  247) # 248 "inv_trans_ctl_mod.F90"
(  248)     CALL LTINV_CTL(IF_OUT_LT,IF_UV,IF_SCALARS,IF_SCDERS, &
(  249)      & PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  250)      & KFLDPTRUV=IPTRSPUV,KFLDPTRSC=IPTRSPSC,FSPGL_PROC=FSPGL_PROC)
(  251) # 252 "inv_trans_ctl_mod.F90"
(  252)     IF(IF_UV_G > 0 .AND. IF_SCALARS_G > 0) THEN
(  253)       CALL FTINV_CTL(IF_UV_G,IF_SCALARS_G,&
(  254)        & IF_UV,IF_SCALARS,IF_SCDERS,IF_GP,IF_FS,IF_OUT_LT,&
(  255)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),&
(  256)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,&
(  257)        & PGP=PGP)
(  258)     ELSEIF(IF_UV_G > 0) THEN
(  259)       CALL FTINV_CTL(IF_UV_G,IF_SCALARS_G,&
(  260)        & IF_UV,IF_SCALARS,IF_SCDERS,IF_GP,IF_FS,IF_OUT_LT,&
(  261)        & KVSETUV=IVSETUV(ISTUV_G:IENUV_G),KPTRGP=IPTRGP,&
(  262)        & PGP=PGP)
(  263)     ELSEIF(IF_SCALARS_G > 0) THEN
(  264)       CALL FTINV_CTL(IF_UV_G,IF_SCALARS_G,&
(  265)        & IF_UV,IF_SCALARS,IF_SCDERS,IF_GP,IF_FS,IF_OUT_LT,&
(  266)        & KVSETSC=IVSETSC(ISTSC_G:IENSC_G),KPTRGP=IPTRGP,&
(  267)        & PGP=PGP)
(  268)     ENDIF
(  269)   ENDDO
(  270) # 271 "inv_trans_ctl_mod.F90"
(  271) ELSE
(  272) # 273 "inv_trans_ctl_mod.F90"
(  273)   ! No splitting of fields, transform done in one go
(  274)   CALL LTINV_CTL(KF_OUT_LT,KF_UV,KF_SCALARS,KF_SCDERS, &
(  275)    &PSPVOR=PSPVOR,PSPDIV=PSPDIV,PSPSCALAR=PSPSCALAR,&
(  276)    &PSPSC3A=PSPSC3A,PSPSC3B=PSPSC3B,PSPSC2=PSPSC2,&
(  277)    &FSPGL_PROC=FSPGL_PROC)
(  278) # 279 "inv_trans_ctl_mod.F90"
(  279)   CALL FTINV_CTL(KF_UV_G,KF_SCALARS_G,&
(  280)    & KF_UV,KF_SCALARS,KF_SCDERS,KF_GP,KF_FS,KF_OUT_LT,&
(  281)    & KVSETUV=KVSETUV,KVSETSC=KVSETSC,&
(  282)    & KVSETSC3A=KVSETSC3A,KVSETSC3B=KVSETSC3B,KVSETSC2=KVSETSC2,&
(  283)    & PGP=PGP,PGPUV=PGPUV,PGP3A=PGP3A,PGP3B=PGP3B,PGP2=PGP2)
(  284) # 285 "inv_trans_ctl_mod.F90"
(  285) ENDIF
(  286) # 287 "inv_trans_ctl_mod.F90"
(  287) !     ------------------------------------------------------------------
(  288) # 289 "inv_trans_ctl_mod.F90"
(  289) END SUBROUTINE INV_TRANS_CTL
(  290) END MODULE INV_TRANS_CTL_MOD



