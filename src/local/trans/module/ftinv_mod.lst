


NVFORTRAN (Version    20.11)          02/16/2022  17:29:12      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: ftinv_mod.F90

(    1) MODULE FTINV_MOD
(    2) CONTAINS
(    3) SUBROUTINE FTINV(PREEL,KFIELDS)
(    4) 
(    5) !**** *FTINV - Inverse Fourier transform
(    6) 
(    7) !     Purpose. Routine for Fourier to Grid-point transform
(    8) !     --------
(    9) 
(   10) !**   Interface.
(   11) !     ----------
(   12) !        CALL FTINV(..)
(   13) 
(   14) !        Explicit arguments :  PREEL   - Fourier/grid-point array
(   15) !        --------------------  KFIELDS - number of fields
(   16) 
(   17) !     Method.
(   18) !     -------
(   19) 
(   20) !     Externals.  FFT992 - FFT routine
(   21) !     ----------
(   22) !
(   23) 
(   24) !     Author.
(   25) !     -------
(   26) !        Mats Hamrud *ECMWF*
(   27) 
(   28) !     Modifications.
(   29) !     --------------
(   30) !        Original : 00-03-03
(   31) !        G. Radnoti 01-04-24 : 2D model (NLOEN=1)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:12      page 2

(   32) !        D. Degrauwe  (Feb 2012): Alternative extension zone (E')
(   33) !        G. Mozdzynski (Oct 2014): support for FFTW transforms
(   34) !        G. Mozdzynski (Jun 2015): Support alternative FFTs to FFTW
(   35) !     ------------------------------------------------------------------
(   36) 
(   37) USE PARKIND1  ,ONLY : JPIM, JPRBT
(   38) 
(   39) USE TPM_DISTR       ,ONLY : D, MYSETW,  MYPROC, NPROC
(   40) USE TPM_GEOMETRY    ,ONLY : G
(   41) use tpm_gen, only: nout
(   42) USE TPM_FFT         ,ONLY : T, TB
(   43) USE BLUESTEIN_MOD   ,ONLY : BLUESTEIN_FFT
(   44) #ifdef WITH_FFTW
(   45) USE TPM_FFTW        ,ONLY : TW, EXEC_FFTW
(   46) #endif
(   47) USE TPM_FFTC        ,ONLY : CREATE_PLAN_FFT, destroy_plan_fft
(   48) USE TPM_DIM         ,ONLY : R
(   49) USE CUDA_DEVICE_MOD
(   50) 
(   51) IMPLICIT NONE
(   52) 
(   53) INTEGER(KIND=JPIM),INTENT(IN) :: KFIELDS
(   54) INTEGER(KIND=JPIM) :: KGL
(   55) REAL(KIND=JPRBT), INTENT(INOUT)  :: PREEL(:,:)
(   56) 
(   57) REAL(KIND=JPRBT),ALLOCATABLE :: ZFFT(:,:)
(   58) 
(   59) INTEGER(KIND=JPIM) :: IGLG,IST,ILEN,IJUMP,JJ,JF,IST1
(   60) INTEGER(KIND=JPIM) :: IOFF,IRLEN,ICLEN, ITYPE
(   61) LOGICAL :: LL_ALL=.FALSE. ! T=do kfields ffts in one batch, F=do kfields ffts one at a time
(   62) INTEGER(KIND=JPIM) :: IPLAN_C2R
(   63) INTEGER(KIND=JPIM) :: IBEG,IEND,IINC,ISIZE
(   64) integer :: istat
(   65) 
(   66) !     ------------------------------------------------------------------
(   67) 
(   68) 
(   69) 
(   70) IF(MYPROC > NPROC/2)THEN
(   71)   IBEG=1
(   72)   IEND=D%NDGL_FS
(   73)   IINC=1
(   74) ELSE
(   75)   IBEG=D%NDGL_FS
(   76)   IEND=1
(   77)   IINC=-1
(   78) ENDIF
(   79) 
(   80) ISIZE=size(PREEL,1)
(   81) 
(   82) !$ACC data &
(   83) !$ACC& copyin(D,D%NSTAGTF,D%NPTRLS,G%NMEN,G%NLOEN,R,R%NNOEXTZL) &
(   84) !$ACC& copyin(D%NSTAGTF,D%NPTRLS,G%NMEN,G%NLOEN,R%NNOEXTZL) &
(   85) !$ACC& present(PREEL)
(   86) 
(   87) !$ACC parallel loop
(   88) DO KGL=IBEG,IEND,IINC
(   89) 






NVFORTRAN (Version    20.11)          02/16/2022  17:29:12      page 3

(   90)   !IF( T%LUSEFFT992(kgl) )THEN
(   91)   !  stop 'Error: code path not (yet) supported in GPU version'
(   92)   !END IF
(   93)   
(   94)   IJUMP = 1
(   95)   IGLG  = D%NPTRLS(MYSETW)+KGL-1
(   96)   IST   = 2*(G%NMEN(IGLG)+1)+1
(   97)   ILEN  = G%NLOEN(IGLG)+R%NNOEXTZL+3-IST
(   98)   IST1=1
(   99)   IF (G%NLOEN(IGLG)==1) IST1=0
(  100) 
(  101)   !$ACC loop
(  102)   DO JJ=IST1,ILEN
(  103)      !$ACC loop
(  104)      DO JF=1,KFIELDS
(  105)         PREEL(JF,IST+D%NSTAGTF(KGL)+JJ-1) = 0.0_JPRBT
(  106)      ENDDO
(  107)   ENDDO
(  108) 
(  109) END DO
(  110) !$ACC end data
(  111) 
(  112) !istat = cuda_Synchronize()      
(  113) DO KGL=ibeg,IEND,IINC
(  114) 
(  115)   IJUMP = 1
(  116)   IGLG  = D%NPTRLS(MYSETW)+KGL-1
(  117)   IST   = 2*(G%NMEN(IGLG)+1)+1
(  118)   ILEN  = G%NLOEN(IGLG)+R%NNOEXTZL+3-IST
(  119)   IST1=1
(  120)   IF (G%NLOEN(IGLG)==1) IST1=0
(  121) 
(  122)   IF (G%NLOEN(IGLG)>1) THEN
(  123)      IOFF=D%NSTAGTF(KGL)+1
(  124) 
(  125) !call cudaProfilerStop()
(  126)      CALL CREATE_PLAN_FFT(IPLAN_C2R,1,KN=G%NLOEN(IGLG),KLOT=KFIELDS)
(  127)      !$ACC host_data use_device(PREEL)
(  128)      CALL EXECUTE_PLAN_FFTC(IPLAN_C2R,1,PREEL(1, ioff))
(  129)      !$ACC end host_data
(  130) !call cudaProfilerStart()
(  131) 
(  132)   ENDIF
(  133) 
(  134) END DO
(  135) istat = cuda_Synchronize()      
(  136) 
(  137) 
(  138) !     ------------------------------------------------------------------
(  139) 
(  140) END SUBROUTINE FTINV
(  141) END MODULE FTINV_MOD












NVFORTRAN (Version    20.11)          02/16/2022  17:29:12      page 4

(    1) # 1 "ftinv_mod.F90"
(    1) MODULE FTINV_MOD
(    2) CONTAINS
(    3) SUBROUTINE FTINV(PREEL,KFIELDS)
(    4) # 5 "ftinv_mod.F90"
(    5) !**** *FTINV - Inverse Fourier transform
(    6) # 7 "ftinv_mod.F90"
(    7) !     Purpose. Routine for Fourier to Grid-point transform
(    8) !     --------
(    9) # 10 "ftinv_mod.F90"
(   10) !**   Interface.
(   11) !     ----------
(   12) !        CALL FTINV(..)
(   13) # 14 "ftinv_mod.F90"
(   14) !        Explicit arguments :  PREEL   - Fourier/grid-point array
(   15) !        --------------------  KFIELDS - number of fields
(   16) # 17 "ftinv_mod.F90"
(   17) !     Method.
(   18) !     -------
(   19) # 20 "ftinv_mod.F90"
(   20) !     Externals.  FFT992 - FFT routine
(   21) !     ----------
(   22) !
(   23) # 24 "ftinv_mod.F90"
(   24) !     Author.
(   25) !     -------
(   26) !        Mats Hamrud *ECMWF*
(   27) # 28 "ftinv_mod.F90"
(   28) !     Modifications.
(   29) !     --------------
(   30) !        Original : 00-03-03
(   31) !        G. Radnoti 01-04-24 : 2D model (NLOEN=1)
(   32) !        D. Degrauwe  (Feb 2012): Alternative extension zone (E')
(   33) !        G. Mozdzynski (Oct 2014): support for FFTW transforms
(   34) !        G. Mozdzynski (Jun 2015): Support alternative FFTs to FFTW
(   35) !     ------------------------------------------------------------------
(   36) # 37 "ftinv_mod.F90"
(   37) USE PARKIND1  ,ONLY : JPIM, JPRBT
(   38) # 39 "ftinv_mod.F90"
(   39) USE TPM_DISTR       ,ONLY : D, MYSETW,  MYPROC, NPROC
(   40) USE TPM_GEOMETRY    ,ONLY : G
(   41) use tpm_gen, only: nout
(   42) USE TPM_FFT         ,ONLY : T, TB
(   43) USE BLUESTEIN_MOD   ,ONLY : BLUESTEIN_FFT
(   44) # 47 "ftinv_mod.F90"
(   47) USE TPM_FFTC        ,ONLY : CREATE_PLAN_FFT, destroy_plan_fft
(   48) USE TPM_DIM         ,ONLY : R
(   49) USE CUDA_DEVICE_MOD
(   50) # 51 "ftinv_mod.F90"
(   51) IMPLICIT NONE
(   52) # 53 "ftinv_mod.F90"
(   53) INTEGER(KIND=JPIM),INTENT(IN) :: KFIELDS
(   54) INTEGER(KIND=JPIM) :: KGL
(   55) REAL(KIND=JPRBT), INTENT(INOUT)  :: PREEL(:,:)
(   56) # 57 "ftinv_mod.F90"
(   57) REAL(KIND=JPRBT),ALLOCATABLE :: ZFFT(:,:)
(   58) # 59 "ftinv_mod.F90"
(   59) INTEGER(KIND=JPIM) :: IGLG,IST,ILEN,IJUMP,JJ,JF,IST1






NVFORTRAN (Version    20.11)          02/16/2022  17:29:12      page 5

(   60) INTEGER(KIND=JPIM) :: IOFF,IRLEN,ICLEN, ITYPE
(   61) LOGICAL :: LL_ALL=.FALSE. ! T=do kfields ffts in one batch, F=do kfields ffts one at a time
(   62) INTEGER(KIND=JPIM) :: IPLAN_C2R
(   63) INTEGER(KIND=JPIM) :: IBEG,IEND,IINC,ISIZE
(   64) integer :: istat
(   65) # 66 "ftinv_mod.F90"
(   66) !     ------------------------------------------------------------------
(   67) # 70 "ftinv_mod.F90"
(   70) IF(MYPROC > NPROC/2)THEN
(   71)   IBEG=1
(   72)   IEND=D%NDGL_FS
(   73)   IINC=1
(   74) ELSE
(   75)   IBEG=D%NDGL_FS
(   76)   IEND=1
(   77)   IINC=-1
(   78) ENDIF
(   79) # 80 "ftinv_mod.F90"
(   80) ISIZE=size(PREEL,1)
(   81) # 82 "ftinv_mod.F90"
(   83) !$ACC& copyin(D,D%NSTAGTF,D%NPTRLS,G%NMEN,G%NLOEN,R,R%NNOEXTZL) &
(   84) !$ACC& copyin(D%NSTAGTF,D%NPTRLS,G%NMEN,G%NLOEN,R%NNOEXTZL) &
(   85) !$ACC& present(PREEL)
(   86) # 87 "ftinv_mod.F90"
(   87) !$ACC parallel loop
(   88) DO KGL=IBEG,IEND,IINC
(   89) # 90 "ftinv_mod.F90"
(   90)   !IF( T%LUSEFFT992(kgl) )THEN
(   91)   !  stop 'Error: code path not (yet) supported in GPU version'
(   92)   !END IF
(   93)   
(   94)   IJUMP = 1
(   95)   IGLG  = D%NPTRLS(MYSETW)+KGL-1
(   96)   IST   = 2*(G%NMEN(IGLG)+1)+1
(   97)   ILEN  = G%NLOEN(IGLG)+R%NNOEXTZL+3-IST
(   98)   IST1=1
(   99)   IF (G%NLOEN(IGLG)==1) IST1=0
(  100) # 101 "ftinv_mod.F90"
(  101)   !$ACC loop
(  102)   DO JJ=IST1,ILEN
(  103)      !$ACC loop
(  104)      DO JF=1,KFIELDS
(  105)         PREEL(JF,IST+D%NSTAGTF(KGL)+JJ-1) = 0.0_JPRBT
(  106)      ENDDO
(  107)   ENDDO
(  108) # 109 "ftinv_mod.F90"
(  109) END DO
(  110) !$ACC end data
(  111) # 112 "ftinv_mod.F90"
(  112) !istat = cuda_Synchronize()      
(  113) DO KGL=ibeg,IEND,IINC
(  114) # 115 "ftinv_mod.F90"
(  115)   IJUMP = 1
(  116)   IGLG  = D%NPTRLS(MYSETW)+KGL-1
(  117)   IST   = 2*(G%NMEN(IGLG)+1)+1
(  118)   ILEN  = G%NLOEN(IGLG)+R%NNOEXTZL+3-IST
(  119)   IST1=1
(  120)   IF (G%NLOEN(IGLG)==1) IST1=0






NVFORTRAN (Version    20.11)          02/16/2022  17:29:12      page 6

(  121) # 122 "ftinv_mod.F90"
(  122)   IF (G%NLOEN(IGLG)>1) THEN
(  123)      IOFF=D%NSTAGTF(KGL)+1
(  124) # 125 "ftinv_mod.F90"
(  125) !call cudaProfilerStop()
(  126)      CALL CREATE_PLAN_FFT(IPLAN_C2R,1,KN=G%NLOEN(IGLG),KLOT=KFIELDS)
(  127)      !$ACC host_data use_device(PREEL)
(  128)      CALL EXECUTE_PLAN_FFTC(IPLAN_C2R,1,PREEL(1, ioff))
(  129)      !$ACC end host_data
(  130) !call cudaProfilerStart()
(  131) # 132 "ftinv_mod.F90"
(  132)   ENDIF
(  133) # 134 "ftinv_mod.F90"
(  134) END DO
(  135) istat = cuda_Synchronize()      
(  136) # 138 "ftinv_mod.F90"
(  138) !     ------------------------------------------------------------------
(  139) # 140 "ftinv_mod.F90"
(  140) END SUBROUTINE FTINV
(  141) END MODULE FTINV_MOD
