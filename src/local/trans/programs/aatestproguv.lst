


NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/include
          -idir /gpfslocalsup/spack_soft/openmpi/4.0.5/nvhpc-20.11-3li3t3xykfzndqfr4oxyhh22iqiendl2/lib
          -inform severe -opt 2 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: aatestproguv.F90

(    1) PROGRAM TEST
(    2) 
(    3) USE MPL_END_MOD, ONLY : MPL_END
(    4) USE MPL_INIT_MOD, ONLY : MPL_INIT
(    5) USE PARKIND1, ONLY : JPIM, JPRB
(    6) USE MPL_MODULE, ONLY : MPL_BARRIER, MPL_MYRANK, MPL_NPROC
(    7) USE MPL_DATA_MODULE, ONLY : MPL_COMM_OML
(    8) USE YOMHOOK, ONLY : DR_HOOK, LHOOK
(    9) USE SET2PE_MOD, ONLY : SET2PE
(   10) 
(   11) USE XRD_GETOPTIONS
(   12) 
(   13) IMPLICIT NONE
(   14) 
(   15) REAL (KIND=JPRB), PARAMETER :: RPI = 2._JPRB * ASIN (1.0_JPRB)
(   16) REAL (KIND=JPRB), PARAMETER :: DEG2RAD = RPI / 180._JPRB
(   17) 
(   18) INTEGER(KIND=JPIM) :: NMSMAX, NSMAX, NDGLG, NPRGPNS, NPRGPEW, NPRTRW, NPRTRV, NDLON, NPRINTLEV, NTIME
(   19) INTEGER(KIND=JPIM) :: MYPROC, NPROC, NBSETSP
(   20) INTEGER(KIND=JPIM) :: NFLEV
(   21) INTEGER(KIND=JPIM) :: NFLEVG
(   22) INTEGER(KIND=JPIM) :: NSPEC2, NSPEC2G, NGPTOT, NGPTOTG, MYSETV, MYSETW
(   23) INTEGER(KIND=JPIM), ALLOCATABLE :: NLOEN (:) 
(   24) INTEGER(KIND=JPIM), ALLOCATABLE :: IFLDSCH (:) 
(   25) INTEGER(KIND=JPIM), ALLOCATABLE :: IVSETOFF (:)
(   26) INTEGER(KIND=JPIM), POINTER     :: INFD (:), IFLDOFF (:)
(   27) 
(   28) REAL (KIND=JPRB) :: ZTSTEP, TIMEF
(   29) 
(   30) REAL (KIND=JPRB),    ALLOCATABLE :: ZSPVOR (:,:), ZSPDIV (:,:)
(   31) REAL (KIND=JPRB),    ALLOCATABLE :: ZGPUV (:,:,:,:), ZMEANU (:), ZMEANV (:)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 2

(   32) INTEGER (KIND=JPIM), ALLOCATABLE :: NBSETLEV (:) 
(   33) INTEGER (KIND=JPIM), ALLOCATABLE :: IVSET (:) 
(   34) INTEGER (KIND=JPIM) :: NFLDUA, NFLDSU, IFLD, ILEVG, IGPG, JFLDG1, JFLDG2, IPROC
(   35) INTEGER (KIND=JPIM) :: JSETW, JSETV
(   36) INTEGER (KIND=JPIM) :: IFLDGPG, IFLDSPL
(   37) INTEGER (KIND=JPIM) :: IA, IB
(   38) INTEGER (KIND=JPIM) :: NRGRI (8000)
(   39) INTEGER (KIND=JPIM) :: ITIME
(   40) 
(   41) LOGICAL :: LUSEFLT, LUSERPNM, LKEEPRPNM
(   42) LOGICAL :: LSPLIT, LEQ_REGIONS, LDEBUG, LELAM
(   43) LOGICAL :: LLHOOK
(   44) 
(   45) #include "setup_trans0.h"
(   46) 
(   47) #include "setup_trans.h"
(   48) #include "trans_inq.h"
(   49) #include "dist_grid.h"
(   50) #include "gath_grid.h"
(   51) #include "dir_trans.h"
(   52) #include "inv_trans.h"
(   53) 
(   54) #include "esetup_trans.h"
(   55) #include "etrans_inq.h"
(   56) #include "edist_grid.h"
(   57) #include "egath_grid.h"
(   58) #include "edir_trans.h"
(   59) #include "einv_trans.h"
(   60) 
(   61) #include "abor1.intfb.h"
(   62) 
(   63) NAMELIST / NAMAATESTPROG / & 
(   64)   & NFLDUA, NFLDSU, NMSMAX, NSMAX, NDGLG, NFLEVG, LDEBUG, NDLON, NPRINTLEV, NTIME, LELAM
(   65) 
(   66) NAMELIST / NAMTRANS / & 
(   67)   & LUSEFLT, LUSERPNM, LKEEPRPNM
(   68) 
(   69) NAMELIST / NAMPAR0 / & 
(   70)   & NPRGPNS, NPRGPEW, NPRTRW, NPRTRV
(   71) 
(   72) NAMELIST / NAMPAR1 / & 
(   73)   & LEQ_REGIONS, LSPLIT
(   74) 
(   75) NAMELIST / NAMRGRI / & 
(   76)   & NRGRI
(   77) 
(   78) CHARACTER (LEN=64) :: CLNAMELIST, CLFIELDU, CLFIELDV
(   79) LOGICAL :: LLMPOFF, LLNOWRITE
(   80) 
(   81) REAL (KIND=JPRB) :: ZHOOK_HANDLE
(   82) 
(   83) CALL INITOPTIONS ()
(   84) CLNAMELIST = 'fort.4'
(   85) CALL GETOPTION ("--namelist", CLNAMELIST)
(   86) CALL GETOPTION ("--lmpoff", LLMPOFF)
(   87) NTIME     = 10
(   88) CALL GETOPTION ("--time", NTIME)
(   89) CLFIELDU = ''; CALL GETOPTION ("--u-file", CLFIELDU)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 3

(   90) CLFIELDV = ''; CALL GETOPTION ("--v-file", CLFIELDV)
(   91) CALL GETOPTION ("--no-write", LLNOWRITE)
(   92) CALL CHECKOPTIONS ()
(   93) 
(   94) 
(   95) LLHOOK = LHOOK
(   96) LHOOK = .FALSE.
(   97) 
(   98) OPEN (4, FILE=TRIM (CLNAMELIST), FORM='FORMATTED')
(   99) 
(  100) LELAM     = .FALSE.
(  101) NFLDUA    = 1
(  102) NFLDSU    = 0
(  103) NPRINTLEV = 0
(  104) NSMAX     = 0
(  105) NMSMAX    = 0
(  106) NDGLG     = 0
(  107) NFLEVG    = 19
(  108) LDEBUG    = .FALSE.
(  109) 
(  110) CALL POSNAM (4, 'NAMAATESTPROG')
(  111) READ (4, NAMAATESTPROG)
(  112) 
(  113) IF ((NSMAX == 0) .OR. (NDGLG == 0)) THEN
(  114)   CALL ABOR1 ('DWARF: NSMAX AND NDGLG ARE REQUIRED')
(  115) ENDIF
(  116) 
(  117) NPRGPNS = 0 
(  118) NPRGPEW = 0 
(  119) NPRTRW  = 0 
(  120) NPRTRV  = 0 
(  121) 
(  122) CALL POSNAM (4, 'NAMPAR0')
(  123) READ (4, NAMPAR0)
(  124) 
(  125) LUSEFLT   = NSMAX > 1280
(  126) LUSERPNM  = .NOT.LUSEFLT
(  127) LKEEPRPNM = .NOT.LUSEFLT
(  128) 
(  129) CALL POSNAM (4, 'NAMTRANS')
(  130) READ (4, NAMTRANS)
(  131) 
(  132) LEQ_REGIONS = .NOT. LELAM
(  133) LSPLIT      = .TRUE.
(  134) 
(  135) 
(  136) CALL POSNAM (4, 'NAMPAR1')
(  137) READ (4, NAMPAR1)
(  138) 
(  139) IF (LELAM) THEN
(  140)   NRGRI = NDLON
(  141) ELSE
(  142)   NRGRI = 0
(  143) ENDIF
(  144) 
(  145) CALL POSNAM (4, 'NAMRGRI')
(  146) READ (4, NAMRGRI)
(  147) 






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 4

(  148) CLOSE (4)
(  149) 
(  150) ALLOCATE (NLOEN (NDGLG))
(  151) NLOEN (1:NDGLG) = NRGRI (1:NDGLG)
(  152) 
(  153) IF (.NOT. LELAM) THEN
(  154)   IF (ANY (NLOEN (NDGLG/2+1:NDGLG) == 0)) THEN
(  155)     NLOEN (NDGLG/2+1:NDGLG) = NLOEN (NDGLG/2:1:-1)
(  156)   ENDIF
(  157)   IF (ANY (NLOEN (NDGLG/2:1:-1) /= NLOEN (NDGLG/2+1:NDGLG))) THEn
(  158)     CALL ABOR1 ('UNEXPECTED NLOEN')
(  159)   ENDIF
(  160) ENDIF
(  161) 
(  162) IF (LLMPOFF) THEN
(  163)   MYPROC = 1
(  164)   NPROC  = 1
(  165) ELSE
(  166)   CALL MPL_INIT 
(  167)   MYPROC = MPL_MYRANK()
(  168)   NPROC  = MPL_NPROC ()
(  169) ENDIF
(  170) 
(  171) ! GPU binding
(  172) 
(  173) CALL GPU_BIND (MYPROC-1, NPROC)
(  174) 
(  175) CALL SQUARE (NPROC, IB, IA)
(  176) 
(  177) IF (NPRGPNS == 0 .AND. NPRGPEW == 0) THEN
(  178)   NPRGPNS = IA
(  179)   NPRGPEW = IB
(  180) ENDIF
(  181) 
(  182) IF (NPRTRW == 0 .AND. NPRTRV == 0) THEN
(  183)   NPRTRW = IA
(  184)   NPRTRV = IB
(  185) ENDIF
(  186) 
(  187) NBSETSP = MIN (NFLEVG+1, NPRTRV)
(  188) 
(  189) IF (MYPROC == 1) THEN
(  190) 
(  191)   WRITE (0, *) " NPROC = ", NPROC, " NTIME = ", NTIME, " LELAM = ", LELAM
(  192)   WRITE (0, *) " NFLDUA = ", NFLDUA, " NFLDSU = ", NFLDSU, " NFLEVG = ", NFLEVG
(  193)   WRITE (0, *) " NPRGPNS = ", NPRGPNS, " NPRGPEW = ", NPRGPEW
(  194)   WRITE (0, *) " NPRTRW = ", NPRTRW, " NPRTRV = ", NPRTRV
(  195)   WRITE (0, *) " LEQ_REGIONS = ", LEQ_REGIONS, " LSPLIT = ", LSPLIT
(  196)   WRITE (0, *) " NSMAX = ", NSMAX, " NDGLG = ", NDGLG
(  197) 
(  198) ENDIF
(  199) 
(  200) MYSETV = MOD (MYPROC-1, NPRTRV) + 1
(  201) MYSETW = (MYPROC-1) / NPRTRV + 1
(  202) 
(  203) 
(  204) CALL SETUP_TRANS0 (KOUT=0, KERR=0, KPRINTLEV=NPRINTLEV, KMAX_RESOL=2,   &
(  205)                  & KPRGPNS=NPRGPNS, KPRGPEW=NPRGPEW, KPRTRW=NPRTRW,     &






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 5

(  206)                  & LDEQ_REGIONS=LEQ_REGIONS, LDMPOFF=LLMPOFF)
(  207) IF (LELAM) THEN
(  208)   CALL ESETUP_TRANS (KSMAX=NSMAX, KMSMAX=NMSMAX, KDGL=NDGLG, KDGUX=NDGLG, KLOEN=NLOEN, &
(  209)                    & LDSPLIT=LSPLIT, KFLEV=NFLEVG, PEXWN=1._JPRB, PEYWN=1._JPRB)
(  210)   CALL ETRANS_INQ (KSPEC2=NSPEC2, KGPTOT=NGPTOT, KSPEC2G=NSPEC2G, KGPTOTG=NGPTOTG)
(  211) ELSE
(  212)   CALL SETUP_TRANS (KSMAX=NSMAX, KDGL=NDGLG, KLOEN=NLOEN, LDSPLIT=LSPLIT, KFLEV=NFLEVG, &
(  213)                   & LDUSEFLT=LUSEFLT,LDUSERPNM=LUSERPNM, LDKEEPRPNM=LKEEPRPNM)
(  214)   CALL TRANS_INQ (KSPEC2=NSPEC2, KGPTOT=NGPTOT, KSPEC2G=NSPEC2G, KGPTOTG=NGPTOTG)
(  215) ENDIF
(  216) 
(  217) ALLOCATE (NBSETLEV (NFLEVG))
(  218) 
(  219) DO ILEVG = 1, NFLEVG
(  220)   NBSETLEV (ILEVG) = MOD (ILEVG, NPRTRV) + 1
(  221) ENDDO
(  222) 
(  223) NFLEV = COUNT (NBSETLEV == MYSETV)
(  224) 
(  225) IFLDGPG = NFLDSU + NFLDUA * NFLEVG 
(  226) ALLOCATE (IVSET (IFLDGPG))
(  227) 
(  228) DO IFLD = 1, NFLDSU
(  229)   IVSET (IFLD) = NBSETSP
(  230) ENDDO
(  231) 
(  232) DO IFLD = 1, NFLDUA
(  233)   DO ILEVG = 1, NFLEVG
(  234)     IVSET (NFLDSU+ILEVG+(IFLD-1)*NFLEVG) = NBSETLEV (ILEVG)
(  235)   ENDDO
(  236) ENDDO
(  237) 
(  238) IFLDSPL = COUNT (IVSET == MYSETV)
(  239) 
(  240) ALLOCATE (ZSPDIV (IFLDSPL, NSPEC2), ZSPVOR (IFLDSPL, NSPEC2))
(  241) ALLOCATE (ZGPUV (NGPTOT, IFLDGPG, 2, 1), ZMEANU (IFLDSPL), ZMEANV (IFLDSPL))
(  242) 
(  243) CALL GENFIELD
(  244) 
(  245) IF (.NOT. LLMPOFF) CALL MPL_BARRIER()
(  246) 
(  247) LHOOK = LLHOOK
(  248) 
(  249) IF (LHOOK) CALL DR_HOOK ('AATESTPROG',0,ZHOOK_HANDLE)
(  250) 
(  251) IF (.NOT. LLNOWRITE) CALL WRIFIELD ('AATESTPROG.0.fa')
(  252) 
(  253) #ifndef UNDEF
(  254) DO ITIME = 1, NTIME
(  255)   ZTSTEP = TIMEF()
(  256) 
(  257)   IF (LELAM) THEN
(  258)     CALL EDIR_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET, PMEANU=ZMEANU, PMEANV=ZMEANV)
(  259)     CALL EINV_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET, PMEANU=ZMEANU, PMEANV=ZMEANV)
(  260)   ELSE
(  261)     CALL DIR_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET)
(  262)     CALL INV_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET)
(  263)   ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 6

(  264) 
(  265)   IF(MYPROC == 1) THEN
(  266)     ZTSTEP=(TIMEF()-ZTSTEP)/1000.0_JPRB
(  267)     WRITE(*,'(" time step ",I6," took", F8.2)') ITIME, ZTSTEP
(  268)   ENDIF
(  269) ENDDO
(  270) #else
(  271) 
(  272) BLOCK
(  273) INTEGER :: INHARMU, INHARMV, JSP
(  274) CHARACTER (LEN=64) :: CLFILE
(  275) 
(  276) DO INHARMU= 1, 484 
(  277)   WRITE (CLFILE, '("20x20/AATESTPROG.20x20.gp.",I6.6,".dat")') INHARMU
(  278)   OPEN (77, FILE=TRIM (CLFILE), FORM='UNFORMATTED')
(  279)   READ (77) ZGPUV (:, 1, 1, 1)
(  280)   CLOSE (77)
(  281) 
(  282)   WRITE (CLFILE, '("sp.",I6.6,".dat")') INHARMU
(  283)   OPEN (88, FILE=TRIM (CLFILE), FORM='FORMATTED')
(  284) 
(  285) DO INHARMV= 1, 484 
(  286)   WRITE (CLFILE, '("20x20/AATESTPROG.20x20.gp.",I6.6,".dat")') INHARMV
(  287)   OPEN (77, FILE=TRIM (CLFILE), FORM='UNFORMATTED')
(  288)   READ (77) ZGPUV (:, 1, 2, 1)
(  289)   CLOSE (77)
(  290) 
(  291)   CALL EDIR_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET, PMEANU=ZMEANU, PMEANV=ZMEANV)
(  292) 
(  293)   WHERE (ABS (ZSPVOR) < 1E-13)
(  294)     ZSPVOR = 0._JPRB
(  295)   ENDWHERE
(  296)   
(  297)   WHERE (ABS (ZSPDIV) < 1E-13)
(  298)     ZSPDIV = 0._JPRB
(  299)   ENDWHERE
(  300)   
(  301)   WRITE (88, *) INHARMU, INHARMV
(  302)   DO JSP = 1, NSPEC2G
(  303)     IF (ABS (ZSPVOR (1,JSP)) > 1E-13 .OR. ABS (ZSPDIV (1,JSP)) > 1E-13) THEN
(  304)       WRITE (88, '(I4,E20.8,E20.8)') JSP, ZSPVOR (1,JSP), ZSPDIV (1,JSP)
(  305)     ENDIF
(  306)   ENDDO
(  307)  
(  308) ! CALL EINV_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET, PMEANU=ZMEANU, PMEANV=ZMEANV)
(  309) ENDDO
(  310) 
(  311)   CLOSE (88)
(  312) 
(  313) ENDDO
(  314) 
(  315) ENDBLOCK
(  316) 
(  317) 
(  318) #endif
(  319) 
(  320) 
(  321) IF (LELAM) THEN






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 7

(  322)   CALL ETRANS_END
(  323) ELSE
(  324)   CALL TRANS_END
(  325) ENDIF
(  326) 
(  327) IF (.NOT. LLMPOFF) CALL MPL_BARRIER
(  328) 
(  329) IF (LHOOK) CALL DR_HOOK ('AATESTPROG',1,ZHOOK_HANDLE)
(  330) 
(  331) IF (.NOT. LLNOWRITE) CALL WRIFIELD ('AATESTPROG.1.fa')
(  332) 
(  333) IF (.NOT. LLMPOFF) CALL MPL_END
(  334) 
(  335) IF (MYPROC == 1) WRITE (0, *) " --------- END --------- "
(  336) 
(  337) CONTAINS
(  338) 
(  339) SUBROUTINE SQUARE (KN, KA, KB)
(  340) 
(  341) INTEGER (KIND=JPIM) :: KN, KA, KB
(  342) 
(  343) KB = INT (SQRT (REAL (KN))) + 1
(  344) 
(  345) DO
(  346)   KA = KN / KB
(  347)   IF (KA * KB == KN) EXIT
(  348)   KB = KB - 1
(  349) ENDDO
(  350) 
(  351) END SUBROUTINE SQUARE
(  352) 
(  353) SUBROUTINE POSNAM (KULNAM,CDNAML)
(  354) 
(  355) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  356) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(  357) 
(  358) IMPLICIT NONE
(  359) 
(  360) INTEGER(KIND=JPIM),INTENT(IN)    :: KULNAM 
(  361) CHARACTER(LEN=*)  ,INTENT(IN)    :: CDNAML 
(  362) 
(  363) 
(  364) #include "abor1.intfb.h"
(  365) 
(  366) 
(  367) CHARACTER (LEN = 40) ::  CLINE
(  368) CHARACTER (LEN =  1) ::  CLTEST
(  369) 
(  370) INTEGER(KIND=JPIM) :: ILEN, IND1, ISTATUS, ISCAN
(  371) REAL(KIND=JPRB)    :: ZHOOK_HANDLE
(  372) 
(  373) IF (LHOOK) CALL DR_HOOK('POSNAM',0,ZHOOK_HANDLE)
(  374) 
(  375) CLINE='                                        '
(  376) REWIND(KULNAM)
(  377) ILEN=LEN(CDNAML)
(  378) ISTATUS=0
(  379) ISCAN=0






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 8

(  380) DO WHILE (ISTATUS==0 .AND. ISCAN==0)
(  381)   READ(KULNAM,'(A)',IOSTAT=ISTATUS) CLINE
(  382)   SELECT CASE (ISTATUS)
(  383)   CASE (:-1)
(  384)     CALL ABOR1 ('POSNAM: CANNOT FIND '//TRIM (CDNAML))
(  385)   CASE (0)
(  386)     IF (INDEX(CLINE(1:10),'&') == 0) THEN
(  387)       ISCAN=0
(  388)     ELSE
(  389)       IND1=INDEX(CLINE,'&'//CDNAML)
(  390)       IF (IND1 == 0) THEN
(  391)         ISCAN=0
(  392)       ELSE
(  393)         CLTEST=CLINE(IND1+ILEN+1:IND1+ILEN+1)
(  394)         IF (   (LGE(CLTEST,'0').AND.LLE(CLTEST,'9')) &
(  395)          & .OR.(LGE(CLTEST,'A').AND.LLE(CLTEST,'Z')) ) THEN
(  396)           ISCAN=0
(  397)         ELSE
(  398)           ISCAN=1
(  399)         ENDIF
(  400)       ENDIF
(  401)     ENDIF
(  402)   CASE (1:)
(  403)     CALL ABOR1 ('POSNAM: AN ERROR HAPPENED WHILE READING THE NAMELIST')
(  404)   END SELECT
(  405) ENDDO
(  406) BACKSPACE(KULNAM)
(  407) 
(  408) IF (LHOOK) CALL DR_HOOK('POSNAM',1,ZHOOK_HANDLE)
(  409) END SUBROUTINE POSNAM
(  410) 
(  411) SUBROUTINE WRIFIELD (CDFILE)
(  412) 
(  413) CHARACTER (LEN=*), INTENT (IN) :: CDFILE
(  414) REAL (KIND=JPRB), ALLOCATABLE :: ZGPBUFG (:, :)
(  415) INTEGER (KIND=JPIM) :: ITO (IFLDGPG), JFLD
(  416) CHARACTER (LEN=16) :: CLPREF
(  417) 
(  418) ITO = 1_JPIM
(  419) 
(  420) IF (MYPROC == 1) THEN
(  421)   ALLOCATE (ZGPBUFG (NGPTOTG, IFLDGPG))
(  422)   CALL SYSTEM ('rm -f '//TRIM (CDFILE))
(  423)   CALL GATH_GRID (PGPG=ZGPBUFG, KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,1,:))
(  424)   DO JFLD = 1, IFLDGPG
(  425)     WRITE (CLPREF, '("WW",I2.2)') JFLD
(  426)     CALL WFA (ZGPBUFG (:, JFLD), CDFILE, CLPREF, 'U')
(  427)   ENDDO
(  428)   CALL GATH_GRID (PGPG=ZGPBUFG, KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,2,:))
(  429)   DO JFLD = 1, IFLDGPG
(  430)     WRITE (CLPREF, '("WW",I2.2)') JFLD
(  431)     CALL WFA (ZGPBUFG (:, JFLD), CDFILE, CLPREF, 'V')
(  432)   ENDDO
(  433)   DEALLOCATE (ZGPBUFG)
(  434) ELSE
(  435)   CALL GATH_GRID (KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,1,:))
(  436)   CALL GATH_GRID (KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,2,:))
(  437) ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 9

(  438) 
(  439) END SUBROUTINE
(  440) 
(  441) SUBROUTINE WFA (PGLO, CDFILE, CDPREF, CDSUFF)
(  442) 
(  443) REAL (KIND=JPRB),  INTENT (IN) :: PGLO (:)
(  444) CHARACTER (LEN=*), INTENT (IN) :: CDFILE
(  445) CHARACTER (LEN=*), INTENT (IN) :: CDPREF, CDSUFF
(  446) 
(  447) REAL (KIND=JPRB) :: ZMU (NDGLG)
(  448) 
(  449) CHARACTER (LEN=3) :: CLNOMC 
(  450) REAL (KIND=JPRB) :: ZAHYBR (2), ZBHYBR (2), ZSLAPO, ZCLOPO, ZSLOPO, ZCODIL, ZREFER
(  451) INTEGER (KIND=JPIM) :: INIVER, ITYPTR, ITRONC, INLATI, INXLON
(  452) INTEGER (KIND=JPIM) :: NLOENG (NDGLG), INOZPA (NDGLG)
(  453) INTEGER (KIND=JPIM) :: INBARP, INBARI, ILUN, IREP
(  454) INTEGER (KIND=JPIM) :: INGRIB, INARG1, INARG2, INARG3, INARG4, INARG5
(  455) INTEGER (KIND=JPIM) :: IDATEF (11), ILCHAM
(  456) LOGICAL :: LLEXIST
(  457) CHARACTER (LEN=32) :: CLSTATUS
(  458) 
(  459) INQUIRE (FILE=TRIM (CDFILE), EXIST=LLEXIST)
(  460) 
(  461) IF (LLEXIST) THEN
(  462) CLSTATUS = 'OLD'
(  463) IF (LELAM) THEN
(  464)   CLNOMC = 'ALD'
(  465) ELSE
(  466)   CLNOMC = 'ARP'
(  467) ENDIF
(  468) ELSE
(  469) CLSTATUS = 'NEW'
(  470) IF (LELAM) THEN
(  471) BLOCK
(  472)   INTEGER (KIND=JPIM) :: INLOPA (8)
(  473)   INTEGER (KIND=JPIM) :: NX, NY, NUX, NUY
(  474)   REAL (KIND=JPRB) :: DXINMETRES, DYINMETRES
(  475)   REAL (KIND=JPRB) :: ZSINLA (18)
(  476) 
(  477)   REAL (KIND=JPRB), PARAMETER :: LADINDEGREES    = 46.2_JPRB
(  478)   REAL (KIND=JPRB), PARAMETER :: LATIN1INDEGREES = 46.2_JPRB
(  479)   REAL (KIND=JPRB), PARAMETER :: LATIN2INDEGREES = 46.2_JPRB
(  480)   REAL (KIND=JPRB), PARAMETER :: LOVINDEGREES    =  2.0_JPRB
(  481) 
(  482)   CLNOMC = 'ALD'
(  483)   NX = NDLON
(  484)   NY = NDGLG
(  485) 
(  486)   ! Round dx to 100m
(  487)   DXINMETRES = 2000.E3_JPRB / REAL (NX - 1, JPRB)
(  488)   DXINMETRES = 100._JPRB * NINT (DXINMETRES / 100._JPRB) 
(  489)   DYINMETRES = DXINMETRES
(  490) 
(  491)   NUX = NX - 1
(  492)   NUY = NY - 1
(  493) 
(  494)   INLATI = NY
(  495)   INXLON = NX






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 10

(  496)   ZSLAPO = 0._JPRB
(  497)   ZCLOPO = 0._JPRB
(  498)   ZSLOPO = 0._JPRB
(  499)   ZCODIL = 0._JPRB
(  500)   ZREFER = 0._JPRB
(  501)   INIVER = 1_JPIM
(  502)   ZAHYBR = 0._JPRB
(  503)   ZBHYBR = 0._JPRB 
(  504)   INLOPA = [10_JPIM, 1_JPIM, 1_JPIM, NUX+1, 1_JPIM, NUY+1, 8_JPIM, 8_JPIM]
(  505)   ITRONC = +INLATI / 2 - 1 
(  506)   ITYPTR = -INXLON / 2 + 1 
(  507)   
(  508)   ZSINLA = [-1._JPRB, SIN (DEG2RAD * LADINDEGREES), DEG2RAD * LOVINDEGREES, DEG2RAD * LADINDEGREES, &
(  509)          &  DEG2RAD * LOVINDEGREES, DEG2RAD * LADINDEGREES, DXINMETRES, DYINMETRES, &
(  510)          &  INXLON * DXINMETRES, INLATI * DYINMETRES, 0._JPRB, 0._JPRB, 0._JPRB, &
(  511)          &  0._JPRB, 0._JPRB, 0._JPRB, 0._JPRB, 0._JPRB ]
(  512)   
(  513)   CALL FACADE (CLNOMC, ITYPTR, ZSLAPO, ZCLOPO, ZSLOPO, &
(  514)   &            ZCODIL, ITRONC, INLATI, INXLON, INLOPA, &
(  515)   &            INOZPA, ZSINLA, INIVER, ZREFER, ZAHYBR, &
(  516)   &            ZBHYBR, .FALSE.)
(  517) 
(  518) ENDBLOCK
(  519) ELSE
(  520) BLOCK
(  521)   REAL (KIND=JPRB) :: ZCENTRE (2)
(  522) 
(  523)   CLNOMC = 'ARP'
(  524) 
(  525)   CALL TRANS_INQ (PMU=ZMU)
(  526)   
(  527)   ZCENTRE = [0._JPRB, 90._JPRB]
(  528)   ZCODIL = 1._JPRB
(  529)   
(  530)   INIVER = 1_JPIM
(  531)   ZAHYBR = 0._JPRB
(  532)   ZBHYBR = 0._JPRB
(  533)   ITYPTR = 2_JPIM
(  534)   
(  535)   NLOENG = NLOEN
(  536)   
(  537)   ZSLAPO = SIN (ZCENTRE (2) * DEG2RAD)
(  538)   ZCLOPO = COS (ZCENTRE (1) * DEG2RAD)
(  539)   ZSLOPO = SIN (ZCENTRE (1) * DEG2RAD)
(  540)   INLATI = NDGLG
(  541)   INXLON = MAXVAL (NLOENG)
(  542)   ITRONC = INXLON / 3
(  543)   INOZPA = MIN (ITRONC, NLOENG/2_JPIM-1_JPIM)
(  544)   ZREFER = 1._JPRB
(  545)   
(  546)   CALL FACADE (CLNOMC, ITYPTR, ZSLAPO, ZCLOPO, ZSLOPO, &
(  547)   &            ZCODIL, ITRONC, INLATI, INXLON, NLOENG, &
(  548)   &            INOZPA, ZMU,    INIVER, ZREFER, ZAHYBR, &
(  549)   &            ZBHYBR, .FALSE.)
(  550) 
(  551) ENDBLOCK
(  552) ENDIF
(  553) ENDIF






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 11

(  554) 
(  555) INBARP = 0
(  556) INBARI = 0
(  557) ILUN = 77
(  558) CALL FAITOU (IREP, ILUN, .TRUE., TRIM (CDFILE), TRIM (CLSTATUS), &
(  559)            & .TRUE., .TRUE., 2_JPIM, INBARP, INBARI, CLNOMC)
(  560) 
(  561) IF (.NOT. LLEXIST) THEN
(  562) IDATEF = [1990,  2, 15, 12,  0,   1,  0, 24,   1, 0, 0]
(  563) CALL FANDAR (IREP, ILUN, IDATEF)
(  564) ENDIF
(  565) 
(  566) CALL FATCHA (IREP, CLNOMC, .FALSE., ILCHAM)
(  567) 
(  568) CALL FAVEUR (IREP, ILUN, INGRIB, INARG1, INARG2, INARG3, INARG4, INARG5)
(  569) INGRIB = 123_JPIM
(  570) CALL FAGOTE (IREP, ILUN, INGRIB, INARG1, INARG2, INARG3, INARG4, INARG5)
(  571) 
(  572) CALL FAIENC (IREP, ILUN, TRIM (CDPREF), 0, TRIM (CDSUFF), PGLO, .FALSE.)
(  573) 
(  574) CALL FAIRME (IREP, ILUN, 'KEEP')
(  575) 
(  576) END SUBROUTINE
(  577) 
(  578) SUBROUTINE GENFIELD
(  579) 
(  580) REAL (KIND=JPRB), ALLOCATABLE :: ZGPBUFG (:, :)
(  581) 
(  582) 
(  583) IF (MYPROC == 1) THEN
(  584)   ALLOCATE (ZGPBUFG (NGPTOTG, 2))
(  585) 
(  586)   IF ((TRIM (CLFIELDU) /= '') .AND. (TRIM (CLFIELDV) /= '')) THEN
(  587)     OPEN (77, FILE=TRIM (CLFIELDU), FORM='UNFORMATTED', STATUS='OLD')
(  588)     READ (77) ZGPBUFG (:,1)
(  589)     CLOSE (77)
(  590)     OPEN (77, FILE=TRIM (CLFIELDV), FORM='UNFORMATTED', STATUS='OLD')
(  591)     READ (77) ZGPBUFG (:,2)
(  592)     CLOSE (77)
(  593)   ELSE
(  594)   BLOCK
(  595)     REAL (KIND=JPRB) :: ZLON, ZLAT, ZU, ZV, ZX, ZY
(  596)     INTEGER (KIND=JPIM) :: JLAT, JLON, JGLO
(  597) 
(  598)     JGLO = 1
(  599) 
(  600)     DO JLAT = 1, NDGLG
(  601)       DO JLON = 1, NLOEN (JLAT)
(  602)        
(  603)         IF (LELAM) THEN
(  604)           ZX = REAL (JLON-1, JPRB) / REAL (NDLON, JPRB)
(  605)           ZY = REAL (JLAT-1, JPRB) / REAL (NDLON, JPRB)
(  606)           ZU = ZX * (1._JPRB - ZX) * ZY * (1._JPRB - ZY) * 4._JPRB
(  607)           ZV = COS (2 * RPI * ZX) * SIN (2 * RPI * ZY)
(  608)         ELSE
(  609)           ZLAT = + RPI * (0.5_JPRB - REAL (JLAT, JPRB) / REAL (NDGLG+1, JPRB))
(  610)           ZLON = 2 * RPI * REAL (JLON-1, JPRB) / REAL (NLOEN (JLAT))
(  611)           ZU = COS (2 * ZLAT - RPI / 2) * SIN (ZLON)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 12

(  612)           ZV = COS (3 * ZLAT) * COS (ZLON)
(  613)         ENDIF
(  614)         ZGPBUFG (JGLO, 1) = ZU + 0.5
(  615)         ZGPBUFG (JGLO, 2) = ZV - 0.5
(  616)         JGLO = JGLO + 1
(  617)       ENDDO
(  618)     ENDDO
(  619)   ENDBLOCK
(  620)   ENDIF
(  621) 
(  622)   IF (LELAM) THEN
(  623)     CALL EDIST_GRID (PGPG=ZGPBUFG, KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))
(  624)   ELSE
(  625)     CALL DIST_GRID (PGPG=ZGPBUFG, KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))
(  626)   ENDIF
(  627) 
(  628)   DEALLOCATE (ZGPBUFG)
(  629) ELSE
(  630)   IF (LELAM) THEN
(  631)     CALL EDIST_GRID (KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))
(  632)   ELSE
(  633)     CALL DIST_GRID (KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))
(  634)   ENDIF
(  635) ENDIF
(  636) 
(  637) DO IFLD = 2, IFLDGPG
(  638)   ZGPUV (:, IFLD, 1, 1) = ZGPUV (:, 1, 1, 1) * IFLD
(  639)   ZGPUV (:, IFLD, 2, 1) = ZGPUV (:, 1, 2, 1) * IFLD
(  640) ENDDO
(  641) 
(  642) END SUBROUTINE
(  643) 
(  644) END PROGRAM TEST
(  645) 






























NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 13

(    1) # 1 "aatestproguv.F90"
(    1) PROGRAM TEST
(    2) # 3 "aatestproguv.F90"
(    3) USE MPL_END_MOD, ONLY : MPL_END
(    4) USE MPL_INIT_MOD, ONLY : MPL_INIT
(    5) USE PARKIND1, ONLY : JPIM, JPRB
(    6) USE MPL_MODULE, ONLY : MPL_BARRIER, MPL_MYRANK, MPL_NPROC
(    7) USE MPL_DATA_MODULE, ONLY : MPL_COMM_OML
(    8) USE YOMHOOK, ONLY : DR_HOOK, LHOOK
(    9) USE SET2PE_MOD, ONLY : SET2PE
(   10) # 11 "aatestproguv.F90"
(   11) USE XRD_GETOPTIONS
(   12) # 13 "aatestproguv.F90"
(   13) IMPLICIT NONE
(   14) # 15 "aatestproguv.F90"
(   15) REAL (KIND=JPRB), PARAMETER :: RPI = 2._JPRB * ASIN (1.0_JPRB)
(   16) REAL (KIND=JPRB), PARAMETER :: DEG2RAD = RPI / 180._JPRB
(   17) # 18 "aatestproguv.F90"
(   18) INTEGER(KIND=JPIM) :: NMSMAX, NSMAX, NDGLG, NPRGPNS, NPRGPEW, NPRTRW, NPRTRV, NDLON, NPRINTLEV, NTIME
(   19) INTEGER(KIND=JPIM) :: MYPROC, NPROC, NBSETSP
(   20) INTEGER(KIND=JPIM) :: NFLEV
(   21) INTEGER(KIND=JPIM) :: NFLEVG
(   22) INTEGER(KIND=JPIM) :: NSPEC2, NSPEC2G, NGPTOT, NGPTOTG, MYSETV, MYSETW
(   23) INTEGER(KIND=JPIM), ALLOCATABLE :: NLOEN (:) 
(   24) INTEGER(KIND=JPIM), ALLOCATABLE :: IFLDSCH (:) 
(   25) INTEGER(KIND=JPIM), ALLOCATABLE :: IVSETOFF (:)
(   26) INTEGER(KIND=JPIM), POINTER     :: INFD (:), IFLDOFF (:)
(   27) # 28 "aatestproguv.F90"
(   28) REAL (KIND=JPRB) :: ZTSTEP, TIMEF
(   29) # 30 "aatestproguv.F90"
(   30) REAL (KIND=JPRB),    ALLOCATABLE :: ZSPVOR (:,:), ZSPDIV (:,:)
(   31) REAL (KIND=JPRB),    ALLOCATABLE :: ZGPUV (:,:,:,:), ZMEANU (:), ZMEANV (:)
(   32) INTEGER (KIND=JPIM), ALLOCATABLE :: NBSETLEV (:) 
(   33) INTEGER (KIND=JPIM), ALLOCATABLE :: IVSET (:) 
(   34) INTEGER (KIND=JPIM) :: NFLDUA, NFLDSU, IFLD, ILEVG, IGPG, JFLDG1, JFLDG2, IPROC
(   35) INTEGER (KIND=JPIM) :: JSETW, JSETV
(   36) INTEGER (KIND=JPIM) :: IFLDGPG, IFLDSPL
(   37) INTEGER (KIND=JPIM) :: IA, IB
(   38) INTEGER (KIND=JPIM) :: NRGRI (8000)
(   39) INTEGER (KIND=JPIM) :: ITIME
(   40) # 41 "aatestproguv.F90"
(   41) LOGICAL :: LUSEFLT, LUSERPNM, LKEEPRPNM
(   42) LOGICAL :: LSPLIT, LEQ_REGIONS, LDEBUG, LELAM
(   43) LOGICAL :: LLHOOK
(   44) # 45 "aatestproguv.F90"
(   45) # 1 ".D[10]/setup_trans0.h"
(    1) INTERFACE
(    2) SUBROUTINE SETUP_TRANS0(KOUT,KERR,KPRINTLEV,KMAX_RESOL,KPROMATR,&
(    3) &                       KPRGPNS,KPRGPEW,KPRTRW,KCOMBFLEN,&
(    4) &                       LDMPOFF,LDSYNC_TRANS,KTRANS_SYNC_LEVEL,&
(    5) &                       LDEQ_REGIONS,K_REGIONS_NS,K_REGIONS_EW,K_REGIONS,&
(    6) &                       PRAD,LDALLOPERM,LDALLOPERM2)
(    7) # 8 ".D[10]/setup_trans0.h"
(    8) !**** *SETUP_TRANS0* - General setup routine for transform package
(    9) # 10 ".D[10]/setup_trans0.h"
(   10) !     Purpose.
(   11) !     --------
(   12) !     Resolution independent part of setup of transform package






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 14

(   13) !     Has to be called BEFORE SETUP_TRANS
(   14) # 15 ".D[10]/setup_trans0.h"
(   15) !**   Interface.
(   16) !     ----------
(   17) !     CALL SETUP_TRANS0(...)
(   18) # 19 ".D[10]/setup_trans0.h"
(   19) !     Explicit arguments : All arguments are optional, [..] default value
(   20) !     -------------------
(   21) !     KOUT - Unit number for listing output [6]
(   22) !     KERR - Unit number for error messages [0]
(   23) !     KPRINTLEV - level of output to KOUT, 0->no output,1->normal,2->debug [0]
(   24) !     KMAX_RESOL - maximum number of different resolutions for this run [1]
(   25) !     KPRGPNS - splitting level in N-S direction in grid-point space [1]
(   26) !     KPRGPEW - splitting level in E-W direction in grid-point space [1]
(   27) !     KPRTRW  - splitting level in wave direction in spectral space [1]
(   28) !     KCOMBFLEN - Size of communication buffer [1800000 (*8bytes) ]
(   29) !     LDMPOFF - switch off message passing [false]
(   30) !     LDSYNC_TRANS - switch to activate barrier before transforms [false]
(   31) !     KTRANS_SYNC_LEVEL - use of synchronization/blocking [0]
(   32) !     LDEQ_REGIONS - true if new eq_regions partitioning [false]
(   33) !     K_REGIONS    - Number of regions (1D or 2D partitioning)
(   34) !     K_REGIONS_NS - Maximum number of NS partitions
(   35) !     K_REGIONS_EW - Maximum number of EW partitions
(   36) !     PRAD         - Radius of the planet
(   37) !     LDALLOPERM  - Allocate certain arrays permanently
(   38) # 39 ".D[10]/setup_trans0.h"
(   39) !     The total number of (MPI)-processors has to be equal to KPRGPNS*KPRGPEW
(   40) # 41 ".D[10]/setup_trans0.h"
(   41) !     Method.
(   42) !     -------
(   43) # 44 ".D[10]/setup_trans0.h"
(   44) !     Externals.  SUMP_TRANS0 - initial setup routine
(   45) !     ----------
(   46) # 47 ".D[10]/setup_trans0.h"
(   47) !     Author.
(   48) !     -------
(   49) !        Mats Hamrud *ECMWF*
(   50) # 51 ".D[10]/setup_trans0.h"
(   51) !     Modifications.
(   52) !     --------------
(   53) !        Original : 00-03-03
(   54) !        R. El Khatib 03-01-24 LDMPOFF
(   55) !        G. Mozdzynski 2006-09-13 LDEQ_REGIONS
(   56) !        N. Wedi  2009-11-30 add radius
(   57) # 58 ".D[10]/setup_trans0.h"
(   58) !     ------------------------------------------------------------------
(   59) # 60 ".D[10]/setup_trans0.h"
(   60) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   61) # 62 ".D[10]/setup_trans0.h"
(   62) IMPLICIT NONE
(   63) # 64 ".D[10]/setup_trans0.h"
(   64) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(IN)  :: KOUT,KERR,KPRINTLEV,KMAX_RESOL,KPROMATR
(   65) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(IN)  :: KPRGPNS,KPRGPEW,KPRTRW,KCOMBFLEN
(   66) LOGICAL            ,OPTIONAL,INTENT(IN)  :: LDMPOFF
(   67) LOGICAL            ,OPTIONAL,INTENT(IN)  :: LDSYNC_TRANS
(   68) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(IN)  :: KTRANS_SYNC_LEVEL
(   69) LOGICAL            ,OPTIONAL,INTENT(IN)  :: LDEQ_REGIONS
(   70) LOGICAL            ,OPTIONAL,INTENT(IN)  :: LDALLOPERM






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 15

(   71) LOGICAL            ,OPTIONAL,INTENT(IN)  :: LDALLOPERM2
(   72) REAL(KIND=JPRB)    ,OPTIONAL,INTENT(IN)  :: PRAD
(   73) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(OUT) :: K_REGIONS(:)
(   74) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(OUT) :: K_REGIONS_NS
(   75) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(OUT) :: K_REGIONS_EW
(   76) # 77 ".D[10]/setup_trans0.h"
(   77) END SUBROUTINE SETUP_TRANS0
(   78) # 81 ".D[10]/setup_trans0.h"
(   81) END INTERFACE
(   82) # 46 "aatestproguv.F90"
(   46) # 47 "aatestproguv.F90"
(   47) # 1 ".D[18]/setup_trans.h"
(    1) INTERFACE
(    2) SUBROUTINE SETUP_TRANS(KSMAX,KDGL,KDLON,KLOEN,LDSPLIT,PSTRET,&
(    3) &KFLEV,KTMAX,KRESOL,PWEIGHT,LDGRIDONLY,LDUSERPNM,LDKEEPRPNM,LDUSEFLT,&
(    4) &LDSPSETUPONLY,LDPNMONLY,LDUSEFFTW,&
(    5) &LDLL,LDSHIFTLL,CDIO_LEGPOL,CDLEGPOLFNAME,KLEGPOLPTR,KLEGPOLPTR_LEN)
(    6) # 7 ".D[18]/setup_trans.h"
(    7) !**** *SETUP_TRANS* - Setup transform package for specific resolution
(    8) # 9 ".D[18]/setup_trans.h"
(    9) !     Purpose.
(   10) !     --------
(   11) !     To setup for making spectral transforms. Each call to this routine
(   12) !     creates a new resolution up to a maximum of NMAX_RESOL set up in
(   13) !     SETUP_TRANS0. You need to call SETUP_TRANS0 before this routine can
(   14) !     be called.
(   15) # 16 ".D[18]/setup_trans.h"
(   16) !**   Interface.
(   17) !     ----------
(   18) !     CALL SETUP_TRANS(...)
(   19) # 20 ".D[18]/setup_trans.h"
(   20) !     Explicit arguments : KLOEN,LDSPLIT are optional arguments
(   21) !     -------------------- 
(   22) !     KSMAX - spectral truncation required
(   23) !     KDGL  - number of Gaussian latitudes
(   24) !     KDLON - number of points on each latitude [2*KDGL]
(   25) !     KLOEN(:) - number of points on each Gaussian latitude [2*KDGL]
(   26) !     LDSPLIT - true if split latitudes in grid-point space [false]
(   27) !     KTMAX - truncation order for tendencies?
(   28) !     KRESOL - the resolution identifier
(   29) !     PWEIGHT - the weight per grid-point (for a weighted distribution)
(   30) !     LDGRIDONLY - true if only grid space is required
(   31) # 32 ".D[18]/setup_trans.h"
(   32) !     KSMAX,KDGL,KTMAX and KLOEN are GLOBAL variables desribing the resolution
(   33) !     in spectral and grid-point space
(   34) # 35 ".D[18]/setup_trans.h"
(   35) !     LDSPLIT describe the distribution among processors of grid-point data and
(   36) !     has no relevance if you are using a single processor
(   37) # 38 ".D[18]/setup_trans.h"
(   38) !     LDUSEFLT   - use Fast Legandre Transform (Butterfly algorithm)
(   39) !     LDUSERPNM  - Use Belusov to compute legendre pol. (else new alg.)
(   40) !     LDKEEPRPNM - Keep Legendre Polynomials (only applicable when using
(   41) !                  FLT, otherwise always kept)
(   42) !     LDPNMONLY  - Compute the Legendre polynomialsonly, not the FFTs.
(   43) !     LDUSEFFTW   - Use FFTW for FFTs
(   44) !     LDLL                 - Setup second set of input/output latitudes
(   45) !                                 the number of input/output latitudes to transform is equal KDGL 
(   46) !                                 or KDGL+2 in the case that includes poles + equator






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 16

(   47) !                                 the number of input/output longitudes to transform is 2*KDGL
(   48) !     LDSHIFTLL       - Shift output lon/lat data by 0.5*dx and 0.5*dy
(   49)  
(   50) !     Method.
(   51) !     -------
(   52) # 53 ".D[18]/setup_trans.h"
(   53) !     Externals.  SET_RESOL   - set resolution
(   54) !     ----------  SETUP_DIMS  - setup distribution independent dimensions
(   55) !                 SUMP_TRANS_PRELEG - first part of setup of distr. environment
(   56) !                 SULEG - Compute Legandre polonomial and Gaussian 
(   57) !                         Latitudes and Weights
(   58) !                 SUMP_TRANS - Second part of setup of distributed environment
(   59) !                 SUFFT - setup for FFT
(   60) # 61 ".D[18]/setup_trans.h"
(   61) !     Author.
(   62) !     -------
(   63) !        Mats Hamrud *ECMWF*
(   64) # 65 ".D[18]/setup_trans.h"
(   65) !     Modifications.
(   66) !     --------------
(   67) !        Original : 00-03-03
(   68) # 69 ".D[18]/setup_trans.h"
(   69) !     ------------------------------------------------------------------
(   70) # 71 ".D[18]/setup_trans.h"
(   71) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   72)     USE, INTRINSIC :: ISO_C_BINDING, ONLY:  C_PTR, C_INT,C_ASSOCIATED,C_SIZE_T
(   73) # 75 ".D[18]/setup_trans.h"
(   75) IMPLICIT NONE
(   76) # 77 ".D[18]/setup_trans.h"
(   77) ! Dummy arguments
(   78) # 79 ".D[18]/setup_trans.h"
(   79) INTEGER(KIND=JPIM) ,INTENT(IN) :: KSMAX,KDGL
(   80) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(IN) :: KDLON
(   81) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(IN) :: KLOEN(:)
(   82) LOGICAL   ,OPTIONAL,INTENT(IN) :: LDSPLIT
(   83) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(IN) :: KTMAX
(   84) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(OUT):: KRESOL
(   85) REAL(KIND=JPRB)    ,OPTIONAL,INTENT(IN) :: PWEIGHT(:)
(   86) REAL(KIND=JPRB)    ,OPTIONAL,INTENT(IN) :: PSTRET
(   87) INTEGER(KIND=JPIM) ,OPTIONAL,INTENT(IN) :: KFLEV
(   88) LOGICAL   ,OPTIONAL,INTENT(IN):: LDGRIDONLY
(   89) LOGICAL   ,OPTIONAL,INTENT(IN):: LDUSEFLT
(   90) LOGICAL   ,OPTIONAL,INTENT(IN):: LDUSERPNM
(   91) LOGICAL   ,OPTIONAL,INTENT(IN):: LDKEEPRPNM
(   92) LOGICAL   ,OPTIONAL,INTENT(IN):: LDPNMONLY
(   93) LOGICAL   ,OPTIONAL,INTENT(IN):: LDSPSETUPONLY
(   94) LOGICAL   ,OPTIONAL,INTENT(IN):: LDUSEFFTW
(   95) LOGICAL   ,OPTIONAL,INTENT(IN):: LDLL
(   96) LOGICAL   ,OPTIONAL,INTENT(IN):: LDSHIFTLL
(   97) CHARACTER(LEN=*),OPTIONAL,INTENT(IN):: CDIO_LEGPOL
(   98) CHARACTER(LEN=*),OPTIONAL,INTENT(IN):: CDLEGPOLFNAME
(   99) TYPE(C_PTR) ,OPTIONAL,INTENT(IN) :: KLEGPOLPTR
(  100) INTEGER(C_SIZE_T) ,OPTIONAL,INTENT(IN) :: KLEGPOLPTR_LEN
(  101) # 103 ".D[18]/setup_trans.h"
(  103) END SUBROUTINE SETUP_TRANS
(  104) # 106 ".D[18]/setup_trans.h"
(  106) END INTERFACE
(  107) # 48 "aatestproguv.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 17

(   48) # 48 "aatestproguv.F90"
(   48) # 1 ".D[18]/trans_inq.h"
(    1) INTERFACE
(    2) SUBROUTINE TRANS_INQ(KRESOL,KSPEC,KSPEC2,KSPEC2G,KSPEC2MX,KNUMP,&
(    3)                     &KGPTOT,KGPTOTG,KGPTOTMX,KGPTOTL,&
(    4)                     &KMYMS,KASM0,KUMPP,KPOSSP,KPTRMS,KALLMS,KDIM0G,&
(    5)                     &KFRSTLAT,KLSTLAT,KFRSTLOFF,KPTRLAT,&
(    6)                     &KPTRFRSTLAT,KPTRLSTLAT,KPTRFLOFF,KSTA,KONL,&
(    7)                     &KULTPP,KPTRLS,KNMENG,&
(    8)                     &KPRTRW,KMYSETW,KMYSETV,KMY_REGION_NS,KMY_REGION_EW,&
(    9)                     &LDSPLITLAT,&
(   10)                     &KSMAX,PLAPIN,KNVALUE,KDEF_RESOL,LDLAM,&
(   11)                     &PMU,PGW,PRPNM,KLEI3,KSPOLEGL,KPMS,KDGLU)
(   12) # 13 ".D[18]/trans_inq.h"
(   13) !**** *TRANS_INQ* - Extract information from the transform package
(   14) # 15 ".D[18]/trans_inq.h"
(   15) !     Purpose.
(   16) !     --------
(   17) !     Interface routine for extracting information from the T.P.
(   18) # 19 ".D[18]/trans_inq.h"
(   19) !**   Interface.
(   20) !     ----------
(   21) !     CALL TRANS_INQ(...)
(   22) !     Explicit arguments : All arguments are optional.
(   23) !     -------------------- 
(   24) !     KRESOL   - resolution tag for which info is required ,default is the
(   25) !                first defined resulution (input)
(   26) # 27 ".D[18]/trans_inq.h"
(   27) !                   MULTI-TRANSFORMS MANAGEMENT
(   28) !     KDEF_RESOL - number or resolutions defined
(   29) !     LDLAM      - .T. if the corresponding resolution is LAM, .F. if it is global
(   30) # 31 ".D[18]/trans_inq.h"
(   31) !                   SPECTRAL SPACE
(   32) !     KSPEC    - number of complex spectral coefficients on this PE
(   33) !     KSPEC2   - 2*KSPEC 
(   34) !     KSPEC2G  - global KSPEC2
(   35) !     KSPEC2MX - maximun KSPEC2 among all PEs
(   36) !     KNUMP    - Number of spectral waves handled by this PE
(   37) !     KGPTOT   - Total number of grid columns on this PE
(   38) !     KGPTOTG  - Total number of grid columns on the Globe
(   39) !     KGPTOTMX - Maximum number of grid columns on any of the PEs
(   40) !     KGPTOTL  - Number of grid columns one each PE (dimension N_REGIONS_NS:N_REGIONS_EW)
(   41) !     KMYMS    - This PEs spectral zonal wavenumbers
(   42) !     KASM0    - Address in a spectral array of (m, n=m)
(   43) !     KUMPP    - No. of wave numbers each wave set is responsible for
(   44) !     KPOSSP   - Defines partitioning of global spectral fields among PEs
(   45) !     KPTRMS   - Pointer to the first wave number of a given a-set
(   46) !     KALLMS   - Wave numbers for all wave-set concatenated together 
(   47) !                to give all wave numbers in wave-set order
(   48) !     KDIM0G   - Defines partitioning of global spectral fields among PEs
(   49) !     KSMAX    - spectral truncation
(   50) !     KNVALUE  - n value for each KSPEC2 spectral coeffient
(   51) # 52 ".D[18]/trans_inq.h"
(   52) !                 GRIDPOINT SPACE                  
(   53) !     KFRSTLAT    - First latitude of each a-set in grid-point space
(   54) !     KLSTTLAT    - Last latitude of each a-set in grid-point space
(   55) !     KFRSTLOFF   - Offset for first lat of own a-set in grid-point space
(   56) !     KPTRLAT     - Pointer to the start of each latitude






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 18

(   57) !     KPTRFRSTLAT - Pointer to the first latitude of each a-set in 
(   58) !                   NSTA and NONL arrays
(   59) !     KPTRLSTLAT  - Pointer to the last latitude of each a-set in
(   60) !                   NSTA and NONL arrays
(   61) !     KPTRFLOFF   - Offset for pointer to the first latitude of own a-set
(   62) !                   NSTA and NONL arrays, i.e. nptrfrstlat(myseta)-1
(   63) !     KSTA        - Position of first grid column for the latitudes on a 
(   64) !                   processor. The information is available for all processors.
(   65) !                   The b-sets are distinguished by the last dimension of 
(   66) !                   nsta().The latitude band for each a-set is addressed by 
(   67) !                   nptrfrstlat(jaset),nptrlstlat(jaset), and 
(   68) !                   nptrfloff=nptrfrstlat(myseta) on this processors a-set.
(   69) !                   Each split latitude has two entries in nsta(,:) which 
(   70) !                   necessitates the rather complex addressing of nsta(,:)
(   71) !                   and the overdimensioning of nsta by N_REGIONS_NS.
(   72) !     KONL        - Number of grid columns for the latitudes on a processor.
(   73) !                   Similar to nsta() in data structure.
(   74) !     LDSPLITLAT  - TRUE if latitude is split in grid point space over 
(   75) !                   two a-sets
(   76) # 77 ".D[18]/trans_inq.h"
(   77) !                FOURIER SPACE
(   78) !     KULTPP   - number of latitudes for which each a-set is calculating 
(   79) !                the FFT's.
(   80) !     KPTRLS   - pointer to first global latitude of each a-set for which
(   81) !                it performs the Fourier calculations
(   82) !     KNMENG   - associated (with NLOENG) cut-off zonal wavenumber
(   83) # 84 ".D[18]/trans_inq.h"
(   84) !                 LEGENDRE
(   85) !     PMU      - sin(Gaussian latitudes)
(   86) !     PGW      - Gaussian weights
(   87) !     PRPNM    - Legendre polynomials
(   88) !     KLEI3    - First dimension of Legendre polynomials
(   89) !     KSPOLEGL - Second dimension of Legendre polynomials
(   90) !     KPMS     - Adress for legendre polynomial for given M (NSMAX)
(   91) !     PLAPIN   - Eigen-values of the inverse Laplace operator
(   92) !     KDGLU    - Number of active points in an hemisphere for a given wavenumber "m"
(   93) # 94 ".D[18]/trans_inq.h"
(   94) !     Method.
(   95) !     -------
(   96) # 97 ".D[18]/trans_inq.h"
(   97) !     Externals.  SET_RESOL - set resolution
(   98) !     ----------  
(   99) # 100 ".D[18]/trans_inq.h"
(  100) !     Author.
(  101) !     -------
(  102) !        Mats Hamrud *ECMWF*
(  103) # 104 ".D[18]/trans_inq.h"
(  104) !     Modifications.
(  105) !     --------------
(  106) !        Original : 00-03-03
(  107) !        M. Hortal : 2001-03-05 Dimensions of the Legendre polynomials
(  108) !        R. El Khatib 08-Aug-2012 KSMAX,PLAPIN,KNVALUE,LDLAM,KDEF_RESOL
(  109) # 110 ".D[18]/trans_inq.h"
(  110) !     ------------------------------------------------------------------
(  111) # 112 ".D[18]/trans_inq.h"
(  112) USE PARKIND1  ,ONLY : JPIM     ,JPRB, JPRD
(  113) # 115 ".D[18]/trans_inq.h"
(  115) IMPLICIT NONE






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 19

(  116) # 117 ".D[18]/trans_inq.h"
(  117) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KRESOL
(  118) # 119 ".D[18]/trans_inq.h"
(  119) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSPEC
(  120) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSPEC2
(  121) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSPEC2G
(  122) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSPEC2MX
(  123) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KNUMP
(  124) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KGPTOT
(  125) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KGPTOTG
(  126) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KGPTOTMX
(  127) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KGPTOTL(:,:)
(  128) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KFRSTLOFF
(  129) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPTRFLOFF
(  130) # 131 ".D[18]/trans_inq.h"
(  131) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMYMS(:)
(  132) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KASM0(0:)
(  133) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KUMPP(:)
(  134) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPOSSP(:)
(  135) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPTRMS(:)
(  136) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KALLMS(:)
(  137) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KDIM0G(0:)
(  138) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KFRSTLAT(:)
(  139) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KLSTLAT(:)
(  140) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPTRLAT(:)
(  141) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPTRFRSTLAT(:)
(  142) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPTRLSTLAT(:)
(  143) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSTA(:,:)
(  144) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KONL(:,:)
(  145) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPRTRW
(  146) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMYSETW
(  147) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMYSETV
(  148) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMY_REGION_NS
(  149) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMY_REGION_EW
(  150) LOGICAL   ,OPTIONAL, INTENT(OUT) :: LDSPLITLAT(:)
(  151) # 152 ".D[18]/trans_inq.h"
(  152) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KULTPP(:)
(  153) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPTRLS(:)
(  154) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KNMENG(:)
(  155) # 156 ".D[18]/trans_inq.h"
(  156) REAL(KIND=JPRD)    ,OPTIONAL, INTENT(OUT) :: PMU(:)
(  157) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PGW(:)
(  158) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PRPNM(:,:)
(  159) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KLEI3
(  160) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSPOLEGL
(  161) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPMS(0:)
(  162) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KDGLU(0:)
(  163) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PLAPIN(-1:)
(  164) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSMAX
(  165) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KNVALUE(:)
(  166) # 167 ".D[18]/trans_inq.h"
(  167) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KDEF_RESOL
(  168) LOGICAL           ,OPTIONAL,INTENT(OUT)   :: LDLAM
(  169) # 170 ".D[18]/trans_inq.h"
(  170) END SUBROUTINE TRANS_INQ
(  171) # 177 ".D[18]/trans_inq.h"
(  177) END INTERFACE
(  178) # 49 "aatestproguv.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 20

(   49) # 49 "aatestproguv.F90"
(   49) # 1 ".D[18]/dist_grid.h"
(    1) INTERFACE
(    2) SUBROUTINE DIST_GRID(PGPG,KPROMA,KFDISTG,KFROM,KRESOL,PGP,KSORT)
(    3) # 4 ".D[18]/dist_grid.h"
(    4) !**** *DIST_GRID* - Distribute global gridpoint array among processors
(    5) # 6 ".D[18]/dist_grid.h"
(    6) !     Purpose.
(    7) !     --------
(    8) !        Interface routine for distributing gridpoint array
(    9) # 10 ".D[18]/dist_grid.h"
(   10) !**   Interface.
(   11) !     ----------
(   12) !     CALL DIST_GRID(...)
(   13) # 14 ".D[18]/dist_grid.h"
(   14) !     Explicit arguments : 
(   15) !     -------------------- 
(   16) !     PGPG(:,:) - Global spectral array
(   17) !     KFDISTG     - Global number of fields to be distributed
(   18) !     KPROMA      - required blocking factor for gridpoint input
(   19) !     KFROM(:)    - Processor resposible for distributing each field
(   20) !     KRESOL      - resolution tag  which is required ,default is the
(   21) !                   first defined resulution (input)
(   22) !     PGP(:,:)  - Local spectral array
(   23) !
(   24) !     Method.
(   25) !     -------
(   26) # 27 ".D[18]/dist_grid.h"
(   27) !     Externals.  SET_RESOL      - set resolution
(   28) !     ----------  DIST_GRID_CTL  - control routine
(   29) # 30 ".D[18]/dist_grid.h"
(   30) !     Author.
(   31) !     -------
(   32) !        Mats Hamrud *ECMWF*
(   33) # 34 ".D[18]/dist_grid.h"
(   34) !     Modifications.
(   35) !     --------------
(   36) !        Original : 00-03-03
(   37) # 38 ".D[18]/dist_grid.h"
(   38) !     ------------------------------------------------------------------
(   39) # 40 ".D[18]/dist_grid.h"
(   40) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   41) # 43 ".D[18]/dist_grid.h"
(   43) IMPLICIT NONE
(   44) # 45 ".D[18]/dist_grid.h"
(   45) ! Declaration of arguments
(   46) # 47 ".D[18]/dist_grid.h"
(   47) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGPG(:,:)
(   48) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KPROMA
(   49) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFDISTG
(   50) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFROM(:)
(   51) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KRESOL
(   52) REAL(KIND=JPRB)             , INTENT(OUT) :: PGP(:,:,:)
(   53) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KSORT (:)
(   54) # 56 ".D[18]/dist_grid.h"
(   56) !     ------------------------------------------------------------------
(   57) # 58 ".D[18]/dist_grid.h"
(   58) END SUBROUTINE DIST_GRID






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 21

(   59) # 60 ".D[18]/dist_grid.h"
(   60) END INTERFACE
(   61) # 50 "aatestproguv.F90"
(   50) # 50 "aatestproguv.F90"
(   50) # 1 ".D[18]/gath_grid.h"
(    1) INTERFACE
(    2) SUBROUTINE GATH_GRID(PGPG,KPROMA,KFGATHG,KTO,KRESOL,PGP)
(    3) # 4 ".D[18]/gath_grid.h"
(    4) !**** *GATH_GRID* - Gather global gridpoint array from processors
(    5) # 6 ".D[18]/gath_grid.h"
(    6) !     Purpose.
(    7) !     --------
(    8) !        Interface routine for gathering gripoint array
(    9) # 10 ".D[18]/gath_grid.h"
(   10) !**   Interface.
(   11) !     ----------
(   12) !     CALL GATH_GRID(...)
(   13) # 14 ".D[18]/gath_grid.h"
(   14) !     Explicit arguments : 
(   15) !     -------------------- 
(   16) !     PGPG(:,:)   - Global gridpoint array
(   17) !     KFGATHG     - Global number of fields to be gathered
(   18) !     KPROMA      - blocking factor for gridpoint input
(   19) !     KTO(:)      - Processor responsible for gathering each field
(   20) !     KRESOL      - resolution tag  which is required ,default is the
(   21) !                   first defined resulution (input)
(   22) !     PGP(:,:,:)  - Local spectral array
(   23) !
(   24) !     Method.
(   25) !     -------
(   26) # 27 ".D[18]/gath_grid.h"
(   27) !     Externals.  SET_RESOL   - set resolution
(   28) !     ----------  GATH_GRID_CTL -  control routine
(   29) # 30 ".D[18]/gath_grid.h"
(   30) !     Author.
(   31) !     -------
(   32) !        Mats Hamrud *ECMWF*
(   33) # 34 ".D[18]/gath_grid.h"
(   34) !     Modifications.
(   35) !     --------------
(   36) !        Original : 00-03-03
(   37) # 38 ".D[18]/gath_grid.h"
(   38) !     ------------------------------------------------------------------
(   39) # 40 ".D[18]/gath_grid.h"
(   40) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   41) # 43 ".D[18]/gath_grid.h"
(   43) IMPLICIT NONE
(   44) # 45 ".D[18]/gath_grid.h"
(   45) ! Declaration of arguments
(   46) # 47 ".D[18]/gath_grid.h"
(   47) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PGPG(:,:)
(   48) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KPROMA
(   49) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFGATHG
(   50) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KTO(:)
(   51) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KRESOL
(   52) REAL(KIND=JPRB)             , INTENT(IN)  :: PGP(:,:,:)
(   53) # 55 ".D[18]/gath_grid.h"
(   55) !     ------------------------------------------------------------------






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 22

(   56) # 57 ".D[18]/gath_grid.h"
(   57) END SUBROUTINE GATH_GRID
(   58) # 59 ".D[18]/gath_grid.h"
(   59) END INTERFACE
(   60) # 51 "aatestproguv.F90"
(   51) # 51 "aatestproguv.F90"
(   51) # 1 ".D[18]/dir_trans.h"
(    1) INTERFACE
(    2) SUBROUTINE DIR_TRANS(PSPVOR,PSPDIV,PSPSCALAR,PSPSC3A,PSPSC3B,PSPSC2,&
(    3) & LDLATLON,KPROMA,KVSETUV,KVSETSC,KRESOL,KVSETSC3A,KVSETSC3B,KVSETSC2,&
(    4) & PGP,PGPUV,PGP3A,PGP3B,PGP2)
(    5) # 7 ".D[18]/dir_trans.h"
(    7) !**** *DIR_TRANS* - Direct spectral transform (from grid-point to spectral).
(    8) # 9 ".D[18]/dir_trans.h"
(    9) !     Purpose.
(   10) !     --------
(   11) !        Interface routine for the direct spectral transform
(   12) # 13 ".D[18]/dir_trans.h"
(   13) !**   Interface.
(   14) !     ----------
(   15) !     CALL DIR_TRANS(...)
(   16) # 17 ".D[18]/dir_trans.h"
(   17) !     Explicit arguments : All arguments except from PGP are optional.
(   18) !     -------------------- 
(   19) !     PSPVOR(:,:) - spectral vorticity (output)
(   20) !     PSPDIV(:,:) - spectral divergence (output)
(   21) !     PSPSCALAR(:,:) - spectral scalarvalued fields (output)
(   22) !     PSPSC3A(:,:,:) - alternative to use of PSPSCALAR, see PGP3A below (input)
(   23) !     PSPSC3B(:,:,:) - alternative to use of PSPSCALAR, see PGP3B below (input)
(   24) !     PSPSC2(:,:)  - alternative to use of PSPSCALAR, see PGP2 below (input)
(   25) !     LDLATLON   - indicating if regular lat-lon is the input data
(   26) !     KPROMA      - required blocking factor for gridpoint output
(   27) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a 
(   28) !                   vor/div field. Equivalant to NBSETLEV in the IFS.
(   29) !                   The length of KVSETUV should be the GLOBAL number
(   30) !                   of u/v fields which is the dimension of u and v releated
(   31) !                   fields in grid-point space. 
(   32) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   33) !                   scalar field. As for KVSETUV this argument is required
(   34) !                   if the total number of processors is greater than
(   35) !                   the number of processors used for distribution in
(   36) !                   spectral wave space.  
(   37) !     KVSETSC3A(:) - as KVESETSC for PSPSC3A (distribution on first dimension)
(   38) !     KVSETSC3B(:) - as KVESETSC for PSPSC3B (distribution on first dimension)
(   39) !     KVSETSC2(:) - as KVESETSC for PSPSC2 (distribution on first dimension)
(   40) !     KRESOL   - resolution tag  which is required ,default is the
(   41) !                first defined resulution (input)
(   42) !     PGP(:,:,:) - gridpoint fields (input)
(   43) !                  PGP need to  dimensioned (NPROMA,IF_GP,NGPBLKS) where
(   44) !                  NPROMA is the blocking factor, IF_GP the total number
(   45) !                  of output fields and NGPBLKS the number of NPROMA blocks.
(   46) !                  The ordering of the output fields is as follows (all 
(   47) !                  parts are optional depending on the input switches):
(   48) !
(   49) !     u             : IF_UV_G fields (if psvor present)
(   50) !     v             : IF_UV_G fields (if psvor present)
(   51) !     scalar fields : IF_SCALARS_G fields (if pspscalar present)
(   52) !   






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 23

(   53) !     Here IF_UV_G is the GLOBAL number of u/v fields as given by the length
(   54) !     of KVSETUV (or by PSPVOR if no split in spectral 'b-set' direction
(   55) !     IF_SCALARS_G is the GLOBAL number of scalar fields as giben by the 
(   56) !     length of KVESETSC (or by number of fields in PSPSCALAR if no spectral
(   57) !     'b-set' split
(   58) # 59 ".D[18]/dir_trans.h"
(   59) !     As an alternative to using PGP you can also use a combination of the
(   60) !     following arrays. The reason for introducing these alternative ways
(   61) !     of calling DIR_TRANS is to avoid uneccessary copies where your data
(   62) !     structures don't fit in to the 'PSPVOR,PSPDIV, PSPSCALAR, PGP' layout.
(   63) !     The use of any of these precludes the use of PGP and vice versa.
(   64) # 65 ".D[18]/dir_trans.h"
(   65) !     PGPUV(:,:,:,:) - the 'u-v' related grid-point variables in the order
(   66) !                      described for PGP. The second dimension of PGPUV should
(   67) !                      be the same as the "global" first dimension of 
(   68) !                      PSPVOR,PSPDIV (in the IFS this is the number of levels)
(   69) !                      PGPUV need to be dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   70) !                      IFLDS is the number of 'variables' (u,v)
(   71) !     PGP3A(:,:,:,:) - grid-point array directly connected with PSPSC3A
(   72) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   73) !                      IFLDS is the number of 'variables' (the same as in
(   74) !                      PSPSC3A )
(   75) !     PGP3B(:,:,:,:) - grid-point array directly connected with PSPSC3B
(   76) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   77) !                      IFLDS is the number of 'variables' (the same as in
(   78) !                      PSPSC3B)
(   79) !     PGP2(:,:,:)    - grid-point array directly connected with PSPSC2
(   80) !                      dimensioned(NPROMA,IFLDS,NGPBLKS)
(   81) !                      IFLDS is the number of 'variables' (the same as in
(   82) !                      PSPSC2 )
(   83) ! 
(   84) !     Method.
(   85) !     -------
(   86) # 87 ".D[18]/dir_trans.h"
(   87) !     Externals.  SET_RESOL   - set resolution
(   88) !     ----------  LTDIR_CTL   - control of Legendre transform
(   89) !                 FTDIR_CTL   - control of Fourier transform
(   90) # 91 ".D[18]/dir_trans.h"
(   91) !     Author.
(   92) !     -------
(   93) !        Mats Hamrud *ECMWF*
(   94) # 95 ".D[18]/dir_trans.h"
(   95) !     Modifications.
(   96) !     --------------
(   97) !        Original : 00-03-03
(   98) # 99 ".D[18]/dir_trans.h"
(   99) !     ------------------------------------------------------------------
(  100) # 101 ".D[18]/dir_trans.h"
(  101) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  102) # 104 ".D[18]/dir_trans.h"
(  104) IMPLICIT NONE
(  105) # 106 ".D[18]/dir_trans.h"
(  106) ! Declaration of arguments
(  107) # 108 ".D[18]/dir_trans.h"
(  108) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPVOR(:,:)
(  109) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPDIV(:,:)
(  110) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSCALAR(:,:)
(  111) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3A(:,:,:)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 24

(  112) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3B(:,:,:)
(  113) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC2(:,:)
(  114) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KPROMA
(  115) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETUV(:)
(  116) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC(:)
(  117) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3A(:)
(  118) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3B(:)
(  119) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC2(:)
(  120) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KRESOL
(  121) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDLATLON
(  122) # 123 ".D[18]/dir_trans.h"
(  123) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP(:,:,:)
(  124) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGPUV(:,:,:,:)
(  125) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP3A(:,:,:,:)
(  126) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP3B(:,:,:,:)
(  127) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP2(:,:,:)
(  128) # 130 ".D[18]/dir_trans.h"
(  130) END SUBROUTINE DIR_TRANS
(  131) # 132 ".D[18]/dir_trans.h"
(  132) END INTERFACE
(  133) # 52 "aatestproguv.F90"
(   52) # 52 "aatestproguv.F90"
(   52) # 1 ".D[18]/inv_trans.h"
(    1) INTERFACE
(    2) SUBROUTINE INV_TRANS(PSPVOR,PSPDIV,PSPSCALAR,PSPSC3A,PSPSC3B,PSPSC2,&
(    3)  & FSPGL_PROC,&
(    4)  & LDSCDERS,LDVORGP,LDDIVGP,LDUVDER,LDLATLON,KPROMA,KVSETUV,KVSETSC,KRESOL,&
(    5)  & KVSETSC3A,KVSETSC3B,KVSETSC2,&
(    6)  & PGP,PGPUV,PGP3A,PGP3B,PGP2)
(    7) # 8 ".D[18]/inv_trans.h"
(    8) !**** *INV_TRANS* - Inverse spectral transform.
(    9) # 10 ".D[18]/inv_trans.h"
(   10) !     Purpose.
(   11) !     --------
(   12) !        Interface routine for the inverse spectral transform
(   13) # 14 ".D[18]/inv_trans.h"
(   14) !**   Interface.
(   15) !     ----------
(   16) !     CALL INV_TRANS(...)
(   17) # 18 ".D[18]/inv_trans.h"
(   18) !     Explicit arguments : All arguments are optional.
(   19) !     -------------------- 
(   20) !     PSPVOR(:,:) - spectral vorticity (input)
(   21) !     PSPDIV(:,:) - spectral divergence (input)
(   22) !     PSPSCALAR(:,:) - spectral scalarvalued fields (input)
(   23) !     PSPSC3A(:,:,:) - alternative to use of PSPSCALAR, see PGP3A below (input)
(   24) !     PSPSC3B(:,:,:) - alternative to use of PSPSCALAR, see PGP3B below (input)
(   25) !     PSPSC2(:,:)  - alternative to use of PSPSCALAR, see PGP2 below (input)
(   26) !     FSPGL_PROC  - external procedure to be executed in fourier space
(   27) !                   before transposition  
(   28) !     LDSCDERS    - indicating if derivatives of scalar variables are req.
(   29) !     LDVORGP     - indicating if grid-point vorticity is req.
(   30) !     LDDIVGP     - indicating if grid-point divergence is req.
(   31) !     LDUVDER     - indicating if E-W derivatives of u and v are req.
(   32) !     LDLATLON   - indicating if regular lat-lon output requested
(   33) !     KPROMA      - required blocking factor for gridpoint output
(   34) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a 
(   35) !                   vor/div field. Equivalant to NBSETLEV in the IFS.






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 25

(   36) !                   The length of KVSETUV should be the GLOBAL number
(   37) !                   of u/v fields which is the dimension of u and v releated
(   38) !                   fields in grid-point space. 
(   39) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   40) !                   scalar field. As for KVSETUV this argument is required
(   41) !                   if the total number of processors is greater than
(   42) !                   the number of processors used for distribution in
(   43) !                   spectral wave space.
(   44) !     KVSETSC3A(:) - as KVESETSC for PSPSC3A (distribution on first dimension)
(   45) !     KVSETSC3B(:) - as KVESETSC for PSPSC3B (distribution on first dimension)
(   46) !     KVSETSC2(:) - as KVESETSC for PSPSC2 (distribution on first dimension)
(   47) !     KRESOL   - resolution tag  which is required ,default is the
(   48) !                first defined resulution (input)
(   49) !     PGP(:,:,:) - gridpoint fields (output)
(   50) !                  PGP need to  dimensioned (NPROMA,IF_GP,NGPBLKS) where
(   51) !                  NPROMA is the blocking factor, IF_GP the total number
(   52) !                  of output fields and NGPBLKS the number of NPROMA blocks.
(   53) !                  The ordering of the output fields is as follows (all 
(   54) !                  parts are optional depending on the input switches):
(   55) !
(   56) !       vorticity     : IF_UV_G fields (if psvor present and LDVORGP)
(   57) !       divergence    : IF_UV_G fields (if psvor present and LDDIVGP)
(   58) !       u             : IF_UV_G fields (if psvor present)
(   59) !       v             : IF_UV_G fields (if psvor present)
(   60) !       scalar fields : IF_SCALARS_G fields (if pspscalar present)
(   61) !       N-S derivative of scalar fields : IF_SCALARS_G fields (if pspscalar
(   62) !                                         present and LDSCDERS)
(   63) !       E-W derivative of u : IF_UV_G fields (if psvor present and and LDUVDER)
(   64) !       E-W derivative of v : IF_UV_G fields (if psvor present and and LDUVDER)
(   65) !       E-W derivative of scalar fields : IF_SCALARS_G fields (if pspscalar
(   66) !                                         present and LDSCDERS)
(   67) !   
(   68) !       Here IF_UV_G is the GLOBAL number of u/v fields as given by the length
(   69) !       of KVSETUV (or by PSPVOR if no split in spectral 'b-set' direction
(   70) !       IF_SCALARS_G is the GLOBAL number of scalar fields as giben by the 
(   71) !       length of KVESETSC (or by number of fields in PSPSCALAR if no spectral
(   72) !       'b-set' split
(   73) # 74 ".D[18]/inv_trans.h"
(   74) !     As an alternative to using PGP you can also use a combination of the
(   75) !     following arrays. The reason for introducing these alternative ways
(   76) !     of calling INV_TRANS is to avoid uneccessary copies where your data
(   77) !     structures don't fit in to the 'PSPVOR,PSPDIV, PSPSCALAR, PGP' layout.
(   78) !     The use of any of these precludes the use of PGP and vice versa.
(   79) # 80 ".D[18]/inv_trans.h"
(   80) !     PGPUV(:,:,:,:) - the 'u-v' related grid-point variables in the order
(   81) !                      described for PGP. The second dimension of PGPUV should
(   82) !                      be the same as the "global" first dimension of 
(   83) !                      PSPVOR,PSPDIV (in the IFS this is the number of levels)
(   84) !                      PGPUV need to be dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   85) !                      IFLDS is the number of 'variables' (u,v,vor,div ...)
(   86) !     PGP3A(:,:,:,:) - grid-point array directly connected with PSPSC3A
(   87) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   88) !                      IFLDS is the number of 'variables' (the same as in
(   89) !                      PSPSC3A if no derivatives, 3 times that with der.)
(   90) !     PGP3B(:,:,:,:) - grid-point array directly connected with PSPSC3B
(   91) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   92) !                      IFLDS is the number of 'variables' (the same as in
(   93) !                      PSPSC3B if no derivatives, 3 times that with der.)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 26

(   94) !     PGP2(:,:,:)    - grid-point array directly connected with PSPSC2
(   95) !                      dimensioned(NPROMA,IFLDS,NGPBLKS)
(   96) !                      IFLDS is the number of 'variables' (the same as in
(   97) !                      PSPSC2 if no derivatives, 3 times that with der.)
(   98) !     Method.
(   99) !     -------
(  100) # 101 ".D[18]/inv_trans.h"
(  101) !     Externals.  SET_RESOL   - set resolution
(  102) !     ----------  LTINV_CTL   - control of Legendre transform
(  103) !                 FTINV_CTL   - control of Fourier transform
(  104) # 105 ".D[18]/inv_trans.h"
(  105) !     Author.
(  106) !     -------
(  107) !        Mats Hamrud *ECMWF*
(  108) # 109 ".D[18]/inv_trans.h"
(  109) !     Modifications.
(  110) !     --------------
(  111) !        Original : 00-03-03
(  112) !        26-02-03 Mats Hamrud & Gabor Radnoti : modified condition for scalar fields
(  113) !                                               and derivatives (IF_SCALARS_G)
(  114) # 115 ".D[18]/inv_trans.h"
(  115) !     ------------------------------------------------------------------
(  116) # 117 ".D[18]/inv_trans.h"
(  117) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  118) # 120 ".D[18]/inv_trans.h"
(  120) IMPLICIT NONE
(  121) # 122 ".D[18]/inv_trans.h"
(  122) ! Declaration of arguments
(  123) # 124 ".D[18]/inv_trans.h"
(  124) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPVOR(:,:)
(  125) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPDIV(:,:)
(  126) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSCALAR(:,:)
(  127) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3A(:,:,:)
(  128) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3B(:,:,:)
(  129) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC2(:,:)
(  130) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDSCDERS
(  131) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDVORGP
(  132) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDDIVGP
(  133) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDUVDER
(  134) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDLATLON
(  135) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KPROMA
(  136) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETUV(:)
(  137) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC(:)
(  138) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3A(:)
(  139) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3B(:)
(  140) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC2(:)
(  141) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KRESOL
(  142) EXTERNAL  FSPGL_PROC
(  143) OPTIONAL  FSPGL_PROC
(  144) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP(:,:,:)
(  145) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGPUV(:,:,:,:)
(  146) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3A(:,:,:,:)
(  147) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3B(:,:,:,:)
(  148) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP2(:,:,:)
(  149) # 151 ".D[18]/inv_trans.h"
(  151) END SUBROUTINE INV_TRANS
(  152) # 153 ".D[18]/inv_trans.h"
(  153) END INTERFACE






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 27

(  154) # 53 "aatestproguv.F90"
(   53) # 54 "aatestproguv.F90"
(   54) # 1 ".D[8]/esetup_trans.h"
(    1) INTERFACE
(    2) SUBROUTINE ESETUP_TRANS(KMSMAX,KSMAX,KDGL,KDGUX,KLOEN,LDSPLIT,&
(    3)  & KFLEV,KTMAX,KRESOL,PEXWN,PEYWN,PWEIGHT,LDGRIDONLY,KNOEXTZL,KNOEXTZG,&
(    4)  & LDUSEFFTW)
(    5) !**** *ESETUP_TRANS* - Setup transform package for specific resolution
(    6) # 7 ".D[8]/esetup_trans.h"
(    7) !     Purpose.
(    8) !     --------
(    9) !     To setup for making spectral transforms. Each call to this routine
(   10) !     creates a new resolution up to a maximum of NMAX_RESOL set up in
(   11) !     SETUP_TRANS0. You need to call SETUP_TRANS0 before this routine can
(   12) !     be called.
(   13) # 14 ".D[8]/esetup_trans.h"
(   14) !**   Interface.
(   15) !     ----------
(   16) !     CALL ESETUP_TRANS(...)
(   17) # 18 ".D[8]/esetup_trans.h"
(   18) !     Explicit arguments : KLOEN,LDSPLIT are optional arguments
(   19) !     -------------------- 
(   20) !     KSMAX - spectral truncation required
(   21) !     KDGL  - number of Gaussian latitudes
(   22) !     KLOEN(:) - number of points on each Gaussian latitude [2*KDGL]
(   23) !     LDSPLIT - true if split latitudes in grid-point space [false]
(   24) !     KTMAX - truncation order for tendencies?
(   25) !     KRESOL - the resolution identifier
(   26) !     KSMAX,KDGL,KTMAX and KLOEN are GLOBAL variables desribing the resolution
(   27) !     in spectral and grid-point space
(   28) !     LDGRIDONLY - true if only grid space is required
(   29) # 31 ".D[8]/esetup_trans.h"
(   31) !     LDSPLIT describe the distribution among processors of
(   32) !     grid-point data and has no relevance if you are using a single processor
(   33)  
(   34) !     LDUSEFFTW   - Use FFTW for FFTs
(   35) # 36 ".D[8]/esetup_trans.h"
(   36) !     Method.
(   37) !     -------
(   38) # 39 ".D[8]/esetup_trans.h"
(   39) !     Externals.  ESET_RESOL   - set resolution
(   40) !     ----------  ESETUP_DIMS  - setup distribution independent dimensions
(   41) !                 SUEMP_TRANS_PRELEG - first part of setup of distr. environment
(   42) !                 SULEG - Compute Legandre polonomial and Gaussian 
(   43) !                         Latitudes and Weights
(   44) !                 ESETUP_GEOM - Compute arrays related to grid-point geometry
(   45) !                 SUEMP_TRANS - Second part of setup of distributed environment
(   46) !                 SUEFFT - setup for FFT
(   47) # 48 ".D[8]/esetup_trans.h"
(   48) !     Author.
(   49) !     -------
(   50) !        Mats Hamrud *ECMWF*
(   51) # 52 ".D[8]/esetup_trans.h"
(   52) !     Modifications.
(   53) !     --------------
(   54) !        Original : 00-03-03
(   55) !        02-04-11 A. Bogatchev: Passing of TCDIS
(   56) !        02-11-14 C. Fischer: soften test on KDGL






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 28

(   57) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(   58) !        A.Nmiri       15-Nov-2007 Phasing with TFL 32R3
(   59) !        A.Bogatchev   16-Sep-2010 Phasing cy37
(   60) !        D. Degrauwe  (Feb 2012): Alternative extension zone (E')
(   61) # 62 ".D[8]/esetup_trans.h"
(   62) !     ------------------------------------------------------------------
(   63) # 64 ".D[8]/esetup_trans.h"
(   64) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   65) # 66 ".D[8]/esetup_trans.h"
(   66) IMPLICIT NONE
(   67) # 68 ".D[8]/esetup_trans.h"
(   68) ! Dummy arguments
(   69) INTEGER(KIND=JPIM),INTENT(IN)    :: KMSMAX 
(   70) INTEGER(KIND=JPIM),INTENT(IN)    :: KSMAX 
(   71) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGL 
(   72) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGUX 
(   73) INTEGER(KIND=JPIM),INTENT(IN)    :: KLOEN(:) 
(   74) LOGICAL           ,OPTIONAL,INTENT(IN)    :: LDSPLIT 
(   75) LOGICAL           ,OPTIONAL,INTENT(IN)    :: LDGRIDONLY
(   76) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KTMAX 
(   77) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KFLEV
(   78) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KRESOL 
(   79) REAL(KIND=JPRB)   ,OPTIONAL,INTENT(IN)    :: PEXWN 
(   80) REAL(KIND=JPRB)   ,OPTIONAL,INTENT(IN)    :: PEYWN 
(   81) REAL(KIND=JPRB)   ,OPTIONAL,INTENT(IN)    :: PWEIGHT(:)
(   82) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KNOEXTZL
(   83) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KNOEXTZG
(   84) LOGICAL   ,OPTIONAL,INTENT(IN)            :: LDUSEFFTW
(   85) # 86 ".D[8]/esetup_trans.h"
(   86) END SUBROUTINE ESETUP_TRANS
(   87) END INTERFACE
(   88) # 55 "aatestproguv.F90"
(   55) # 55 "aatestproguv.F90"
(   55) # 1 ".D[8]/etrans_inq.h"
(    1) INTERFACE
(    2) SUBROUTINE ETRANS_INQ(KRESOL,KSPEC,KSPEC2,KSPEC2G,KSPEC2MX,KNUMP,&
(    3)  & KGPTOT,KGPTOTG,KGPTOTMX,KGPTOTL,&
(    4)  & KMYMS,KESM0,KUMPP,KPOSSP,KPTRMS,KALLMS,KDIM0G,&
(    5)  & KFRSTLAT,KLSTLAT,KFRSTLOFF,KPTRLAT,&
(    6)  & KPTRFRSTLAT,KPTRLSTLAT,KPTRFLOFF,KSTA,KONL,&
(    7)  & KULTPP,KPTRLS,&
(    8)  & KPRTRW,KMYSETW,KMYSETV,KMY_REGION_NS,KMY_REGION_EW,&
(    9)  & LDSPLITLAT,&
(   10)  & KSMAX,KMSMAX,KNVALUE,KMVALUE,PLEPINM,KDEF_RESOL,LDLAM,&
(   11)  & PMU,PGW,PRPNM,KLEI3,KSPOLEGL,KPMS,KCPL2M,KCPL4M,KPROCM)  
(   12) # 13 ".D[8]/etrans_inq.h"
(   13) !**** *ETRANS_INQ* - Extract information from the transform package
(   14) # 15 ".D[8]/etrans_inq.h"
(   15) !     Purpose.
(   16) !     --------
(   17) !     Interface routine for extracting information from the T.P.
(   18) # 19 ".D[8]/etrans_inq.h"
(   19) !**   Interface.
(   20) !     ----------
(   21) !     CALL ETRANS_INQ(...)
(   22) !     Explicit arguments : All arguments are optional.
(   23) !     -------------------- 
(   24) !     KRESOL   - resolution tag for which info is required ,default is the






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 29

(   25) !                first defined resulution (input)
(   26) # 27 ".D[8]/etrans_inq.h"
(   27) !                   MULTI-TRANSFORMS MANAGEMENT
(   28) !     KDEF_RESOL - number or resolutions defined
(   29) !     LDLAM      - .T. if the corresponding resolution is LAM, .F. if it is global
(   30) # 31 ".D[8]/etrans_inq.h"
(   31) !                   SPECTRAL SPACE
(   32) !     KSPEC    - number of complex spectral coefficients on this PE
(   33) !     KSPEC2   - 2*KSPEC 
(   34) !     KSPEC2G  - global KSPEC2
(   35) !     KSPEC2MX - maximun KSPEC2 among all PEs
(   36) !     KNUMP    - Number of spectral waves handled by this PE
(   37) !     KGPTOT   - Total number of grid columns on this PE
(   38) !     KGPTOTG  - Total number of grid columns on the Globe
(   39) !     KGPTOTMX - Maximum number of grid columns on any of the PEs
(   40) !     KGPTOTL  - Number of grid columns one each PE (dimension N_REGIONS_NS:N_REGIONS_EW)
(   41) !     KMYMS    - This PEs spectral zonal wavenumbers
(   42) !     KESM0    - Address in a spectral array of (m, n=m)
(   43) !     KUMPP    - No. of wave numbers each wave set is responsible for
(   44) !     KPOSSP   - Defines partitioning of global spectral fields among PEs
(   45) !     KPTRMS   - Pointer to the first wave number of a given a-set
(   46) !     KALLMS   - Wave numbers for all wave-set concatenated together 
(   47) !                to give all wave numbers in wave-set order
(   48) !     KDIM0G   - Defines partitioning of global spectral fields among PEs
(   49) !     KSMAX    - spectral truncation - n direction
(   50) !     KMSMAX   - spectral truncation - m direction
(   51) !     KNVALUE  - n value for each KSPEC2 spectral coeffient
(   52) !     KMVALUE  - m value for each KSPEC2 spectral coeffient
(   53) # 54 ".D[8]/etrans_inq.h"
(   54) !                 GRIDPOINT SPACE                  
(   55) !     KFRSTLAT    - First latitude of each a-set in grid-point space
(   56) !     KLSTTLAT    - Last latitude of each a-set in grid-point space
(   57) !     KFRSTLOFF   - Offset for first lat of own a-set in grid-point space
(   58) !     KPTRLAT     - Pointer to the start of each latitude
(   59) !     KPTRFRSTLAT - Pointer to the first latitude of each a-set in 
(   60) !                   NSTA and NONL arrays
(   61) !     KPTRLSTLAT  - Pointer to the last latitude of each a-set in
(   62) !                   NSTA and NONL arrays
(   63) !     KPTRFLOFF   - Offset for pointer to the first latitude of own a-set
(   64) !                   NSTA and NONL arrays, i.e. nptrfrstlat(myseta)-1
(   65) !     KSTA        - Position of first grid column for the latitudes on a 
(   66) !                   processor. The information is available for all processors.
(   67) !                   The b-sets are distinguished by the last dimension of 
(   68) !                   nsta().The latitude band for each a-set is addressed by 
(   69) !                   nptrfrstlat(jaset),nptrlstlat(jaset), and 
(   70) !                   nptrfloff=nptrfrstlat(myseta) on this processors a-set.
(   71) !                   Each split latitude has two entries in nsta(,:) which 
(   72) !                   necessitates the rather complex addressing of nsta(,:)
(   73) !                   and the overdimensioning of nsta by N_REGIONS_NS.
(   74) !     KONL        - Number of grid columns for the latitudes on a processor.
(   75) !                   Similar to nsta() in data structure.
(   76) !     LDSPLITLAT  - TRUE if latitude is split in grid point space over 
(   77) !                   two a-sets
(   78) # 79 ".D[8]/etrans_inq.h"
(   79) !                FOURIER SPACE
(   80) !     KULTPP   - number of latitudes for which each a-set is calculating 
(   81) !                the FFT's.
(   82) !     KPTRLS   - pointer to first global latitude of each a-set for which






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 30

(   83) !                it performs the Fourier calculations
(   84) # 85 ".D[8]/etrans_inq.h"
(   85) !                 LEGENDRE
(   86) !     PMU      - sin(Gaussian latitudes)
(   87) !     PGW      - Gaussian weights
(   88) !     PRPNM    - Legendre polynomials
(   89) !     KLEI3    - First dimension of Legendre polynomials
(   90) !     KSPOLEGL - Second dimension of Legendre polynomials
(   91) !     KPMS     - Adress for legendre polynomial for given M (NSMAX)
(   92) !     PLEPINM  - Eigen-values of the inverse Laplace operator
(   93) # 94 ".D[8]/etrans_inq.h"
(   94) !     Method.
(   95) !     -------
(   96) # 97 ".D[8]/etrans_inq.h"
(   97) !     Externals.  ESET_RESOL - set resolution
(   98) !     ----------  
(   99) # 100 ".D[8]/etrans_inq.h"
(  100) !     Author.
(  101) !     -------
(  102) !        Mats Hamrud *ECMWF*
(  103) # 104 ".D[8]/etrans_inq.h"
(  104) !     Modifications.
(  105) !     --------------
(  106) !        Original : 00-03-03
(  107) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(  108) !        A.Nmiri       15-Nov-2007 Phasing with TFL 32R3
(  109) !        A.Bogatchev   16-Sep-2010 Phasing with TFL 36R4
(  110) !        R. El Khatib 08-Aug-2012 KSMAX,KMSMAX,KNVALUE,KMVALUE,PLEPINM,LDLAM,KDEF_RESOL
(  111) # 112 ".D[8]/etrans_inq.h"
(  112) !     ------------------------------------------------------------------
(  113) # 114 ".D[8]/etrans_inq.h"
(  114) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  115) # 116 ".D[8]/etrans_inq.h"
(  116) IMPLICIT NONE
(  117) # 118 ".D[8]/etrans_inq.h"
(  118) INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN)    :: KRESOL 
(  119) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KSPEC 
(  120) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KSPEC2 
(  121) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KSPEC2G 
(  122) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KSPEC2MX 
(  123) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KNUMP 
(  124) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KGPTOT 
(  125) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KGPTOTG 
(  126) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KGPTOTMX 
(  127) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KGPTOTL(:,:) 
(  128) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KMYMS(:) 
(  129) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KESM0(0:) 
(  130) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KUMPP(:) 
(  131) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPOSSP(:) 
(  132) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPTRMS(:) 
(  133) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KALLMS(:) 
(  134) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KDIM0G(0:) 
(  135) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KFRSTLAT(:) 
(  136) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KLSTLAT(:) 
(  137) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KFRSTLOFF 
(  138) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPTRLAT(:) 
(  139) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPTRFRSTLAT(:) 
(  140) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPTRLSTLAT(:) 






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 31

(  141) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPTRFLOFF 
(  142) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KSTA(:,:) 
(  143) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KONL(:,:) 
(  144) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KULTPP(:) 
(  145) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPTRLS(:) 
(  146) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KPRTRW
(  147) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMYSETW
(  148) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMYSETV
(  149) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMY_REGION_NS
(  150) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMY_REGION_EW
(  151) LOGICAL           ,OPTIONAL,INTENT(INOUT) :: LDSPLITLAT(:) 
(  152) REAL(KIND=JPRB)   ,OPTIONAL,INTENT(INOUT) :: PMU(:) 
(  153) REAL(KIND=JPRB)   ,OPTIONAL               :: PGW(:) ! Argument NOT used
(  154) REAL(KIND=JPRB)   ,OPTIONAL,INTENT(INOUT) :: PRPNM(:,:) 
(  155) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KLEI3 
(  156) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KSPOLEGL 
(  157) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPMS(0:) 
(  158) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KCPL2M(0:) 
(  159) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KCPL4M(0:) 
(  160) INTEGER(KIND=JPIM),OPTIONAL,INTENT(INOUT) :: KPROCM(0:) 
(  161) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KSMAX
(  162) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMSMAX
(  163) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KNVALUE(:)
(  164) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KMVALUE(:)
(  165) REAL(KIND=JPRB)   ,OPTIONAL,INTENT(OUT) :: PLEPINM(:)
(  166) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(OUT) :: KDEF_RESOL
(  167) LOGICAL           ,OPTIONAL,INTENT(OUT)   :: LDLAM
(  168) # 169 ".D[8]/etrans_inq.h"
(  169) END SUBROUTINE ETRANS_INQ
(  170) END INTERFACE
(  171) # 56 "aatestproguv.F90"
(   56) # 56 "aatestproguv.F90"
(   56) # 1 ".D[8]/edist_grid.h"
(    1) INTERFACE
(    2) SUBROUTINE EDIST_GRID(PGPG,KPROMA,KFDISTG,KFROM,KRESOL,PGP,KSORT)
(    3) # 4 ".D[8]/edist_grid.h"
(    4) !**** *EDIST_GRID* - Distribute global gridpoint array among processors
(    5) # 6 ".D[8]/edist_grid.h"
(    6) !     Purpose.
(    7) !     --------
(    8) !        Interface routine for distributing gridpoint array
(    9) # 10 ".D[8]/edist_grid.h"
(   10) !**   Interface.
(   11) !     ----------
(   12) !     CALL EDIST_GRID(...)
(   13) # 14 ".D[8]/edist_grid.h"
(   14) !     Explicit arguments : 
(   15) !     -------------------- 
(   16) !     PGPG(:,:) - Global spectral array
(   17) !     KFDISTG     - Global number of fields to be distributed
(   18) !     KPROMA      - required blocking factor for gridpoint input
(   19) !     KFROM(:)    - Processor resposible for distributing each field
(   20) !     KRESOL      - resolution tag  which is required ,default is the
(   21) !                   first defined resulution (input)
(   22) !     PGP(:,:)  - Local spectral array
(   23) !
(   24) !     Method.
(   25) !     -------






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 32

(   26) # 27 ".D[8]/edist_grid.h"
(   27) !     Externals.  ESET_RESOL      - set resolution
(   28) !     ----------  DIST_GRID_CTL  - control routine
(   29) # 30 ".D[8]/edist_grid.h"
(   30) !     Author.
(   31) !     -------
(   32) !        Mats Hamrud *ECMWF*
(   33) # 34 ".D[8]/edist_grid.h"
(   34) !     Modifications.
(   35) !     --------------
(   36) !        Original : 00-03-03
(   37) # 38 ".D[8]/edist_grid.h"
(   38) !     ------------------------------------------------------------------
(   39) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   40) # 41 ".D[8]/edist_grid.h"
(   41) IMPLICIT NONE
(   42) # 43 ".D[8]/edist_grid.h"
(   43) ! Declaration of arguments
(   44) # 45 ".D[8]/edist_grid.h"
(   45) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN)  :: PGPG(:,:)
(   46) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KPROMA
(   47) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFDISTG
(   48) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFROM(:)
(   49) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KRESOL
(   50) REAL(KIND=JPRB)             , INTENT(OUT) :: PGP(:,:,:)
(   51) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KSORT (:)
(   52) # 54 ".D[8]/edist_grid.h"
(   54) !     ------------------------------------------------------------------
(   55) # 56 ".D[8]/edist_grid.h"
(   56) END SUBROUTINE EDIST_GRID
(   57) END INTERFACE
(   58) # 57 "aatestproguv.F90"
(   57) # 57 "aatestproguv.F90"
(   57) # 1 ".D[8]/egath_grid.h"
(    1) INTERFACE
(    2) SUBROUTINE EGATH_GRID(PGPG,KPROMA,KFGATHG,KTO,KRESOL,PGP)
(    3) # 4 ".D[8]/egath_grid.h"
(    4) !**** *EGATH_GRID* - Gather global gridpoint array from processors
(    5) # 6 ".D[8]/egath_grid.h"
(    6) !     Purpose.
(    7) !     --------
(    8) !        Interface routine for gathering gripoint array
(    9) # 10 ".D[8]/egath_grid.h"
(   10) !**   Interface.
(   11) !     ----------
(   12) !     CALL EGATH_GRID(...)
(   13) # 14 ".D[8]/egath_grid.h"
(   14) !     Explicit arguments : 
(   15) !     -------------------- 
(   16) !     PGPG(:,:)   - Global gridpoint array
(   17) !     KFGATHG     - Global number of fields to be gathered
(   18) !     KPROMA      - blocking factor for gridpoint input
(   19) !     KTO(:)      - Processor responsible for gathering each field
(   20) !     KRESOL      - resolution tag  which is required ,default is the
(   21) !                   first defined resulution (input)
(   22) !     PGP(:,:,:)  - Local spectral array
(   23) !
(   24) !     Method.






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 33

(   25) !     -------
(   26) # 27 ".D[8]/egath_grid.h"
(   27) !     Externals.  ESET_RESOL   - set resolution
(   28) !     ----------  GATH_GRID_CTL -  control routine
(   29) # 30 ".D[8]/egath_grid.h"
(   30) !     Author.
(   31) !     -------
(   32) !        Mats Hamrud *ECMWF*
(   33) # 34 ".D[8]/egath_grid.h"
(   34) !     Modifications.
(   35) !     --------------
(   36) !        Original : 00-03-03
(   37) # 38 ".D[8]/egath_grid.h"
(   38) !     ------------------------------------------------------------------
(   39) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   40) # 41 ".D[8]/egath_grid.h"
(   41) IMPLICIT NONE
(   42) # 43 ".D[8]/egath_grid.h"
(   43) ! Declaration of arguments
(   44) # 45 ".D[8]/egath_grid.h"
(   45) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PGPG(:,:)
(   46) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KPROMA
(   47) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KFGATHG
(   48) INTEGER(KIND=JPIM)          , INTENT(IN)  :: KTO(:)
(   49) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN)  :: KRESOL
(   50) REAL(KIND=JPRB)             , INTENT(IN)  :: PGP(:,:,:)
(   51) # 53 ".D[8]/egath_grid.h"
(   53) !     ------------------------------------------------------------------
(   54) # 55 ".D[8]/egath_grid.h"
(   55) END SUBROUTINE EGATH_GRID
(   56) END INTERFACE
(   57) # 58 "aatestproguv.F90"
(   58) # 58 "aatestproguv.F90"
(   58) # 1 ".D[8]/edir_trans.h"
(    1) INTERFACE
(    2) SUBROUTINE EDIR_TRANS(PSPVOR,PSPDIV,PSPSCALAR,PSPSC3A,PSPSC3B,PSPSC2,&
(    3) & KPROMA,KVSETUV,KVSETSC,KRESOL,KVSETSC3A,KVSETSC3B,KVSETSC2,&
(    4) & PGP,PGPUV,PGP3A,PGP3B,PGP2,PMEANU,PMEANV,AUX_PROC)
(    5) # 7 ".D[8]/edir_trans.h"
(    7) !**** *EDIR_TRANS* - Direct spectral transform (from grid-point to spectral).
(    8) # 9 ".D[8]/edir_trans.h"
(    9) !     Purpose.
(   10) !     --------
(   11) !        Interface routine for the direct spectral transform
(   12) # 13 ".D[8]/edir_trans.h"
(   13) !**   Interface.
(   14) !     ----------
(   15) !     CALL EDIR_TRANS(...)
(   16) # 17 ".D[8]/edir_trans.h"
(   17) !     Explicit arguments : All arguments except from PGP are optional.
(   18) !     --------------------
(   19) !     PSPVOR(:,:) - spectral vorticity (output)
(   20) !     PSPDIV(:,:) - spectral divergence (output)
(   21) !     PSPSCALAR(:,:) - spectral scalarvalued fields (output)
(   22) !     PSPSC3A(:,:,:) - alternative to use of PSPSCALAR, see PGP3A below (input)
(   23) !     PSPSC3B(:,:,:) - alternative to use of PSPSCALAR, see PGP3B below (input)
(   24) !     PSPSC2(:,:)  - alternative to use of PSPSCALAR, see PGP2 below (input)
(   25) !     KPROMA      - required blocking factor for gridpoint output






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 34

(   26) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a
(   27) !                   vor/div field. Equivalant to NBSETLEV in the IFS.
(   28) !                   The length of KVSETUV should be the GLOBAL number
(   29) !                   of u/v fields which is the dimension of u and v releated
(   30) !                   fields in grid-point space.
(   31) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   32) !                   scalar field. As for KVSETUV this argument is required
(   33) !                   if the total number of processors is greater than
(   34) !                   the number of processors used for distribution in
(   35) !                   spectral wave space.
(   36) !     KVSETSC3A(:) - as KVESETSC for PSPSC3A (distribution on first dimension)
(   37) !     KVSETSC3B(:) - as KVESETSC for PSPSC3B (distribution on first dimension)
(   38) !     KVSETSC2(:) - as KVESETSC for PSPSC2 (distribution on first dimension)
(   39) !     KRESOL   - resolution tag  which is required ,default is the
(   40) !                first defined resulution (input)
(   41) !     PGP(:,:,:) - gridpoint fields (input)
(   42) !                  PGP need to  dimensioned (NPROMA,IF_GP,NGPBLKS) where
(   43) !                  NPROMA is the blocking factor, IF_GP the total number
(   44) !                  of output fields and NGPBLKS the number of NPROMA blocks.
(   45) !                  The ordering of the output fields is as follows (all
(   46) !                  parts are optional depending on the input switches):
(   47) !
(   48) !     u             : IF_UV_G fields (if psvor present)
(   49) !     v             : IF_UV_G fields (if psvor present)
(   50) !     scalar fields : IF_SCALARS_G fields (if pspscalar present)
(   51) !
(   52) !     Here IF_UV_G is the GLOBAL number of u/v fields as given by the length
(   53) !     of KVSETUV (or by PSPVOR if no split in spectral 'b-set' direction
(   54) !     IF_SCALARS_G is the GLOBAL number of scalar fields as giben by the
(   55) !     length of KVESETSC (or by number of fields in PSPSCALAR if no spectral
(   56) !     'b-set' split
(   57) # 58 ".D[8]/edir_trans.h"
(   58) !     As an alternative to using PGP you can also use a combination of the
(   59) !     following arrays. The reason for introducing these alternative ways
(   60) !     of calling DIR_TRANS is to avoid uneccessary copies where your data
(   61) !     structures don't fit in to the 'PSPVOR,PSPDIV, PSPSCALAR, PGP' layout.
(   62) !     The use of any of these precludes the use of PGP and vice versa.
(   63) # 64 ".D[8]/edir_trans.h"
(   64) !     PGPUV(:,:,:,:) - the 'u-v' related grid-point variables in the order
(   65) !                      described for PGP. The second dimension of PGPUV should
(   66) !                      be the same as the "global" first dimension of
(   67) !                      PSPVOR,PSPDIV (in the IFS this is the number of levels)
(   68) !                      PGPUV need to be dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   69) !                      IFLDS is the number of 'variables' (u,v)
(   70) !     PGP3A(:,:,:,:) - grid-point array directly connected with PSPSC3A
(   71) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   72) !                      IFLDS is the number of 'variables' (the same as in
(   73) !                      PSPSC3A )
(   74) !     PGP3B(:,:,:,:) - grid-point array directly connected with PSPSC3B
(   75) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   76) !                      IFLDS is the number of 'variables' (the same as in
(   77) !                      PSPSC3B)
(   78) !     PGP2(:,:,:)    - grid-point array directly connected with PSPSC2
(   79) !                      dimensioned(NPROMA,IFLDS,NGPBLKS)
(   80) !                      IFLDS is the number of 'variables' (the same as in
(   81) !                      PSPSC2 )
(   82) !     PMEANU(:),PMEANV(:) - mean wind
(   83) !     AUX_PROC       - optional external procedure for biperiodization of






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 35

(   84) !                      aux.fields
(   85) # 86 ".D[8]/edir_trans.h"
(   86) !     Method.
(   87) !     -------
(   88) # 89 ".D[8]/edir_trans.h"
(   89) !     Externals.  SET_RESOL   - set resolution
(   90) !     ----------  LTDIR_CTL   - control of Legendre transform
(   91) !                 FTDIR_CTL   - control of Fourier transform
(   92) # 93 ".D[8]/edir_trans.h"
(   93) !     Author.
(   94) !     -------
(   95) !        Mats Hamrud *ECMWF*
(   96) # 97 ".D[8]/edir_trans.h"
(   97) !     Modifications.
(   98) !     --------------
(   99) !        Original : 00-03-03
(  100) # 101 ".D[8]/edir_trans.h"
(  101) !     ------------------------------------------------------------------
(  102) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  103) # 104 ".D[8]/edir_trans.h"
(  104) IMPLICIT NONE
(  105) # 106 ".D[8]/edir_trans.h"
(  106) ! Declaration of arguments
(  107) # 108 ".D[8]/edir_trans.h"
(  108) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPVOR(:,:)
(  109) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPDIV(:,:)
(  110) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSCALAR(:,:)
(  111) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3A(:,:,:)
(  112) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC3B(:,:,:)
(  113) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(OUT) :: PSPSC2(:,:)
(  114) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KPROMA
(  115) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETUV(:)
(  116) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC(:)
(  117) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3A(:)
(  118) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3B(:)
(  119) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC2(:)
(  120) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KRESOL
(  121) # 122 ".D[8]/edir_trans.h"
(  122) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP(:,:,:)
(  123) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGPUV(:,:,:,:)
(  124) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP3A(:,:,:,:)
(  125) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP3B(:,:,:,:)
(  126) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN) :: PGP2(:,:,:)
(  127) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PMEANU(:)
(  128) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PMEANV(:)
(  129) EXTERNAL AUX_PROC
(  130) OPTIONAL AUX_PROC
(  131) # 133 ".D[8]/edir_trans.h"
(  133) END SUBROUTINE EDIR_TRANS
(  134) # 135 ".D[8]/edir_trans.h"
(  135) END INTERFACE
(  136) # 59 "aatestproguv.F90"
(   59) # 59 "aatestproguv.F90"
(   59) # 1 ".D[8]/einv_trans.h"
(    1) INTERFACE
(    2) SUBROUTINE EINV_TRANS(PSPVOR,PSPDIV,PSPSCALAR,PSPSC3A,PSPSC3B,PSPSC2,&
(    3)  & FSPGL_PROC,&
(    4)  & LDSCDERS,LDVORGP,LDDIVGP,LDUVDER,KPROMA,KVSETUV,KVSETSC,KRESOL,&






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 36

(    5)  & KVSETSC3A,KVSETSC3B,KVSETSC2,&
(    6)  & PGP,PGPUV,PGP3A,PGP3B,PGP2,PMEANU,PMEANV)
(    7) # 8 ".D[8]/einv_trans.h"
(    8) !**** *EINV_TRANS* - Inverse spectral transform.
(    9) # 10 ".D[8]/einv_trans.h"
(   10) !     Purpose.
(   11) !     --------
(   12) !        Interface routine for the inverse spectral transform
(   13) # 14 ".D[8]/einv_trans.h"
(   14) !**   Interface.
(   15) !     ----------
(   16) !     CALL EINV_TRANS(...)
(   17) # 18 ".D[8]/einv_trans.h"
(   18) !     Explicit arguments : All arguments are optional.
(   19) !     --------------------
(   20) !     PSPVOR(:,:) - spectral vorticity (input)
(   21) !     PSPDIV(:,:) - spectral divergence (input)
(   22) !     PSPSCALAR(:,:) - spectral scalarvalued fields (input)
(   23) !     PSPSC3A(:,:,:) - alternative to use of PSPSCALAR, see PGP3A below (input)
(   24) !     PSPSC3B(:,:,:) - alternative to use of PSPSCALAR, see PGP3B below (input)
(   25) !     PSPSC2(:,:)  - alternative to use of PSPSCALAR, see PGP2 below (input)
(   26) !     FSPGL_PROC  - external procedure to be executed in fourier space
(   27) !                   before transposition
(   28) !     LDSCDERS    - indicating if derivatives of scalar variables are req.
(   29) !     LDVORGP     - indicating if grid-point vorticity is req.
(   30) !     LDDIVGP     - indicating if grid-point divergence is req.
(   31) !     LDUVDER     - indicating if E-W derivatives of u and v are req.
(   32) !     KPROMA      - required blocking factor for gridpoint output
(   33) !     KVSETUV(:)  - indicating which 'b-set' in spectral space owns a
(   34) !                   vor/div field. Equivalant to NBSETLEV in the IFS.
(   35) !                   The length of KVSETUV should be the GLOBAL number
(   36) !                   of u/v fields which is the dimension of u and v releated
(   37) !                   fields in grid-point space.
(   38) !     KVESETSC(:) - indicating which 'b-set' in spectral space owns a
(   39) !                   scalar field. As for KVSETUV this argument is required
(   40) !                   if the total number of processors is greater than
(   41) !                   the number of processors used for distribution in
(   42) !                   spectral wave space.
(   43) !     KVSETSC3A(:) - as KVESETSC for PSPSC3A (distribution on first dimension)
(   44) !     KVSETSC3B(:) - as KVESETSC for PSPSC3B (distribution on first dimension)
(   45) !     KVSETSC2(:) - as KVESETSC for PSPSC2 (distribution on first dimension)
(   46) !     KRESOL   - resolution tag  which is required ,default is the
(   47) !                first defined resulution (input)
(   48) !     PGP(:,:,:) - gridpoint fields (output)
(   49) !                  PGP need to  dimensioned (NPROMA,IF_GP,NGPBLKS) where
(   50) !                  NPROMA is the blocking factor, IF_GP the total number
(   51) !                  of output fields and NGPBLKS the number of NPROMA blocks.
(   52) !                  The ordering of the output fields is as follows (all
(   53) !                  parts are optional depending on the input switches):
(   54) !
(   55) !       vorticity     : IF_UV_G fields (if psvor present and LDVORGP)
(   56) !       divergence    : IF_UV_G fields (if psvor present and LDDIVGP)
(   57) !       u             : IF_UV_G fields (if psvor present)
(   58) !       v             : IF_UV_G fields (if psvor present)
(   59) !       scalar fields : IF_SCALARS_G fields (if pspscalar present)
(   60) !       N-S derivative of scalar fields : IF_SCALARS_G fields (if pspscalar
(   61) !                                         present and LDSCDERS)
(   62) !       E-W derivative of u : IF_UV_G fields (if psvor present and and LDUVDER)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 37

(   63) !       E-W derivative of v : IF_UV_G fields (if psvor present and and LDUVDER)
(   64) !       E-W derivative of scalar fields : IF_SCALARS_G fields (if pspscalar
(   65) !                                         present and LDSCDERS)
(   66) !
(   67) !       Here IF_UV_G is the GLOBAL number of u/v fields as given by the length
(   68) !       of KVSETUV (or by PSPVOR if no split in spectral 'b-set' direction
(   69) !       IF_SCALARS_G is the GLOBAL number of scalar fields as giben by the
(   70) !       length of KVESETSC (or by number of fields in PSPSCALAR if no spectral
(   71) !       'b-set' split
(   72) # 73 ".D[8]/einv_trans.h"
(   73) !     As an alternative to using PGP you can also use a combination of the
(   74) !     following arrays. The reason for introducing these alternative ways
(   75) !     of calling INV_TRANS is to avoid uneccessary copies where your data
(   76) !     structures don't fit in to the 'PSPVOR,PSPDIV, PSPSCALAR, PGP' layout.
(   77) !     The use of any of these precludes the use of PGP and vice versa.
(   78) # 79 ".D[8]/einv_trans.h"
(   79) !     PGPUV(:,:,:,:) - the 'u-v' related grid-point variables in the order
(   80) !                      described for PGP. The second dimension of PGPUV should
(   81) !                      be the same as the "global" first dimension of
(   82) !                      PSPVOR,PSPDIV (in the IFS this is the number of levels)
(   83) !                      PGPUV need to be dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   84) !                      IFLDS is the number of 'variables' (u,v,vor,div ...)
(   85) !     PGP3A(:,:,:,:) - grid-point array directly connected with PSPSC3A
(   86) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   87) !                      IFLDS is the number of 'variables' (the same as in
(   88) !                      PSPSC3A if no derivatives, 3 times that with der.)
(   89) !     PGP3B(:,:,:,:) - grid-point array directly connected with PSPSC3B
(   90) !                      dimensioned(NPROMA,ILEVS,IFLDS,NGPBLKS)
(   91) !                      IFLDS is the number of 'variables' (the same as in
(   92) !                      PSPSC3B if no derivatives, 3 times that with der.)
(   93) !     PGP2(:,:,:)    - grid-point array directly connected with PSPSC2
(   94) !                      dimensioned(NPROMA,IFLDS,NGPBLKS)
(   95) !                      IFLDS is the number of 'variables' (the same as in
(   96) !                      PSPSC2 if no derivatives, 3 times that with der.)
(   97) !     Method.
(   98) !     -------
(   99) # 100 ".D[8]/einv_trans.h"
(  100) !     Externals.  ESET_RESOL   - set resolution
(  101) !     ----------  ELTINV_CTL   - control of Legendre transform
(  102) !                 EFTINV_CTL   - control of Fourier transform
(  103) # 104 ".D[8]/einv_trans.h"
(  104) !     Author.
(  105) !     -------
(  106) !        Mats Hamrud *ECMWF*
(  107) # 108 ".D[8]/einv_trans.h"
(  108) !     Modifications.
(  109) !     --------------
(  110) !        Original : 00-03-03
(  111) !        26-02-03 Mats Hamrud & Gabor Radnoti : modified condition for scalar fields
(  112) !                                               and derivatives (IF_SCALARS_G)
(  113) # 114 ".D[8]/einv_trans.h"
(  114) !     ------------------------------------------------------------------
(  115) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  116) # 117 ".D[8]/einv_trans.h"
(  117) IMPLICIT NONE
(  118) # 119 ".D[8]/einv_trans.h"
(  119) ! Declaration of arguments
(  120) # 121 ".D[8]/einv_trans.h"






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 38

(  121) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPVOR(:,:)
(  122) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPDIV(:,:)
(  123) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSCALAR(:,:)
(  124) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3A(:,:,:)
(  125) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC3B(:,:,:)
(  126) REAL(KIND=JPRB)    ,OPTIONAL, INTENT(IN) :: PSPSC2(:,:)
(  127) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDSCDERS
(  128) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDVORGP
(  129) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDDIVGP
(  130) LOGICAL   ,OPTIONAL, INTENT(IN) :: LDUVDER
(  131) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KPROMA
(  132) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETUV(:)
(  133) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC(:)
(  134) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3A(:)
(  135) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC3B(:)
(  136) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KVSETSC2(:)
(  137) INTEGER(KIND=JPIM) ,OPTIONAL, INTENT(IN) :: KRESOL
(  138) EXTERNAL  FSPGL_PROC
(  139) OPTIONAL  FSPGL_PROC
(  140) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP(:,:,:)
(  141) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGPUV(:,:,:,:)
(  142) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3A(:,:,:,:)
(  143) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP3B(:,:,:,:)
(  144) REAL(KIND=JPRB),OPTIONAL    ,INTENT(OUT) :: PGP2(:,:,:)
(  145) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN)  :: PMEANU(:)
(  146) REAL(KIND=JPRB),OPTIONAL    ,INTENT(IN)  :: PMEANV(:)
(  147) # 149 ".D[8]/einv_trans.h"
(  149) END SUBROUTINE EINV_TRANS
(  150) # 151 ".D[8]/einv_trans.h"
(  151) END INTERFACE
(  152) # 60 "aatestproguv.F90"
(   60) # 61 "aatestproguv.F90"
(   61) # 1 ".D[17]/abor1.intfb.h"
(    1) INTERFACE
(    2) # 3 ".D[17]/abor1.intfb.h"
(    3) SUBROUTINE ABOR1(CDTEXT)
(    4) CHARACTER(LEN=*), INTENT(IN) :: CDTEXT
(    5) END SUBROUTINE ABOR1
(    6) # 7 ".D[17]/abor1.intfb.h"
(    7) SUBROUTINE ABOR1FL(CDFILE, KLINENUM, CDTEXT)
(    8) USE PARKIND1  ,ONLY : JPIM
(    9) CHARACTER(LEN=*), INTENT(IN) :: CDFILE,CDTEXT
(   10) INTEGER(KIND=JPIM), INTENT(IN) :: KLINENUM
(   11) END SUBROUTINE ABOR1FL
(   12) # 13 ".D[17]/abor1.intfb.h"
(   13) SUBROUTINE ABOR1_EXCEPTION_HANDLER()
(   14) END SUBROUTINE ABOR1_EXCEPTION_HANDLER
(   15) # 16 ".D[17]/abor1.intfb.h"
(   16) END INTERFACE
(   17) # 62 "aatestproguv.F90"
(   62) # 63 "aatestproguv.F90"
(   63) NAMELIST / NAMAATESTPROG / & 
(   64)   & NFLDUA, NFLDSU, NMSMAX, NSMAX, NDGLG, NFLEVG, LDEBUG, NDLON, NPRINTLEV, NTIME, LELAM
(   65) # 66 "aatestproguv.F90"
(   66) NAMELIST / NAMTRANS / & 
(   67)   & LUSEFLT, LUSERPNM, LKEEPRPNM
(   68) # 69 "aatestproguv.F90"
(   69) NAMELIST / NAMPAR0 / & 






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 39

(   70)   & NPRGPNS, NPRGPEW, NPRTRW, NPRTRV
(   71) # 72 "aatestproguv.F90"
(   72) NAMELIST / NAMPAR1 / & 
(   73)   & LEQ_REGIONS, LSPLIT
(   74) # 75 "aatestproguv.F90"
(   75) NAMELIST / NAMRGRI / & 
(   76)   & NRGRI
(   77) # 78 "aatestproguv.F90"
(   78) CHARACTER (LEN=64) :: CLNAMELIST, CLFIELDU, CLFIELDV
(   79) LOGICAL :: LLMPOFF, LLNOWRITE
(   80) # 81 "aatestproguv.F90"
(   81) REAL (KIND=JPRB) :: ZHOOK_HANDLE
(   82) # 83 "aatestproguv.F90"
(   83) CALL INITOPTIONS ()
(   84) CLNAMELIST = 'fort.4'
(   85) CALL GETOPTION ("--namelist", CLNAMELIST)
(   86) CALL GETOPTION ("--lmpoff", LLMPOFF)
(   87) NTIME     = 10
(   88) CALL GETOPTION ("--time", NTIME)
(   89) CLFIELDU = ''; CALL GETOPTION ("--u-file", CLFIELDU)
(   90) CLFIELDV = ''; CALL GETOPTION ("--v-file", CLFIELDV)
(   91) CALL GETOPTION ("--no-write", LLNOWRITE)
(   92) CALL CHECKOPTIONS ()
(   93) # 95 "aatestproguv.F90"
(   95) LLHOOK = LHOOK
(   96) LHOOK = .FALSE.
(   97) # 98 "aatestproguv.F90"
(   98) OPEN (4, FILE=TRIM (CLNAMELIST), FORM='FORMATTED')
(   99) # 100 "aatestproguv.F90"
(  100) LELAM     = .FALSE.
(  101) NFLDUA    = 1
(  102) NFLDSU    = 0
(  103) NPRINTLEV = 0
(  104) NSMAX     = 0
(  105) NMSMAX    = 0
(  106) NDGLG     = 0
(  107) NFLEVG    = 19
(  108) LDEBUG    = .FALSE.
(  109) # 110 "aatestproguv.F90"
(  110) CALL POSNAM (4, 'NAMAATESTPROG')
(  111) READ (4, NAMAATESTPROG)
(  112) # 113 "aatestproguv.F90"
(  113) IF ((NSMAX == 0) .OR. (NDGLG == 0)) THEN
(  114)   CALL ABOR1 ('DWARF: NSMAX AND NDGLG ARE REQUIRED')
(  115) ENDIF
(  116) # 117 "aatestproguv.F90"
(  117) NPRGPNS = 0 
(  118) NPRGPEW = 0 
(  119) NPRTRW  = 0 
(  120) NPRTRV  = 0 
(  121) # 122 "aatestproguv.F90"
(  122) CALL POSNAM (4, 'NAMPAR0')
(  123) READ (4, NAMPAR0)
(  124) # 125 "aatestproguv.F90"
(  125) LUSEFLT   = NSMAX > 1280
(  126) LUSERPNM  = .NOT.LUSEFLT
(  127) LKEEPRPNM = .NOT.LUSEFLT
(  128) # 129 "aatestproguv.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 40

(  129) CALL POSNAM (4, 'NAMTRANS')
(  130) READ (4, NAMTRANS)
(  131) # 132 "aatestproguv.F90"
(  132) LEQ_REGIONS = .NOT. LELAM
(  133) LSPLIT      = .TRUE.
(  134) # 136 "aatestproguv.F90"
(  136) CALL POSNAM (4, 'NAMPAR1')
(  137) READ (4, NAMPAR1)
(  138) # 139 "aatestproguv.F90"
(  139) IF (LELAM) THEN
(  140)   NRGRI = NDLON
(  141) ELSE
(  142)   NRGRI = 0
(  143) ENDIF
(  144) # 145 "aatestproguv.F90"
(  145) CALL POSNAM (4, 'NAMRGRI')
(  146) READ (4, NAMRGRI)
(  147) # 148 "aatestproguv.F90"
(  148) CLOSE (4)
(  149) # 150 "aatestproguv.F90"
(  150) ALLOCATE (NLOEN (NDGLG))
(  151) NLOEN (1:NDGLG) = NRGRI (1:NDGLG)
(  152) # 153 "aatestproguv.F90"
(  153) IF (.NOT. LELAM) THEN
(  154)   IF (ANY (NLOEN (NDGLG/2+1:NDGLG) == 0)) THEN
(  155)     NLOEN (NDGLG/2+1:NDGLG) = NLOEN (NDGLG/2:1:-1)
(  156)   ENDIF
(  157)   IF (ANY (NLOEN (NDGLG/2:1:-1) /= NLOEN (NDGLG/2+1:NDGLG))) THEn
(  158)     CALL ABOR1 ('UNEXPECTED NLOEN')
(  159)   ENDIF
(  160) ENDIF
(  161) # 162 "aatestproguv.F90"
(  162) IF (LLMPOFF) THEN
(  163)   MYPROC = 1
(  164)   NPROC  = 1
(  165) ELSE
(  166)   CALL MPL_INIT 
(  167)   MYPROC = MPL_MYRANK()
(  168)   NPROC  = MPL_NPROC ()
(  169) ENDIF
(  170) # 171 "aatestproguv.F90"
(  171) ! GPU binding
(  172) # 173 "aatestproguv.F90"
(  173) CALL GPU_BIND (MYPROC-1, NPROC)
(  174) # 175 "aatestproguv.F90"
(  175) CALL SQUARE (NPROC, IB, IA)
(  176) # 177 "aatestproguv.F90"
(  177) IF (NPRGPNS == 0 .AND. NPRGPEW == 0) THEN
(  178)   NPRGPNS = IA
(  179)   NPRGPEW = IB
(  180) ENDIF
(  181) # 182 "aatestproguv.F90"
(  182) IF (NPRTRW == 0 .AND. NPRTRV == 0) THEN
(  183)   NPRTRW = IA
(  184)   NPRTRV = IB
(  185) ENDIF
(  186) # 187 "aatestproguv.F90"
(  187) NBSETSP = MIN (NFLEVG+1, NPRTRV)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 41

(  188) # 189 "aatestproguv.F90"
(  189) IF (MYPROC == 1) THEN
(  190) # 191 "aatestproguv.F90"
(  191)   WRITE (0, *) " NPROC = ", NPROC, " NTIME = ", NTIME, " LELAM = ", LELAM
(  192)   WRITE (0, *) " NFLDUA = ", NFLDUA, " NFLDSU = ", NFLDSU, " NFLEVG = ", NFLEVG
(  193)   WRITE (0, *) " NPRGPNS = ", NPRGPNS, " NPRGPEW = ", NPRGPEW
(  194)   WRITE (0, *) " NPRTRW = ", NPRTRW, " NPRTRV = ", NPRTRV
(  195)   WRITE (0, *) " LEQ_REGIONS = ", LEQ_REGIONS, " LSPLIT = ", LSPLIT
(  196)   WRITE (0, *) " NSMAX = ", NSMAX, " NDGLG = ", NDGLG
(  197) # 198 "aatestproguv.F90"
(  198) ENDIF
(  199) # 200 "aatestproguv.F90"
(  200) MYSETV = MOD (MYPROC-1, NPRTRV) + 1
(  201) MYSETW = (MYPROC-1) / NPRTRV + 1
(  202) # 204 "aatestproguv.F90"
(  204) CALL SETUP_TRANS0 (KOUT=0, KERR=0, KPRINTLEV=NPRINTLEV, KMAX_RESOL=2,   &
(  205)                  & KPRGPNS=NPRGPNS, KPRGPEW=NPRGPEW, KPRTRW=NPRTRW,     &
(  206)                  & LDEQ_REGIONS=LEQ_REGIONS, LDMPOFF=LLMPOFF)
(  207) IF (LELAM) THEN
(  208)   CALL ESETUP_TRANS (KSMAX=NSMAX, KMSMAX=NMSMAX, KDGL=NDGLG, KDGUX=NDGLG, KLOEN=NLOEN, &
(  209)                    & LDSPLIT=LSPLIT, KFLEV=NFLEVG, PEXWN=1._JPRB, PEYWN=1._JPRB)
(  210)   CALL ETRANS_INQ (KSPEC2=NSPEC2, KGPTOT=NGPTOT, KSPEC2G=NSPEC2G, KGPTOTG=NGPTOTG)
(  211) ELSE
(  212)   CALL SETUP_TRANS (KSMAX=NSMAX, KDGL=NDGLG, KLOEN=NLOEN, LDSPLIT=LSPLIT, KFLEV=NFLEVG, &
(  213)                   & LDUSEFLT=LUSEFLT,LDUSERPNM=LUSERPNM, LDKEEPRPNM=LKEEPRPNM)
(  214)   CALL TRANS_INQ (KSPEC2=NSPEC2, KGPTOT=NGPTOT, KSPEC2G=NSPEC2G, KGPTOTG=NGPTOTG)
(  215) ENDIF
(  216) # 217 "aatestproguv.F90"
(  217) ALLOCATE (NBSETLEV (NFLEVG))
(  218) # 219 "aatestproguv.F90"
(  219) DO ILEVG = 1, NFLEVG
(  220)   NBSETLEV (ILEVG) = MOD (ILEVG, NPRTRV) + 1
(  221) ENDDO
(  222) # 223 "aatestproguv.F90"
(  223) NFLEV = COUNT (NBSETLEV == MYSETV)
(  224) # 225 "aatestproguv.F90"
(  225) IFLDGPG = NFLDSU + NFLDUA * NFLEVG 
(  226) ALLOCATE (IVSET (IFLDGPG))
(  227) # 228 "aatestproguv.F90"
(  228) DO IFLD = 1, NFLDSU
(  229)   IVSET (IFLD) = NBSETSP
(  230) ENDDO
(  231) # 232 "aatestproguv.F90"
(  232) DO IFLD = 1, NFLDUA
(  233)   DO ILEVG = 1, NFLEVG
(  234)     IVSET (NFLDSU+ILEVG+(IFLD-1)*NFLEVG) = NBSETLEV (ILEVG)
(  235)   ENDDO
(  236) ENDDO
(  237) # 238 "aatestproguv.F90"
(  238) IFLDSPL = COUNT (IVSET == MYSETV)
(  239) # 240 "aatestproguv.F90"
(  240) ALLOCATE (ZSPDIV (IFLDSPL, NSPEC2), ZSPVOR (IFLDSPL, NSPEC2))
(  241) ALLOCATE (ZGPUV (NGPTOT, IFLDGPG, 2, 1), ZMEANU (IFLDSPL), ZMEANV (IFLDSPL))
(  242) # 243 "aatestproguv.F90"
(  243) CALL GENFIELD
(  244) # 245 "aatestproguv.F90"
(  245) IF (.NOT. LLMPOFF) CALL MPL_BARRIER()
(  246) # 247 "aatestproguv.F90"






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 42

(  247) LHOOK = LLHOOK
(  248) # 249 "aatestproguv.F90"
(  249) IF (LHOOK) CALL DR_HOOK ('AATESTPROG',0,ZHOOK_HANDLE)
(  250) # 251 "aatestproguv.F90"
(  251) IF (.NOT. LLNOWRITE) CALL WRIFIELD ('AATESTPROG.0.fa')
(  252) # 254 "aatestproguv.F90"
(  254) DO ITIME = 1, NTIME
(  255)   ZTSTEP = TIMEF()
(  256) # 257 "aatestproguv.F90"
(  257)   IF (LELAM) THEN
(  258)     CALL EDIR_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET, PMEANU=ZMEANU, PMEANV=ZMEANV)
(  259)     CALL EINV_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET, PMEANU=ZMEANU, PMEANV=ZMEANV)
(  260)   ELSE
(  261)     CALL DIR_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET)
(  262)     CALL INV_TRANS (PSPDIV=ZSPDIV, PSPVOR=ZSPVOR, PGPUV=ZGPUV, KVSETUV=IVSET)
(  263)   ENDIF
(  264) # 265 "aatestproguv.F90"
(  265)   IF(MYPROC == 1) THEN
(  266)     ZTSTEP=(TIMEF()-ZTSTEP)/1000.0_JPRB
(  267)     WRITE(*,'(" time step ",I6," took", F8.2)') ITIME, ZTSTEP
(  268)   ENDIF
(  269) ENDDO
(  270) # 321 "aatestproguv.F90"
(  321) IF (LELAM) THEN
(  322)   CALL ETRANS_END
(  323) ELSE
(  324)   CALL TRANS_END
(  325) ENDIF
(  326) # 327 "aatestproguv.F90"
(  327) IF (.NOT. LLMPOFF) CALL MPL_BARRIER
(  328) # 329 "aatestproguv.F90"
(  329) IF (LHOOK) CALL DR_HOOK ('AATESTPROG',1,ZHOOK_HANDLE)
(  330) # 331 "aatestproguv.F90"
(  331) IF (.NOT. LLNOWRITE) CALL WRIFIELD ('AATESTPROG.1.fa')
(  332) # 333 "aatestproguv.F90"
(  333) IF (.NOT. LLMPOFF) CALL MPL_END
(  334) # 335 "aatestproguv.F90"
(  335) IF (MYPROC == 1) WRITE (0, *) " --------- END --------- "
(  336) # 337 "aatestproguv.F90"
(  337) CONTAINS
(  338) # 339 "aatestproguv.F90"
(  339) SUBROUTINE SQUARE (KN, KA, KB)
(  340) # 341 "aatestproguv.F90"
(  341) INTEGER (KIND=JPIM) :: KN, KA, KB
(  342) # 343 "aatestproguv.F90"
(  343) KB = INT (SQRT (REAL (KN))) + 1
(  344) # 345 "aatestproguv.F90"
(  345) DO
(  346)   KA = KN / KB
(  347)   IF (KA * KB == KN) EXIT
(  348)   KB = KB - 1
(  349) ENDDO
(  350) # 351 "aatestproguv.F90"
(  351) END SUBROUTINE SQUARE
(  352) # 353 "aatestproguv.F90"
(  353) SUBROUTINE POSNAM (KULNAM,CDNAML)
(  354) # 355 "aatestproguv.F90"
(  355) USE PARKIND1  ,ONLY : JPIM     ,JPRB






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 43

(  356) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(  357) # 358 "aatestproguv.F90"
(  358) IMPLICIT NONE
(  359) # 360 "aatestproguv.F90"
(  360) INTEGER(KIND=JPIM),INTENT(IN)    :: KULNAM 
(  361) CHARACTER(LEN=*)  ,INTENT(IN)    :: CDNAML 
(  362) # 364 "aatestproguv.F90"
(  364) # 1 ".D[17]/abor1.intfb.h"
(    1) INTERFACE
(    2) # 3 ".D[17]/abor1.intfb.h"
(    3) SUBROUTINE ABOR1(CDTEXT)
(    4) CHARACTER(LEN=*), INTENT(IN) :: CDTEXT
(    5) END SUBROUTINE ABOR1
(    6) # 7 ".D[17]/abor1.intfb.h"
(    7) SUBROUTINE ABOR1FL(CDFILE, KLINENUM, CDTEXT)
(    8) USE PARKIND1  ,ONLY : JPIM
(    9) CHARACTER(LEN=*), INTENT(IN) :: CDFILE,CDTEXT
(   10) INTEGER(KIND=JPIM), INTENT(IN) :: KLINENUM
(   11) END SUBROUTINE ABOR1FL
(   12) # 13 ".D[17]/abor1.intfb.h"
(   13) SUBROUTINE ABOR1_EXCEPTION_HANDLER()
(   14) END SUBROUTINE ABOR1_EXCEPTION_HANDLER
(   15) # 16 ".D[17]/abor1.intfb.h"
(   16) END INTERFACE
(   17) # 365 "aatestproguv.F90"
(  365) # 367 "aatestproguv.F90"
(  367) CHARACTER (LEN = 40) ::  CLINE
(  368) CHARACTER (LEN =  1) ::  CLTEST
(  369) # 370 "aatestproguv.F90"
(  370) INTEGER(KIND=JPIM) :: ILEN, IND1, ISTATUS, ISCAN
(  371) REAL(KIND=JPRB)    :: ZHOOK_HANDLE
(  372) # 373 "aatestproguv.F90"
(  373) IF (LHOOK) CALL DR_HOOK('POSNAM',0,ZHOOK_HANDLE)
(  374) # 375 "aatestproguv.F90"
(  375) CLINE='                                        '
(  376) REWIND(KULNAM)
(  377) ILEN=LEN(CDNAML)
(  378) ISTATUS=0
(  379) ISCAN=0
(  380) DO WHILE (ISTATUS==0 .AND. ISCAN==0)
(  381)   READ(KULNAM,'(A)',IOSTAT=ISTATUS) CLINE
(  382)   SELECT CASE (ISTATUS)
(  383)   CASE (:-1)
(  384)     CALL ABOR1 ('POSNAM: CANNOT FIND '//TRIM (CDNAML))
(  385)   CASE (0)
(  386)     IF (INDEX(CLINE(1:10),'&') == 0) THEN
(  387)       ISCAN=0
(  388)     ELSE
(  389)       IND1=INDEX(CLINE,'&'//CDNAML)
(  390)       IF (IND1 == 0) THEN
(  391)         ISCAN=0
(  392)       ELSE
(  393)         CLTEST=CLINE(IND1+ILEN+1:IND1+ILEN+1)
(  394)         IF (   (LGE(CLTEST,'0').AND.LLE(CLTEST,'9')) &
(  395)          & .OR.(LGE(CLTEST,'A').AND.LLE(CLTEST,'Z')) ) THEN
(  396)           ISCAN=0
(  397)         ELSE
(  398)           ISCAN=1






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 44

(  399)         ENDIF
(  400)       ENDIF
(  401)     ENDIF
(  402)   CASE (1:)
(  403)     CALL ABOR1 ('POSNAM: AN ERROR HAPPENED WHILE READING THE NAMELIST')
(  404)   END SELECT
(  405) ENDDO
(  406) BACKSPACE(KULNAM)
(  407) # 408 "aatestproguv.F90"
(  408) IF (LHOOK) CALL DR_HOOK('POSNAM',1,ZHOOK_HANDLE)
(  409) END SUBROUTINE POSNAM
(  410) # 411 "aatestproguv.F90"
(  411) SUBROUTINE WRIFIELD (CDFILE)
(  412) # 413 "aatestproguv.F90"
(  413) CHARACTER (LEN=*), INTENT (IN) :: CDFILE
(  414) REAL (KIND=JPRB), ALLOCATABLE :: ZGPBUFG (:, :)
(  415) INTEGER (KIND=JPIM) :: ITO (IFLDGPG), JFLD
(  416) CHARACTER (LEN=16) :: CLPREF
(  417) # 418 "aatestproguv.F90"
(  418) ITO = 1_JPIM
(  419) # 420 "aatestproguv.F90"
(  420) IF (MYPROC == 1) THEN
(  421)   ALLOCATE (ZGPBUFG (NGPTOTG, IFLDGPG))
(  422)   CALL SYSTEM ('rm -f '//TRIM (CDFILE))
(  423)   CALL GATH_GRID (PGPG=ZGPBUFG, KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,1,:))
(  424)   DO JFLD = 1, IFLDGPG
(  425)     WRITE (CLPREF, '("WW",I2.2)') JFLD
(  426)     CALL WFA (ZGPBUFG (:, JFLD), CDFILE, CLPREF, 'U')
(  427)   ENDDO
(  428)   CALL GATH_GRID (PGPG=ZGPBUFG, KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,2,:))
(  429)   DO JFLD = 1, IFLDGPG
(  430)     WRITE (CLPREF, '("WW",I2.2)') JFLD
(  431)     CALL WFA (ZGPBUFG (:, JFLD), CDFILE, CLPREF, 'V')
(  432)   ENDDO
(  433)   DEALLOCATE (ZGPBUFG)
(  434) ELSE
(  435)   CALL GATH_GRID (KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,1,:))
(  436)   CALL GATH_GRID (KFGATHG=IFLDGPG, KTO=ITO, PGP=ZGPUV (:,:,2,:))
(  437) ENDIF
(  438) # 439 "aatestproguv.F90"
(  439) END SUBROUTINE
(  440) # 441 "aatestproguv.F90"
(  441) SUBROUTINE WFA (PGLO, CDFILE, CDPREF, CDSUFF)
(  442) # 443 "aatestproguv.F90"
(  443) REAL (KIND=JPRB),  INTENT (IN) :: PGLO (:)
(  444) CHARACTER (LEN=*), INTENT (IN) :: CDFILE
(  445) CHARACTER (LEN=*), INTENT (IN) :: CDPREF, CDSUFF
(  446) # 447 "aatestproguv.F90"
(  447) REAL (KIND=JPRB) :: ZMU (NDGLG)
(  448) # 449 "aatestproguv.F90"
(  449) CHARACTER (LEN=3) :: CLNOMC 
(  450) REAL (KIND=JPRB) :: ZAHYBR (2), ZBHYBR (2), ZSLAPO, ZCLOPO, ZSLOPO, ZCODIL, ZREFER
(  451) INTEGER (KIND=JPIM) :: INIVER, ITYPTR, ITRONC, INLATI, INXLON
(  452) INTEGER (KIND=JPIM) :: NLOENG (NDGLG), INOZPA (NDGLG)
(  453) INTEGER (KIND=JPIM) :: INBARP, INBARI, ILUN, IREP
(  454) INTEGER (KIND=JPIM) :: INGRIB, INARG1, INARG2, INARG3, INARG4, INARG5
(  455) INTEGER (KIND=JPIM) :: IDATEF (11), ILCHAM
(  456) LOGICAL :: LLEXIST






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 45

(  457) CHARACTER (LEN=32) :: CLSTATUS
(  458) # 459 "aatestproguv.F90"
(  459) INQUIRE (FILE=TRIM (CDFILE), EXIST=LLEXIST)
(  460) # 461 "aatestproguv.F90"
(  461) IF (LLEXIST) THEN
(  462) CLSTATUS = 'OLD'
(  463) IF (LELAM) THEN
(  464)   CLNOMC = 'ALD'
(  465) ELSE
(  466)   CLNOMC = 'ARP'
(  467) ENDIF
(  468) ELSE
(  469) CLSTATUS = 'NEW'
(  470) IF (LELAM) THEN
(  471) BLOCK
(  472)   INTEGER (KIND=JPIM) :: INLOPA (8)
(  473)   INTEGER (KIND=JPIM) :: NX, NY, NUX, NUY
(  474)   REAL (KIND=JPRB) :: DXINMETRES, DYINMETRES
(  475)   REAL (KIND=JPRB) :: ZSINLA (18)
(  476) # 477 "aatestproguv.F90"
(  477)   REAL (KIND=JPRB), PARAMETER :: LADINDEGREES    = 46.2_JPRB
(  478)   REAL (KIND=JPRB), PARAMETER :: LATIN1INDEGREES = 46.2_JPRB
(  479)   REAL (KIND=JPRB), PARAMETER :: LATIN2INDEGREES = 46.2_JPRB
(  480)   REAL (KIND=JPRB), PARAMETER :: LOVINDEGREES    =  2.0_JPRB
(  481) # 482 "aatestproguv.F90"
(  482)   CLNOMC = 'ALD'
(  483)   NX = NDLON
(  484)   NY = NDGLG
(  485) # 486 "aatestproguv.F90"
(  486)   ! Round dx to 100m
(  487)   DXINMETRES = 2000.E3_JPRB / REAL (NX - 1, JPRB)
(  488)   DXINMETRES = 100._JPRB * NINT (DXINMETRES / 100._JPRB) 
(  489)   DYINMETRES = DXINMETRES
(  490) # 491 "aatestproguv.F90"
(  491)   NUX = NX - 1
(  492)   NUY = NY - 1
(  493) # 494 "aatestproguv.F90"
(  494)   INLATI = NY
(  495)   INXLON = NX
(  496)   ZSLAPO = 0._JPRB
(  497)   ZCLOPO = 0._JPRB
(  498)   ZSLOPO = 0._JPRB
(  499)   ZCODIL = 0._JPRB
(  500)   ZREFER = 0._JPRB
(  501)   INIVER = 1_JPIM
(  502)   ZAHYBR = 0._JPRB
(  503)   ZBHYBR = 0._JPRB 
(  504)   INLOPA = [10_JPIM, 1_JPIM, 1_JPIM, NUX+1, 1_JPIM, NUY+1, 8_JPIM, 8_JPIM]
(  505)   ITRONC = +INLATI / 2 - 1 
(  506)   ITYPTR = -INXLON / 2 + 1 
(  507)   
(  508)   ZSINLA = [-1._JPRB, SIN (DEG2RAD * LADINDEGREES), DEG2RAD * LOVINDEGREES, DEG2RAD * LADINDEGREES, &
(  509)          &  DEG2RAD * LOVINDEGREES, DEG2RAD * LADINDEGREES, DXINMETRES, DYINMETRES, &
(  510)          &  INXLON * DXINMETRES, INLATI * DYINMETRES, 0._JPRB, 0._JPRB, 0._JPRB, &
(  511)          &  0._JPRB, 0._JPRB, 0._JPRB, 0._JPRB, 0._JPRB ]
(  512)   
(  513)   CALL FACADE (CLNOMC, ITYPTR, ZSLAPO, ZCLOPO, ZSLOPO, &
(  514)   &            ZCODIL, ITRONC, INLATI, INXLON, INLOPA, &






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 46

(  515)   &            INOZPA, ZSINLA, INIVER, ZREFER, ZAHYBR, &
(  516)   &            ZBHYBR, .FALSE.)
(  517) # 518 "aatestproguv.F90"
(  518) ENDBLOCK
(  519) ELSE
(  520) BLOCK
(  521)   REAL (KIND=JPRB) :: ZCENTRE (2)
(  522) # 523 "aatestproguv.F90"
(  523)   CLNOMC = 'ARP'
(  524) # 525 "aatestproguv.F90"
(  525)   CALL TRANS_INQ (PMU=ZMU)
(  526)   
(  527)   ZCENTRE = [0._JPRB, 90._JPRB]
(  528)   ZCODIL = 1._JPRB
(  529)   
(  530)   INIVER = 1_JPIM
(  531)   ZAHYBR = 0._JPRB
(  532)   ZBHYBR = 0._JPRB
(  533)   ITYPTR = 2_JPIM
(  534)   
(  535)   NLOENG = NLOEN
(  536)   
(  537)   ZSLAPO = SIN (ZCENTRE (2) * DEG2RAD)
(  538)   ZCLOPO = COS (ZCENTRE (1) * DEG2RAD)
(  539)   ZSLOPO = SIN (ZCENTRE (1) * DEG2RAD)
(  540)   INLATI = NDGLG
(  541)   INXLON = MAXVAL (NLOENG)
(  542)   ITRONC = INXLON / 3
(  543)   INOZPA = MIN (ITRONC, NLOENG/2_JPIM-1_JPIM)
(  544)   ZREFER = 1._JPRB
(  545)   
(  546)   CALL FACADE (CLNOMC, ITYPTR, ZSLAPO, ZCLOPO, ZSLOPO, &
(  547)   &            ZCODIL, ITRONC, INLATI, INXLON, NLOENG, &
(  548)   &            INOZPA, ZMU,    INIVER, ZREFER, ZAHYBR, &
(  549)   &            ZBHYBR, .FALSE.)
(  550) # 551 "aatestproguv.F90"
(  551) ENDBLOCK
(  552) ENDIF
(  553) ENDIF
(  554) # 555 "aatestproguv.F90"
(  555) INBARP = 0
(  556) INBARI = 0
(  557) ILUN = 77
(  558) CALL FAITOU (IREP, ILUN, .TRUE., TRIM (CDFILE), TRIM (CLSTATUS), &
(  559)            & .TRUE., .TRUE., 2_JPIM, INBARP, INBARI, CLNOMC)
(  560) # 561 "aatestproguv.F90"
(  561) IF (.NOT. LLEXIST) THEN
(  562) IDATEF = [1990,  2, 15, 12,  0,   1,  0, 24,   1, 0, 0]
(  563) CALL FANDAR (IREP, ILUN, IDATEF)
(  564) ENDIF
(  565) # 566 "aatestproguv.F90"
(  566) CALL FATCHA (IREP, CLNOMC, .FALSE., ILCHAM)
(  567) # 568 "aatestproguv.F90"
(  568) CALL FAVEUR (IREP, ILUN, INGRIB, INARG1, INARG2, INARG3, INARG4, INARG5)
(  569) INGRIB = 123_JPIM
(  570) CALL FAGOTE (IREP, ILUN, INGRIB, INARG1, INARG2, INARG3, INARG4, INARG5)
(  571) # 572 "aatestproguv.F90"
(  572) CALL FAIENC (IREP, ILUN, TRIM (CDPREF), 0, TRIM (CDSUFF), PGLO, .FALSE.)






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 47

(  573) # 574 "aatestproguv.F90"
(  574) CALL FAIRME (IREP, ILUN, 'KEEP')
(  575) # 576 "aatestproguv.F90"
(  576) END SUBROUTINE
(  577) # 578 "aatestproguv.F90"
(  578) SUBROUTINE GENFIELD
(  579) # 580 "aatestproguv.F90"
(  580) REAL (KIND=JPRB), ALLOCATABLE :: ZGPBUFG (:, :)
(  581) # 583 "aatestproguv.F90"
(  583) IF (MYPROC == 1) THEN
(  584)   ALLOCATE (ZGPBUFG (NGPTOTG, 2))
(  585) # 586 "aatestproguv.F90"
(  586)   IF ((TRIM (CLFIELDU) /= '') .AND. (TRIM (CLFIELDV) /= '')) THEN
(  587)     OPEN (77, FILE=TRIM (CLFIELDU), FORM='UNFORMATTED', STATUS='OLD')
(  588)     READ (77) ZGPBUFG (:,1)
(  589)     CLOSE (77)
(  590)     OPEN (77, FILE=TRIM (CLFIELDV), FORM='UNFORMATTED', STATUS='OLD')
(  591)     READ (77) ZGPBUFG (:,2)
(  592)     CLOSE (77)
(  593)   ELSE
(  594)   BLOCK
(  595)     REAL (KIND=JPRB) :: ZLON, ZLAT, ZU, ZV, ZX, ZY
(  596)     INTEGER (KIND=JPIM) :: JLAT, JLON, JGLO
(  597) # 598 "aatestproguv.F90"
(  598)     JGLO = 1
(  599) # 600 "aatestproguv.F90"
(  600)     DO JLAT = 1, NDGLG
(  601)       DO JLON = 1, NLOEN (JLAT)
(  602)        
(  603)         IF (LELAM) THEN
(  604)           ZX = REAL (JLON-1, JPRB) / REAL (NDLON, JPRB)
(  605)           ZY = REAL (JLAT-1, JPRB) / REAL (NDLON, JPRB)
(  606)           ZU = ZX * (1._JPRB - ZX) * ZY * (1._JPRB - ZY) * 4._JPRB
(  607)           ZV = COS (2 * RPI * ZX) * SIN (2 * RPI * ZY)
(  608)         ELSE
(  609)           ZLAT = + RPI * (0.5_JPRB - REAL (JLAT, JPRB) / REAL (NDGLG+1, JPRB))
(  610)           ZLON = 2 * RPI * REAL (JLON-1, JPRB) / REAL (NLOEN (JLAT))
(  611)           ZU = COS (2 * ZLAT - RPI / 2) * SIN (ZLON)
(  612)           ZV = COS (3 * ZLAT) * COS (ZLON)
(  613)         ENDIF
(  614)         ZGPBUFG (JGLO, 1) = ZU + 0.5
(  615)         ZGPBUFG (JGLO, 2) = ZV - 0.5
(  616)         JGLO = JGLO + 1
(  617)       ENDDO
(  618)     ENDDO
(  619)   ENDBLOCK
(  620)   ENDIF
(  621) # 622 "aatestproguv.F90"
(  622)   IF (LELAM) THEN
(  623)     CALL EDIST_GRID (PGPG=ZGPBUFG, KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))
(  624)   ELSE
(  625)     CALL DIST_GRID (PGPG=ZGPBUFG, KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))
(  626)   ENDIF
(  627) # 628 "aatestproguv.F90"
(  628)   DEALLOCATE (ZGPBUFG)
(  629) ELSE
(  630)   IF (LELAM) THEN
(  631)     CALL EDIST_GRID (KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))






NVFORTRAN (Version    20.11)          02/16/2022  17:29:56      page 48

(  632)   ELSE
(  633)     CALL DIST_GRID (KFDISTG=2_JPIM, KFROM=[1_JPIM, 1_JPIM], PGP=ZGPUV (:,1,1:2,:))
(  634)   ENDIF
(  635) ENDIF
(  636) # 637 "aatestproguv.F90"
(  637) DO IFLD = 2, IFLDGPG
(  638)   ZGPUV (:, IFLD, 1, 1) = ZGPUV (:, 1, 1, 1) * IFLD
(  639)   ZGPUV (:, IFLD, 2, 1) = ZGPUV (:, 1, 2, 1) * IFLD
(  640) ENDDO
(  641) # 642 "aatestproguv.F90"
(  642) END SUBROUTINE
(  643) # 644 "aatestproguv.F90"
(  644) END PROGRAM TEST
